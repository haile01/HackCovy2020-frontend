{"version":3,"sources":["reducers/userReducer.ts","reducers/index.ts","store/index.ts","App.tsx","serviceWorker.ts","index.tsx","utils/history.ts"],"names":["userReducer","state","action","type","payload","rootReducer","combineReducers","router","connectRouter","history","user","store","createStore","applyMiddleware","routerMiddleware","Home","React","lazy","Navbar","SearchBooking","Booking","Profile","SignIn","App","className","fallback","exact","path","component","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","createBrowserHistory"],"mappings":"0RASeA,EATK,WAA8B,IAA7BC,EAA4B,uDAApB,GAAIC,EAAgB,uCAC/C,OAAQA,EAAOC,MACb,IAAK,WACH,OAAOD,EAAOE,QAChB,QACE,OAAOH,ICMEI,EALKC,YAAgB,CAClCC,OAAQC,YAAcC,KACtBC,KAAMV,ICAOW,EAFDC,YAAYP,EAAaQ,YAAgBC,YAAiBL,OCElEM,EAAOC,IAAMC,MAAK,kBAAM,wDACxBC,EAASF,IAAMC,MAAK,kBAAM,+DAC1BE,EAAgBH,IAAMC,MAAK,kBAC/B,4EAEIG,EAAUJ,IAAMC,MAAK,kBAAM,6EAC3BI,EAAUL,IAAMC,MAAK,kBAAM,4EAC3BK,EAASN,IAAMC,MAAK,kBAAM,sEAwBjBM,MAtBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAUb,MAAOA,GACf,kBAAC,WAAD,CAAUc,SAAU,yCAClB,kBAACP,EAAD,MACA,kBAAC,IAAD,CAAiBT,QAASA,KACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,UAAUC,UAAWN,IACvC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,UAAUC,UAAWT,IACvC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,QAAQC,UAAWR,IACrC,kBAAC,IAAD,CAAOO,KAAK,eAAeC,UAAWP,IACtC,kBAAC,IAAD,CAAOM,KAAK,WAAWE,GAAG,GAAGD,UAAWP,UClBlCS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,+BEjJ5B,WAEMxC,EAAUyC,cAEDzC,Q","file":"static/js/main.ef50fee3.chunk.js","sourcesContent":["const userReducer = (state = {}, action: any) => {\n  switch (action.type) {\n    case \"SET_USER\":\n      return action.payload;\n    default:\n      return state;\n  }\n}\n\nexport default userReducer;","import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\n\nimport history from '../utils/history'\nimport userReducer from './userReducer'\n\nconst rootReducer = combineReducers({\n  router: connectRouter(history),\n  user: userReducer\n})\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux'\nimport { routerMiddleware } from 'connected-react-router';\n\nimport history from '../utils/history'\nimport rootReducer from '../reducers'\n\nconst store = createStore(rootReducer, applyMiddleware(routerMiddleware(history)));\n\nexport default store;","import React, { Suspense } from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport { ConnectedRouter } from \"connected-react-router\";\n\nimport store from \"./store\";\nimport history from \"./utils/history\";\nconst Home = React.lazy(() => import(\"./components/Home\"));\nconst Navbar = React.lazy(() => import(\"./components/Navbar\"));\nconst SearchBooking = React.lazy(() =>\n  import(\"./components/Booking/SearchBooking\")\n);\nconst Booking = React.lazy(() => import(\"./components/Booking\"));\nconst Profile = React.lazy(() => import(\"./components/Profile\"));\nconst SignIn = React.lazy(() => import(\"./components/Credentials/SignIn\"));\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Suspense fallback={<div>Loading</div>}>\n          <Navbar />\n          <ConnectedRouter history={history}>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/signin\" component={SignIn} />\n              <Route exact path=\"/search\" component={SearchBooking} />\n              <Route exact path=\"/book\" component={Booking} />\n              <Route path=\"/profile/:id\" component={Profile} />\n              <Route path=\"/profile\" id=\"\" component={Profile} />\n            </Switch>\n          </ConnectedRouter>\n        </Suspense>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// import bootstrap core css\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory();\n\nexport default history;"],"sourceRoot":""}