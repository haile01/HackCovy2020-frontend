{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../src/controlled.ts","../../src/DelayedRender.tsx","../../src/utilities.ts","../../src/slots.tsx","../../src/createComponent.tsx","../../src/components/Stack/StackUtils.ts","../../src/components/Stack/Stack.styles.ts","../../src/components/Stack/StackItem/StackItem.styles.ts","../../src/components/Stack/StackItem/StackItem.tsx","../../src/components/Stack/Stack.tsx","../../src/components/TextField/TextField.base.tsx","../../src/components/TextField/TextField.styles.tsx","../../src/components/TextField/TextField.ts","../../src/components/Label/Label.base.tsx","../../src/components/Label/Label.tsx","../../src/components/Label/Label.styles.ts","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","_arrayLikeToArray","arr","len","length","i","arr2","isControlled","props","valueProp","undefined","state","isRendered","componentDidMount","delay","this","_timeoutId","window","setTimeout","setState","componentWillUnmount","clearTimeout","render","only","children","defaultProps","withSlots","type","slotType","isSlot","numChildren","count","toArray","createFactory","DefaultComponent","options","defaultProp","componentProps","userProps","userSlotOptions","defaultStyles","theme","finalProps","classNames","allProps","push","className","rtl","_constructFinalProps","slotProps","transformedProps","_translateShorthand","component","UserComponent","defaultFactory","memoize","getSlots","slots","result","mixedProps","hasOwnProperty","slot","args","Error","_renderSlot","_defaultStyles","ComponentType","slotOptions","create","createComponent","view","factoryOptions","displayName","context","fields","settings","CustomizerContext","Customizations","getSettings","customizations","useState","tokens","_resolveTokens","allTokens","currentTokens","isArray","styles","allStyles","map","_resolveStyles","viewProps","statics","_getThemedSpacing","space","spacing","_getValueUnitGap","gap","numericalPart","parseFloat","numericalValue","isNaN","numericalString","value","unit","substring","parsePadding","padding","paddingValues","split","reduce","padding1","padding2","nameMap","start","end","GlobalClassNames","root","inner","alignMap","StackItem","grow","shrink","disableShrink","align","verticalFill","order","fonts","medium","margin","height","width","flexGrow","flexShrink","alignSelf","Stack","as","wrap","warnDeprecations","maxHeight","maxWidth","stackChildren","child","index","item","defaultItemProps","nativeProps","rest","Slots","RootType","horizontal","reversed","horizontalAlign","verticalAlign","childrenGap","rowGap","columnGap","splitGap","calculatedGap","horizontalMargin","verticalMargin","childStyles","textOverflow","commonSelectors","flexWrap","overflow","display","marginLeft","marginRight","marginTop","marginBottom","boxSizing","selectors","flexDirection","Item","getClassNames","classNamesFunction","_textElement","_onFocus","ev","onFocus","isFocused","validateOnFocusIn","_validate","_onBlur","onBlur","validateOnFocusOut","_onRenderLabel","label","required","labelStyles","_classNames","subComponentStyles","Label","htmlFor","_id","disabled","id","_labelId","_onRenderDescription","description","_onInputChange","event","isSameValue","target","_lastChangeValue","persist","prevState","prevValue","_getValue","_isControlled","uncontrolledValue","onChange","initializeComponentRef","_async","Async","_fallbackId","getId","_descriptionId","COMPONENT_NAME","_warnControlledUsage","defaultValue","String","errorMessage","_delayedValidate","debounce","deferredValidationTime","_lastValidation","_adjustInputHeight","validateOnLoad","dispose","getSnapshotBeforeUpdate","prevProps","selection","selectionStart","selectionEnd","componentDidUpdate","snapshot","multiline","focus","setSelectionRange","_shouldValidateAllChanges","borderless","iconProps","inputClassName","underlined","prefix","resizable","suffix","autoAdjustHeight","onRenderPrefix","onRenderSuffix","onRenderLabel","onRenderDescription","_errorMessage","focused","hasLabel","hasErrorMessage","hasIcon","wrapper","fieldGroup","_onRenderPrefix","_renderTextArea","_renderInput","Icon","icon","_onRenderSuffix","_isDescriptionAvailable","role","DelayedRender","current","blur","select","setSelectionStart","setSelectionEnd","_hasWarnedNullValue","warn","style","paddingBottom","textAreaProps","ariaLabelledBy","ref","onInput","field","ariaLabel","readOnly","inputProps","_latestValidateValue","onGetErrorMessage","then","_notifyAfterValidate","onNotifyValidationResult","textField","scrollHeight","globalClassNames","unresizable","active","getLabelStyles","palette","color","neutralTertiary","fontSize","paddingLeft","paddingRight","lineHeight","TextField","styled","semanticColors","effects","fieldPrefixSuffix","background","disabledBackground","disabledText","inputPlaceholderText","alignItems","whiteSpace","placeholderStyles","opacity","disabledPlaceholderStyles","position","borderBottom","errorText","inputBorder","borderBottomColor","borderColor","inputBorderHovered","inputFocusBorderAlt","border","borderRadius","roundedCorner2","inputBackground","cursor","minHeight","flex","textAlign","backgroundColor","content","top","right","inputText","minWidth","outline","resize","paddingTop","pointerEvents","bottom","bodySubtext","xSmall","slideDownIn20","small","scope","cacheSize","labelFontWeight","semibold","labelColor","bodyText","labelDisabledColor","disabledBodyText","labelRequiredStarColor","fontWeight","boxShadow","wordWrap","overflowWrap","_slicedToArray","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","err","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/2.943fb917.chunk.js","sourcesContent":["import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","/**\n * Determines whether a component is controlled.\n * @param props - Component props\n * @param valueProp - Prop containing the controlled value\n * @returns true if controlled, false if uncontrolled\n */\nexport function isControlled<P>(props: P, valueProp: keyof P): boolean {\n  // React's built-in <input> considers a prop to be provided if its value is non-null/undefined.\n  // Mirror that behavior here (rather than checking for just undefined).\n  return props[valueProp] !== undefined && props[valueProp] !== null;\n}\n","import * as React from 'react';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// tslint:disable-next-line:deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n","import { __assign } from 'tslib';\nexport const assign = __assign;\n","import * as React from 'react';\nimport { mergeCss } from '@uifabric/merge-styles';\nimport { IStyle, ITheme } from '@uifabric/styling';\nimport { getRTL, memoizeFunction } from '@uifabric/utilities';\nimport { assign } from './utilities';\nimport { IFactoryOptions } from './IComponent';\nimport {\n  ISlottableReactType,\n  ISlot,\n  ISlots,\n  ISlotDefinition,\n  ISlotFactory,\n  ISlotProp,\n  ISlottableProps,\n  ISlotOptions,\n  IDefaultSlotProps,\n  IProcessedSlotProps,\n  ValidProps,\n  ValidShorthand,\n} from './ISlots';\n\n/**\n * This function is required for any module that uses slots.\n *\n * This function is a slot resolver that automatically evaluates slot functions to generate React elements.\n * A byproduct of this resolver is that it removes slots from the React hierarchy by bypassing React.createElement.\n *\n * To use this function on a per-file basis, use the jsx directive targeting withSlots.\n * This directive must be the FIRST LINE in the file to work correctly.\n * Usage of this pragma also requires withSlots import statement.\n *\n * See React.createElement\n */\n// Can't use typeof on React.createElement since it's overloaded. Approximate createElement's signature for now\n// and widen as needed.\nexport function withSlots<P>(\n  type: ISlot<P> | React.FunctionComponent<P> | string,\n  props?: (React.Attributes & P) | null,\n  // tslint:disable-next-line:missing-optional-annotation\n  ...children: React.ReactNode[]\n): ReturnType<React.FunctionComponent<P>> {\n  const slotType = type as ISlot<P>;\n  if (slotType.isSlot) {\n    // TODO: There is something weird going on here with children embedded in props vs. rest args.\n    // Comment out these lines to see. Make sure this function is doing the right things.\n    const numChildren = React.Children.count(children);\n    if (numChildren === 0) {\n      return slotType(props);\n    }\n\n    // Since we are bypassing createElement, use React.Children.toArray to make sure children are\n    // properly assigned keys.\n    // TODO: should this be mutating? does React mutate children subprop with createElement?\n    // TODO: will toArray clobber existing keys?\n    // TODO: React generates warnings because it doesn't detect hidden member _store that is set in createElement.\n    //        Even children passed to createElement without keys don't generate this warning.\n    //        Is there a better way to prevent slots from appearing in hierarchy? toArray doesn't address root issue.\n    children = React.Children.toArray(children);\n\n    return slotType({ ...(props as any), children });\n  } else {\n    // TODO: Are there some cases where children should NOT be spread? Also, spreading reraises perf question.\n    //        Children had to be spread to avoid breaking KeytipData in Toggle.view:\n    //        react-dom.development.js:18931 Uncaught TypeError: children is not a function\n    //        Without spread, function child is a child array of one element\n    // TODO: is there a reason this can't be:\n    // return React.createElement.apply(this, arguments);\n    return React.createElement(type, props, ...children);\n  }\n}\n\n/**\n * This function creates factories that render ouput depending on the user ISlotProp props passed in.\n * @param DefaultComponent - Base component to render when not overridden by user props.\n * @param options - Factory options, including defaultProp value for shorthand prop mapping.\n * @returns ISlotFactory function used for rendering slots.\n */\nexport function createFactory<TProps extends ValidProps, TShorthandProp extends ValidShorthand = never>(\n  DefaultComponent: React.ComponentType<TProps>,\n  options: IFactoryOptions<TProps> = {},\n): ISlotFactory<TProps, TShorthandProp> {\n  const { defaultProp = 'children' } = options;\n\n  const result: ISlotFactory<TProps, TShorthandProp> = (\n    componentProps,\n    userProps,\n    userSlotOptions,\n    defaultStyles,\n    theme,\n  ) => {\n    // If they passed in raw JSX, just return that.\n    if (React.isValidElement(userProps)) {\n      return userProps;\n    }\n\n    const flattenedUserProps: TProps | undefined = _translateShorthand(defaultProp as string, userProps);\n    const finalProps = _constructFinalProps(defaultStyles, theme, componentProps, flattenedUserProps);\n\n    if (userSlotOptions) {\n      if (userSlotOptions.component) {\n        // TODO: Remove cast if possible. This cast is needed because TS errors on the intrinsic portion of ReactType.\n        // return <userSlotOptions.component {...finalProps} />;\n        const UserComponent = userSlotOptions.component as React.ComponentType<TProps>;\n        return <UserComponent {...finalProps} />;\n      }\n\n      if (userSlotOptions.render) {\n        return userSlotOptions.render(finalProps, DefaultComponent);\n      }\n    }\n\n    return <DefaultComponent {...finalProps} />;\n  };\n\n  return result;\n}\n\n/**\n * Default factory for components without explicit factories.\n */\nconst defaultFactory = memoizeFunction(type => createFactory(type));\n\n/**\n * This function generates slots that can be used in JSX given a definition of slots and their corresponding types.\n * @param userProps - Props as pass to component.\n * @param slots - Slot definition object defining the default slot component for each slot.\n * @returns A set of created slots that components can render in JSX.\n */\nexport function getSlots<TComponentProps extends ISlottableProps<TComponentSlots>, TComponentSlots>(\n  userProps: TComponentProps,\n  slots: ISlotDefinition<Required<TComponentSlots>>,\n): ISlots<Required<TComponentSlots>> {\n  const result: ISlots<Required<TComponentSlots>> = {} as ISlots<Required<TComponentSlots>>;\n\n  // userProps already has default props mixed in by createComponent. Recast here to gain typing for this function.\n  const mixedProps = userProps as TComponentProps & IDefaultSlotProps<TComponentSlots>;\n\n  for (const name in slots) {\n    if (slots.hasOwnProperty(name)) {\n      // This closure method requires the use of withSlots to prevent unnecessary rerenders. This is because React\n      // detects each closure as a different component (since it is a new instance) from the previous one and then\n      // forces a rerender of the entire slot subtree. For now, the only way to avoid this is to use withSlots, which\n      // bypasses the call to React.createElement.\n      const slot: ISlots<Required<TComponentSlots>>[keyof TComponentSlots] = (componentProps, ...args: any[]) => {\n        if (args.length > 0) {\n          // If React.createElement is being incorrectly used with slots, there will be additional arguments.\n          // We can detect these additional arguments and error on their presence.\n          throw new Error('Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.');\n        }\n        // TODO: having TS infer types here seems to cause infinite loop.\n        //   use explicit types or casting to preserve typing if possible.\n        // TODO: this should be a lookup on TProps property instead of being TProps directly, which is probably\n        //   causing the infinite loop\n        return _renderSlot<any, any, any>(\n          slots[name],\n          // TODO: this cast to any is hiding a relationship issue between the first two args\n          componentProps as any,\n          mixedProps[name],\n          mixedProps.slots && mixedProps.slots[name],\n          // _defaultStyles should always be present, but a check for existence is added to make view tests\n          // easier to use.\n          mixedProps._defaultStyles && mixedProps._defaultStyles[name],\n          (mixedProps as any).theme,\n        );\n      };\n      slot.isSlot = true;\n      result[name] = slot;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Helper function that translates shorthand as needed.\n * @param defaultProp\n * @param slotProps\n */\nfunction _translateShorthand<TProps extends ValidProps, TShorthandProp extends ValidShorthand>(\n  defaultProp: string,\n  slotProps: ISlotProp<TProps, TShorthandProp>,\n): TProps | undefined {\n  let transformedProps: TProps | undefined;\n\n  if (typeof slotProps === 'string' || typeof slotProps === 'number' || typeof slotProps === 'boolean') {\n    transformedProps = {\n      [defaultProp]: slotProps as any,\n    } as TProps;\n  } else {\n    transformedProps = slotProps as TProps;\n  }\n\n  return transformedProps;\n}\n\n/**\n * Helper function that constructs final styles and props given a series of props ordered by increasing priority.\n */\nfunction _constructFinalProps<TProps extends IProcessedSlotProps>(\n  defaultStyles: IStyle,\n  theme?: ITheme,\n  // tslint:disable-next-line:missing-optional-annotation\n  ...allProps: (TProps | undefined)[]\n): TProps {\n  const finalProps: TProps = {} as any;\n  const classNames: (string | undefined)[] = [];\n\n  for (const props of allProps) {\n    classNames.push(props && props.className);\n    assign(finalProps, props);\n  }\n\n  finalProps.className = mergeCss([defaultStyles, classNames], { rtl: getRTL(theme) });\n\n  return finalProps;\n}\n\n/**\n * Render a slot given component and user props. Uses component factory if available, otherwise falls back\n * to default factory.\n * @param ComponentType Factory component type.\n * @param componentProps The properties passed into slot from within the component.\n * @param userProps The user properties passed in from outside of the component.\n */\nfunction _renderSlot<\n  TSlotComponent extends ISlottableReactType<TSlotProps, TSlotShorthand>,\n  TSlotProps extends ValidProps,\n  TSlotShorthand extends ValidShorthand\n>(\n  ComponentType: TSlotComponent,\n  componentProps: TSlotProps,\n  userProps: ISlotProp<TSlotProps, TSlotShorthand>,\n  slotOptions: ISlotOptions<TSlotProps> | undefined,\n  defaultStyles: IStyle,\n  theme?: ITheme,\n): ReturnType<React.FunctionComponent> {\n  if (ComponentType.create !== undefined) {\n    return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);\n  } else {\n    // TODO: need to resolve typing / generic issues passing through memoizeFunction. for now, cast to 'unknown'\n    return ((defaultFactory(ComponentType) as unknown) as ISlotFactory<TSlotProps, TSlotShorthand>)(\n      componentProps,\n      userProps,\n      slotOptions,\n      defaultStyles,\n      theme,\n    );\n  }\n}\n","import * as React from 'react';\nimport { concatStyleSets, IStyleSet, ITheme } from '@uifabric/styling';\nimport { Customizations, CustomizerContext, ICustomizerContext } from '@uifabric/utilities';\nimport { createFactory } from './slots';\nimport { assign } from './utilities';\n\nimport {\n  IComponentOptions,\n  ICustomizationProps,\n  IStyleableComponentProps,\n  IStylesFunctionOrObject,\n  IToken,\n  ITokenFunction,\n  IViewComponent,\n} from './IComponent';\nimport { IDefaultSlotProps, ISlotCreator, ValidProps } from './ISlots';\n\n/**\n * Assembles a higher order component based on the following: styles, theme, view, and state.\n * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\n * in how components use and apply styling and theming.\n *\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\n * and styled before finally being passed to view.\n *\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call\n * the view prop.\n *\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\n *\n * State component is optional. If state is not provided, created component is essentially a functional\n * stateless component.\n *\n * @param options - component Component options. See IComponentOptions for more detail.\n */\nexport function createComponent<\n  TComponentProps extends ValidProps,\n  TTokens,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TViewProps extends TComponentProps = TComponentProps,\n  TStatics = {}\n>(\n  view: IViewComponent<TViewProps>,\n  options: IComponentOptions<TComponentProps, TTokens, TStyleSet, TViewProps, TStatics> = {},\n): React.FunctionComponent<TComponentProps> & TStatics {\n  const { factoryOptions = {} } = options;\n  const { defaultProp } = factoryOptions;\n\n  const result: React.FunctionComponent<TComponentProps> = (\n    componentProps: TComponentProps & IStyleableComponentProps<TViewProps, TTokens, TStyleSet>,\n  ) => {\n    const settings: ICustomizationProps<TViewProps, TTokens, TStyleSet> = _getCustomizations(\n      options.displayName,\n      React.useContext(CustomizerContext),\n      options.fields,\n    );\n\n    const useState = options.state;\n\n    if (useState) {\n      // Don't assume state will return all props, so spread useState result over component props.\n      componentProps = {\n        ...componentProps,\n        ...useState(componentProps),\n      };\n    }\n\n    const theme = componentProps.theme || settings.theme;\n\n    const tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);\n    const styles = _resolveStyles(\n      componentProps,\n      theme,\n      tokens,\n      options.styles,\n      settings.styles,\n      componentProps.styles,\n    );\n\n    const viewProps = {\n      ...componentProps,\n      styles,\n      tokens,\n      _defaultStyles: styles,\n      theme,\n    } as TViewProps & IDefaultSlotProps<any>;\n\n    return view(viewProps);\n  };\n\n  result.displayName = options.displayName || view.name;\n\n  // If a shorthand prop is defined, create a factory for the component.\n  // TODO: This shouldn't be a concern of createComponent.. factoryOptions should just be forwarded.\n  //       Need to weigh creating default factories on component creation vs. memoizing them on use in slots.tsx.\n  if (defaultProp) {\n    (result as ISlotCreator<TComponentProps, any>).create = createFactory(result, { defaultProp });\n  }\n\n  assign(result, options.statics);\n\n  // Later versions of TypeSript should allow us to merge objects in a type safe way and avoid this cast.\n  return result as React.FunctionComponent<TComponentProps> & TStatics;\n}\n\n/**\n * Resolve all styles functions with both props and tokens and flatten results along with all styles objects.\n */\nfunction _resolveStyles<TProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  props: TProps,\n  theme: ITheme,\n  tokens: TTokens,\n  ...allStyles: (IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined)[]\n): ReturnType<typeof concatStyleSets> {\n  return concatStyleSets(\n    ...allStyles.map((styles: IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined) =>\n      typeof styles === 'function' ? styles(props, theme, tokens) : styles,\n    ),\n  );\n}\n\n/**\n * Resolve all tokens functions with props flatten results along with all tokens objects.\n */\nfunction _resolveTokens<TViewProps, TTokens>(\n  props: TViewProps,\n  theme: ITheme,\n  ...allTokens: (IToken<TViewProps, TTokens> | false | null | undefined)[]\n): TTokens {\n  const tokens = {};\n\n  for (let currentTokens of allTokens) {\n    if (currentTokens) {\n      // TODO: why is this cast needed? TS seems to think there is a (TToken | Function) union from somewhere.\n      currentTokens =\n        typeof currentTokens === 'function'\n          ? (currentTokens as ITokenFunction<TViewProps, TTokens>)(props, theme)\n          : currentTokens;\n\n      if (Array.isArray(currentTokens)) {\n        currentTokens = _resolveTokens(props, theme, ...currentTokens);\n      }\n\n      assign(tokens, currentTokens);\n    }\n  }\n\n  return tokens as TTokens;\n}\n\n/**\n * Helper function for calling Customizations.getSettings falling back to default fields.\n *\n * @param displayName Displayable name for component.\n * @param context React context passed to component containing contextual settings.\n * @param fields Optional list of properties to grab from global store and context.\n */\nfunction _getCustomizations<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  displayName: string | undefined,\n  context: ICustomizerContext,\n  fields?: string[],\n): ICustomizationProps<TViewProps, TTokens, TStyleSet> {\n  // TODO: do we want field props? should fields be part of IComponent and used here?\n  // TODO: should we centrally define DefaultFields? (not exported from styling)\n  // TODO: tie this array to ICustomizationProps, such that each array element is keyof ICustomizationProps\n  const DefaultFields = ['theme', 'styles', 'tokens'];\n  return Customizations.getSettings(fields || DefaultFields, displayName, context.customizations);\n}\n","/**\n * Functions used by Stack components to simplify style-related computations\n */\n\nimport { ITheme } from '../../Styling';\nimport { IStackProps } from './Stack.types';\n\n// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nconst _getThemedSpacing = (space: string, theme: ITheme): string => {\n  if (theme.spacing.hasOwnProperty(space)) {\n    return theme.spacing[space as keyof typeof theme.spacing];\n  }\n  return space;\n};\n\n// Helper function that takes a gap as a string and converts it into a { value, unit } representation.\nconst _getValueUnitGap = (gap: string): { value: number; unit: string } => {\n  const numericalPart = parseFloat(gap);\n  const numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n  const numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n\n  const unitPart = gap.substring(numericalString.toString().length);\n\n  return {\n    value: numericalValue,\n    unit: unitPart || 'px',\n  };\n};\n\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\nexport const parseGap = (\n  gap: IStackProps['gap'],\n  theme: ITheme,\n): { rowGap: { value: number; unit: string }; columnGap: { value: number; unit: string } } => {\n  if (gap === undefined || gap === '') {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  if (typeof gap === 'number') {\n    return {\n      rowGap: {\n        value: gap,\n        unit: 'px',\n      },\n      columnGap: {\n        value: gap,\n        unit: 'px',\n      },\n    };\n  }\n\n  const splitGap = gap.split(' ');\n\n  // If the array has more than two values, then return 0px.\n  if (splitGap.length > 2) {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  // If the array has two values, then parse each one.\n  if (splitGap.length === 2) {\n    return {\n      rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),\n      columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme)),\n    };\n  }\n\n  // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n  const calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));\n\n  return {\n    rowGap: calculatedGap,\n    columnGap: calculatedGap,\n  };\n};\n\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\nexport const parsePadding = (padding: number | string | undefined, theme: ITheme): number | string | undefined => {\n  if (padding === undefined || typeof padding === 'number' || padding === '') {\n    return padding;\n  }\n\n  const paddingValues = padding.split(' ');\n  if (paddingValues.length < 2) {\n    return _getThemedSpacing(padding, theme);\n  }\n\n  return paddingValues.reduce((padding1: string, padding2: string) => {\n    return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);\n  });\n};\n","import { IStackComponent, IStackStyles, IStackStylesReturnType } from './Stack.types';\nimport { parseGap, parsePadding } from './StackUtils';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst nameMap: { [key: string]: string } = {\n  start: 'flex-start',\n  end: 'flex-end',\n};\n\nconst GlobalClassNames = {\n  root: 'ms-Stack',\n  inner: 'ms-Stack-inner',\n};\n\nexport const styles: IStackComponent['styles'] = (props, theme, tokens): IStackStylesReturnType => {\n  const {\n    verticalFill,\n    horizontal,\n    reversed,\n    grow,\n    wrap,\n    horizontalAlign,\n    verticalAlign,\n    disableShrink,\n    className,\n  } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // tslint:disable:deprecation\n  const childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : props.gap;\n  const maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;\n  const maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;\n  const padding = tokens && tokens.padding ? tokens.padding : props.padding;\n  // tslint:enable:deprecation\n\n  const { rowGap, columnGap } = parseGap(childrenGap, theme);\n\n  const horizontalMargin = `${-0.5 * columnGap.value}${columnGap.unit}`;\n  const verticalMargin = `${-0.5 * rowGap.value}${rowGap.unit}`;\n\n  // styles to be applied to all direct children regardless of wrap or direction\n  const childStyles = {\n    textOverflow: 'ellipsis',\n  };\n\n  // selectors to be applied regardless of wrap or direction\n  const commonSelectors = {\n    // flexShrink styles are applied by the StackItem\n    '> *:not(.ms-StackItem)': {\n      flexShrink: disableShrink ? 0 : 1,\n    },\n  };\n\n  if (wrap) {\n    return {\n      root: [\n        classNames.root,\n        {\n          flexWrap: 'wrap',\n          maxWidth,\n          maxHeight,\n          width: 'auto',\n          overflow: 'visible',\n          height: '100%',\n        },\n        horizontalAlign && {\n          [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n        },\n        verticalAlign && {\n          [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n        },\n        className,\n        {\n          // not allowed to be overridden by className\n          // since this is necessary in order to prevent collapsing margins\n          display: 'flex',\n        },\n        horizontal && {\n          height: verticalFill ? '100%' : 'auto',\n        },\n      ],\n\n      inner: [\n        classNames.inner,\n        {\n          display: 'flex',\n          flexWrap: 'wrap',\n          marginLeft: horizontalMargin,\n          marginRight: horizontalMargin,\n          marginTop: verticalMargin,\n          marginBottom: verticalMargin,\n          overflow: 'visible',\n          boxSizing: 'border-box',\n          padding: parsePadding(padding, theme),\n          // avoid unnecessary calc() calls if horizontal gap is 0\n          width: columnGap.value === 0 ? '100%' : `calc(100% + ${columnGap.value}${columnGap.unit})`,\n          maxWidth: '100vw',\n\n          selectors: {\n            '> *': {\n              margin: `${0.5 * rowGap.value}${rowGap.unit} ${0.5 * columnGap.value}${columnGap.unit}`,\n\n              ...childStyles,\n            },\n            ...commonSelectors,\n          },\n        },\n        horizontalAlign && {\n          [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n        },\n        verticalAlign && {\n          [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n        },\n        horizontal && {\n          flexDirection: reversed ? 'row-reverse' : 'row',\n\n          // avoid unnecessary calc() calls if vertical gap is 0\n          height: rowGap.value === 0 ? '100%' : `calc(100% + ${rowGap.value}${rowGap.unit})`,\n\n          selectors: {\n            '> *': {\n              maxWidth: columnGap.value === 0 ? '100%' : `calc(100% - ${columnGap.value}${columnGap.unit})`,\n            },\n          },\n        },\n        !horizontal && {\n          flexDirection: reversed ? 'column-reverse' : 'column',\n          height: `calc(100% + ${rowGap.value}${rowGap.unit})`,\n\n          selectors: {\n            '> *': {\n              maxHeight: rowGap.value === 0 ? '100%' : `calc(100% - ${rowGap.value}${rowGap.unit})`,\n            },\n          },\n        },\n      ],\n    } as IStackStyles;\n  }\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: horizontal ? (reversed ? 'row-reverse' : 'row') : reversed ? 'column-reverse' : 'column',\n        flexWrap: 'nowrap',\n        width: 'auto',\n        height: verticalFill ? '100%' : 'auto',\n        maxWidth,\n        maxHeight,\n        padding: parsePadding(padding, theme),\n        boxSizing: 'border-box',\n\n        selectors: {\n          '> *': childStyles,\n\n          // apply gap margin to every direct child except the first direct child if the direction is not reversed,\n          // and the last direct one if it is\n          [reversed ? '> *:not(:last-child)' : '> *:not(:first-child)']: [\n            horizontal && {\n              marginLeft: `${columnGap.value}${columnGap.unit}`,\n            },\n            !horizontal && {\n              marginTop: `${rowGap.value}${rowGap.unit}`,\n            },\n          ],\n\n          ...commonSelectors,\n        },\n      },\n      grow && {\n        flexGrow: grow === true ? 1 : grow,\n      },\n      horizontalAlign && {\n        [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n      },\n      verticalAlign && {\n        [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n      },\n      className,\n    ],\n    // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n  } as IStackStyles;\n};\n","import { getGlobalClassNames } from '../../../Styling';\nimport { IStackItemComponent, IStackItemStyles, IStackItemStylesReturnType } from './StackItem.types';\n\nconst GlobalClassNames = {\n  root: 'ms-StackItem',\n};\n\nconst alignMap: { [key: string]: string } = {\n  start: 'flex-start',\n  end: 'flex-end',\n};\n\nexport const StackItemStyles: IStackItemComponent['styles'] = (props, theme, tokens): IStackItemStylesReturnType => {\n  const { grow, shrink, disableShrink, align, verticalFill, order, className } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      theme.fonts.medium,\n      classNames.root,\n      {\n        margin: tokens.margin,\n        height: verticalFill ? '100%' : 'auto',\n        width: 'auto',\n      },\n      grow && { flexGrow: grow === true ? 1 : grow },\n      (disableShrink || (!grow && !shrink)) && {\n        flexShrink: 0,\n      },\n      shrink &&\n        !disableShrink && {\n          flexShrink: 1,\n        },\n      align && {\n        alignSelf: alignMap[align] || align,\n      },\n      order && {\n        order: order,\n      },\n      className,\n    ],\n    // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n  } as IStackItemStyles;\n};\n","/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../../Foundation';\nimport { IStackItemComponent, IStackItemProps, IStackItemSlots } from './StackItem.types';\nimport { StackItemStyles as styles } from './StackItem.styles';\n\nconst StackItemView: IStackItemComponent['view'] = props => {\n  const { children } = props;\n  if (React.Children.count(children) < 1) {\n    return null;\n  }\n\n  const Slots = getSlots<IStackItemProps, IStackItemSlots>(props, {\n    root: 'div',\n  });\n\n  return <Slots.root>{children}</Slots.root>;\n};\n\nexport const StackItem: React.FunctionComponent<IStackItemProps> = createComponent(StackItemView, {\n  displayName: 'StackItem',\n  styles,\n});\n\nexport default StackItem;\n","/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles } from './Stack.styles';\nimport { IStackComponent, IStackProps, IStackSlots } from './Stack.types';\nimport { StackItem } from './StackItem/StackItem';\nimport { IStackItemProps } from './StackItem/StackItem.types';\n\nconst StackView: IStackComponent['view'] = props => {\n  const { as: RootType = 'div', disableShrink, wrap, ...rest } = props;\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding',\n  });\n\n  const stackChildren: (React.ReactChild | null)[] | null | undefined = React.Children.map(\n    props.children,\n    (child: React.ReactElement<IStackItemProps>, index: number) => {\n      if (!child) {\n        return null;\n      }\n\n      if (_isStackItem(child)) {\n        const defaultItemProps: IStackItemProps = {\n          shrink: !disableShrink,\n        };\n\n        return React.cloneElement(child, {\n          ...defaultItemProps,\n          ...child.props,\n        });\n      }\n\n      return child;\n    },\n  );\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(rest, htmlElementProperties);\n\n  const Slots = getSlots<IStackProps, IStackSlots>(props, {\n    root: RootType,\n    inner: 'div',\n  });\n\n  if (wrap) {\n    return (\n      <Slots.root {...nativeProps}>\n        <Slots.inner>{stackChildren}</Slots.inner>\n      </Slots.root>\n    );\n  }\n\n  return <Slots.root {...nativeProps}>{stackChildren}</Slots.root>;\n};\n\nfunction _isStackItem(item: React.ReactNode): item is typeof StackItem {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return (\n    !!item &&\n    typeof item === 'object' &&\n    !!(item as React.ReactElement).type &&\n    // StackItem is generated by createComponent, so we need to check its displayName instead of name\n    ((item as React.ReactElement).type as React.ComponentType).displayName === StackItem.displayName\n  );\n}\n\nconst StackStatics = {\n  Item: StackItem,\n};\n\nexport const Stack: React.FunctionComponent<IStackProps> & {\n  Item: React.FunctionComponent<IStackItemProps>;\n} = createComponent(StackView, {\n  displayName: 'Stack',\n  styles,\n  statics: StackStatics,\n});\n\nexport default Stack;\n","import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { Label, ILabelStyleProps, ILabelStyles } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  DelayedRender,\n  IStyleFunctionOrObject,\n  classNamesFunction,\n  getId,\n  getNativeProps,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nexport class TextFieldBase extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // Reset the record of the last value seen by a change/input event\n      this._lastChangeValue = undefined;\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused } = this.state;\n    const errorMessage = this._errorMessage;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: !!errorMessage,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n    });\n\n    return (\n      <div className={this._classNames.root}>\n        <div className={this._classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={this._classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={this._classNames.prefix}>{onRenderPrefix(this.props, this._onRenderPrefix)}</div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={this._classNames.icon} {...iconProps} />}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={this._classNames.suffix}>{onRenderSuffix(this.props, this._onRenderSuffix)}</div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>\n                  <p className={this._classNames.errorMessage}>\n                    <span data-automation-id=\"error-message\">{errorMessage}</span>\n                  </p>\n                </DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): React.ReactElement<React.HTMLAttributes<HTMLInputElement>> {\n    const inputProps = getNativeProps<React.HTMLAttributes<HTMLInputElement>>(this.props, inputProperties, [\n      'defaultValue',\n    ]);\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <input\n        type={'text'}\n        id={this._id}\n        aria-labelledby={ariaLabelledBy}\n        {...inputProps}\n        ref={this._textElement as React.RefObject<HTMLInputElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-label={this.props.ariaLabel}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if the value is undefined (in case one of the IE bugs comes back)\n    if (value === undefined || value === this._lastChangeValue) {\n      return;\n    }\n    this._lastChangeValue = value;\n\n    // This is so developers can access the event properties in asynchronous callbacks\n    // https://reactjs.org/docs/events.html#event-pooling\n    event.persist();\n\n    let isSameValue: boolean;\n    this.setState(\n      (prevState: ITextFieldState, props: ITextFieldProps) => {\n        const prevValue = _getValue(props, prevState) || '';\n        isSameValue = value === prevValue;\n        // Avoid doing unnecessary work when the value has not changed.\n        if (isSameValue) {\n          return null;\n        }\n\n        // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n        return this._isControlled ? null : { uncontrolledValue: value };\n      },\n      () => {\n        // If the value actually changed, call onChange (for either controlled or uncontrolled)\n        const { onChange } = this.props;\n        if (!isSameValue && onChange) {\n          onChange(event, value);\n        }\n      },\n    );\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n","import {\n  AnimationClassNames,\n  getGlobalClassNames,\n  getInputFocusStyle,\n  HighContrastSelector,\n  IStyle,\n  normalize,\n  getPlaceholderStyles,\n  IconFontSizes,\n} from '../../Styling';\nimport { ILabelStyles, ILabelStyleProps } from '../../Label';\nimport { ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\nimport { IStyleFunctionOrObject } from '@uifabric/utilities';\n\nconst globalClassNames = {\n  root: 'ms-TextField',\n  description: 'ms-TextField-description',\n  errorMessage: 'ms-TextField-errorMessage',\n  field: 'ms-TextField-field',\n  fieldGroup: 'ms-TextField-fieldGroup',\n  prefix: 'ms-TextField-prefix',\n  suffix: 'ms-TextField-suffix',\n  wrapper: 'ms-TextField-wrapper',\n\n  multiline: 'ms-TextField--multiline',\n  borderless: 'ms-TextField--borderless',\n  underlined: 'ms-TextField--underlined',\n  unresizable: 'ms-TextField--unresizable',\n\n  required: 'is-required',\n  disabled: 'is-disabled',\n  active: 'is-active',\n};\n\nfunction getLabelStyles(props: ITextFieldStyleProps): IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles> {\n  const { underlined, disabled, focused, theme } = props;\n  const { palette, fonts } = theme;\n\n  return () => ({\n    root: [\n      underlined &&\n        disabled && {\n          color: palette.neutralTertiary,\n        },\n      underlined && {\n        fontSize: fonts.medium.fontSize,\n        marginRight: 8,\n        paddingLeft: 12,\n        paddingRight: 0,\n        lineHeight: '22px',\n        height: 32,\n      },\n      underlined &&\n        focused && {\n          selectors: {\n            [HighContrastSelector]: {\n              height: 31, // -1px to prevent jumpiness in HC with the increased border-width to 2px\n            },\n          },\n        },\n    ],\n  });\n}\n\nexport function getStyles(props: ITextFieldStyleProps): ITextFieldStyles {\n  const {\n    theme,\n    className,\n    disabled,\n    focused,\n    required,\n    multiline,\n    hasLabel,\n    borderless,\n    underlined,\n    hasIcon,\n    resizable,\n    hasErrorMessage,\n    inputClassName,\n    autoAdjustHeight,\n  } = props;\n\n  const { semanticColors, effects, fonts } = theme;\n\n  const classNames = getGlobalClassNames(globalClassNames, theme);\n\n  const fieldPrefixSuffix: IStyle = {\n    // Suffix/Prefix are not editable so the disabled slot perfectly fits.\n    background: semanticColors.disabledBackground,\n    color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 10px',\n    lineHeight: 1,\n    whiteSpace: 'nowrap',\n    flexShrink: 0,\n  };\n\n  // placeholder style constants\n  const placeholderStyles: IStyle = [\n    fonts.medium,\n    {\n      color: semanticColors.inputPlaceholderText,\n      opacity: 1,\n    },\n  ];\n\n  const disabledPlaceholderStyles: IStyle = {\n    color: semanticColors.disabledText,\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      required && classNames.required,\n      disabled && classNames.disabled,\n      focused && classNames.active,\n      multiline && classNames.multiline,\n      borderless && classNames.borderless,\n      underlined && classNames.underlined,\n      normalize,\n      {\n        position: 'relative',\n      },\n      className,\n    ],\n    wrapper: [\n      classNames.wrapper,\n\n      underlined && [\n        {\n          display: 'flex',\n          borderBottom: `1px solid ${!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText}`,\n          width: '100%',\n        },\n        disabled && {\n          borderBottomColor: semanticColors.disabledBackground,\n          selectors: {\n            [HighContrastSelector]: {\n              borderColor: 'GrayText',\n            },\n          },\n        },\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderBottomColor: 'Highlight',\n                },\n              },\n            },\n          },\n        },\n        focused && [\n          {\n            position: 'relative',\n          },\n          getInputFocusStyle(\n            !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n            0,\n            'borderBottom',\n          ),\n        ],\n      ],\n    ],\n    fieldGroup: [\n      classNames.fieldGroup,\n      normalize,\n      {\n        border: `1px solid ${semanticColors.inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n        background: semanticColors.inputBackground,\n        cursor: 'text',\n        height: 32,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n        position: 'relative',\n      },\n      multiline && {\n        minHeight: '60px',\n        height: 'auto',\n        display: 'flex',\n      },\n\n      !focused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: semanticColors.inputBorderHovered,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderColor: 'Highlight',\n                },\n              },\n            },\n          },\n        },\n\n      focused &&\n        !underlined &&\n        getInputFocusStyle(\n          !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n          effects.roundedCorner2,\n        ),\n      disabled && {\n        borderColor: semanticColors.disabledBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n          },\n        },\n\n        cursor: 'default',\n      },\n      borderless && {\n        border: 'none',\n      },\n      borderless &&\n        focused && {\n          border: 'none',\n          selectors: {\n            ':after': {\n              border: 'none',\n            },\n          },\n        },\n      underlined && {\n        flex: '1 1 0px',\n        border: 'none',\n        textAlign: 'left',\n      },\n      underlined &&\n        disabled && {\n          backgroundColor: 'transparent',\n        },\n\n      hasErrorMessage &&\n        !underlined && {\n          borderColor: semanticColors.errorText,\n          selectors: {\n            '&:hover': {\n              borderColor: semanticColors.errorText,\n            },\n          },\n        },\n      !hasLabel &&\n        required && {\n          selectors: {\n            ':before': {\n              content: `'*'`,\n              color: semanticColors.errorText,\n              position: 'absolute',\n              top: -5,\n              right: -10,\n            },\n            [HighContrastSelector]: {\n              selectors: {\n                ':before': {\n                  right: -14, // moving the * 4 pixel to right to alleviate border clipping in HC mode.\n                },\n              },\n            },\n          },\n        },\n    ],\n    field: [\n      fonts.medium,\n      classNames.field,\n      normalize,\n      {\n        borderRadius: 0,\n        border: 'none',\n        background: 'none',\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        padding: '0 8px',\n        width: '100%',\n        minWidth: 0,\n        textOverflow: 'ellipsis',\n        outline: 0,\n        selectors: {\n          '&:active, &:focus, &:hover': { outline: 0 },\n          '::-ms-clear': {\n            display: 'none',\n          },\n        },\n      },\n      getPlaceholderStyles(placeholderStyles),\n      multiline &&\n        !resizable && [\n          classNames.unresizable,\n          {\n            resize: 'none',\n          },\n        ],\n      multiline && {\n        minHeight: 'inherit',\n        lineHeight: 17,\n        flexGrow: 1,\n        paddingTop: 6,\n        paddingBottom: 6,\n        overflow: 'auto',\n        width: '100%',\n      },\n      multiline &&\n        autoAdjustHeight && {\n          overflow: 'hidden',\n        },\n      hasIcon && {\n        paddingRight: 24,\n      },\n      multiline &&\n        hasIcon && {\n          paddingRight: 40,\n        },\n      disabled && [\n        {\n          backgroundColor: semanticColors.disabledBackground,\n          color: semanticColors.disabledText,\n          borderColor: semanticColors.disabledBackground,\n        },\n        getPlaceholderStyles(disabledPlaceholderStyles),\n      ],\n      underlined && {\n        textAlign: 'left',\n      },\n      focused &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingLeft: 11,\n              paddingRight: 11,\n            },\n          },\n        },\n      focused &&\n        multiline &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingTop: 4, // take into consideration the 2px increased border-width (not when borderless).\n            },\n          },\n        },\n      inputClassName,\n    ],\n    icon: [\n      multiline && {\n        paddingRight: 24,\n        alignItems: 'flex-end',\n      },\n      {\n        pointerEvents: 'none',\n        position: 'absolute',\n        bottom: 6,\n        right: 8,\n        top: 'auto',\n        fontSize: IconFontSizes.medium,\n        lineHeight: 18,\n      },\n      disabled && {\n        color: semanticColors.disabledText,\n      },\n    ],\n    description: [\n      classNames.description,\n      {\n        color: semanticColors.bodySubtext,\n        fontSize: fonts.xSmall.fontSize,\n      },\n    ],\n    errorMessage: [\n      classNames.errorMessage,\n      AnimationClassNames.slideDownIn20,\n      fonts.small,\n      {\n        color: semanticColors.errorText,\n        margin: 0,\n        paddingTop: 5,\n        display: 'flex',\n        alignItems: 'center',\n      },\n    ],\n    prefix: [classNames.prefix, fieldPrefixSuffix],\n    suffix: [classNames.suffix, fieldPrefixSuffix],\n    subComponentStyles: {\n      label: getLabelStyles(props),\n    },\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TextFieldBase } from './TextField.base';\nimport { ITextFieldProps, ITextFieldStyles, ITextFieldStyleProps } from './TextField.types';\nimport { getStyles } from './TextField.styles';\nexport { ITextField } from './TextField.types';\n\nexport const TextField: React.FunctionComponent<ITextFieldProps> = styled<\n  ITextFieldProps,\n  ITextFieldStyleProps,\n  ITextFieldStyles\n>(TextFieldBase, getStyles, undefined, {\n  scope: 'TextField',\n});\n","import * as React from 'react';\nimport { divProperties, getNativeProps } from '../../Utilities';\nimport { classNamesFunction } from '../../Utilities';\nimport { ILabelProps, ILabelStyleProps, ILabelStyles } from './Label.types';\n\nconst getClassNames = classNamesFunction<ILabelStyleProps, ILabelStyles>({\n  // Label is used a lot by other components.\n  // It's likely to see expected cases which pass different className to the Label.\n  // Therefore setting a larger cache size.\n  cacheSize: 100,\n});\n\nexport class LabelBase extends React.Component<ILabelProps, {}> {\n  public render(): JSX.Element {\n    const { as: RootType = 'label', children, className, disabled, styles, required, theme } = this.props;\n    const classNames = getClassNames(styles, {\n      className,\n      disabled,\n      required,\n      theme: theme!,\n    });\n    return (\n      <RootType {...getNativeProps(this.props, divProperties)} className={classNames.root}>\n        {children}\n      </RootType>\n    );\n  }\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { LabelBase } from './Label.base';\nimport { getStyles } from './Label.styles';\nimport { ILabelProps, ILabelStyleProps, ILabelStyles } from './Label.types';\n\nexport const Label: React.FunctionComponent<ILabelProps> = styled<ILabelProps, ILabelStyleProps, ILabelStyles>(\n  LabelBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Label',\n  },\n);\n","import { HighContrastSelector, FontWeights } from '../../Styling';\nimport { ILabelStyleProps, ILabelStyles } from './Label.types';\n\nexport const getStyles = (props: ILabelStyleProps): ILabelStyles => {\n  const { theme, className, disabled, required } = props;\n  const { semanticColors } = theme;\n\n  // Tokens\n  const labelFontWeight = FontWeights.semibold;\n  const labelColor = semanticColors.bodyText;\n  const labelDisabledColor = semanticColors.disabledBodyText;\n  const labelRequiredStarColor = semanticColors.errorText;\n\n  return {\n    root: [\n      'ms-Label',\n      theme.fonts.medium,\n      {\n        fontWeight: labelFontWeight,\n        color: labelColor,\n        boxSizing: 'border-box',\n        boxShadow: 'none',\n        margin: 0,\n        display: 'block',\n        padding: '5px 0',\n        wordWrap: 'break-word',\n        overflowWrap: 'break-word',\n      },\n      disabled && {\n        color: labelDisabledColor,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n          },\n        },\n      },\n      required && {\n        selectors: {\n          '::after': {\n            content: `' *'`,\n            color: labelRequiredStarColor,\n            paddingRight: 12,\n          },\n        },\n      },\n      className,\n    ],\n  };\n};\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}