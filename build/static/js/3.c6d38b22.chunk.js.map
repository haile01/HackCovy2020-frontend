{"version":3,"sources":["../../src/selection/Selection.types.ts","../../src/dom/getRect.ts","../../src/renderFunction/composeRenderFunction.tsx","../../src/selection/Selection.ts","../../src/components/GroupedList/GroupedList.types.ts","../../src/components/GroupedList/GroupSpacer.tsx","../../src/components/Check/Check.base.tsx","../../src/components/Check/Check.styles.ts","../../src/components/Check/Check.tsx","../../src/components/DetailsList/DetailsRow.styles.ts","../../src/components/DetailsList/DetailsHeader.styles.ts","../../src/components/DetailsList/DetailsRowCheck.styles.ts","../../src/components/DetailsList/DetailsRowCheck.tsx","../../src/components/DetailsList/DetailsHeader.types.ts","../../src/utilities/dragdrop/DragDropHelper.tsx","../../src/components/DetailsList/DetailsColumn.base.tsx","../../src/components/DetailsList/DetailsColumn.styles.ts","../../src/components/DetailsList/DetailsColumn.ts","../../src/components/DetailsList/DetailsHeader.base.tsx","../../src/components/DetailsList/DetailsHeader.ts","../../src/components/DetailsList/DetailsRowFields.tsx","../../src/components/DetailsList/DetailsRow.base.tsx","../../src/components/DetailsList/DetailsRow.ts","../../src/utilities/selection/SelectionZone.tsx","../../src/components/GroupedList/GroupedList.styles.ts","../../src/components/GroupedList/GroupHeader.styles.ts","../../src/components/GroupedList/GroupHeader.base.tsx","../../src/components/GroupedList/GroupHeader.ts","../../src/components/GroupedList/GroupShowAll.styles.ts","../../src/components/Link/Link.base.tsx","../../src/components/Link/Link.styles.ts","../../src/components/Link/Link.tsx","../../src/components/GroupedList/GroupShowAll.base.tsx","../../src/components/GroupedList/GroupShowAll.ts","../../src/components/GroupedList/GroupFooter.styles.ts","../../src/components/GroupedList/GroupFooter.base.tsx","../../src/components/GroupedList/GroupFooter.ts","../../src/components/List/List.types.ts","../../src/components/List/List.tsx","../../src/components/GroupedList/GroupedListSection.tsx","../../src/components/GroupedList/GroupedList.base.tsx","../../src/components/GroupedList/GroupedList.ts","../../src/utilities/decorators/withViewport.tsx","../../src/utilities/groupedList/GroupedListUtility.tsx","../../src/components/DetailsList/DetailsList.base.tsx","../../src/components/DetailsList/DetailsList.styles.ts","../../src/components/DetailsList/DetailsList.ts","../../src/components/Spinner/Spinner.types.ts","../../src/components/Spinner/Spinner.base.tsx","../../src/components/Spinner/Spinner.styles.tsx","../../src/components/Spinner/Spinner.tsx","../../src/components/Button/IconButton/IconButton.styles.ts","../../src/components/Button/IconButton/IconButton.tsx","../../src/components/DetailsList/DetailsList.types.ts"],"names":["SelectionMode","SelectionDirection","SELECTION_CHANGE","getRect","element","rect","window","left","top","width","innerWidth","height","innerHeight","right","bottom","getBoundingClientRect","memoizer","outer","inner","innerMemoizer","defaultRender","innerProps","outerProps","composeRenderFunction","onSelectionChanged","getKey","canSelectItem","selectionMode","this","mode","_getKey","defaultGetKey","_changeEventSuppressionCount","_exemptedCount","_anchoredIndex","_unselectableCount","_onSelectionChanged","_canSelectItem","_isModal","setItems","count","getSelectedCount","item","index","key","setChangeEvents","isEnabled","suppressChange","_hasChanged","_change","isModal","setModal","setAllSelected","items","shouldClear","newKeyToIndexMap","newUnselectableIndices","hasSelectionChanged","i","length","_setAllSelected","newExemptedIndicies","newExemptedCount","indexProperty","_exemptedIndices","hasOwnProperty","Number","exemptKey","_items","undefined","newIndex","_isAllSelected","_keyToIndexMap","_unselectableIndices","_selectedItems","_updateCount","getItems","getSelection","isIndexSelected","push","getSelectedIndices","_selectedIndices","isRangeSelected","fromIndex","endIndex","isAllSelected","selectableCount","single","Math","min","isKeySelected","multiple","setKeySelected","isSelected","shouldAnchor","setIndexSelected","none","max","isExempt","selectToKey","clearSelection","selectToIndex","anchorIndex","startIndex","toggleAllSelected","toggleKeySelected","toggleIndexSelected","toggleRangeSelected","preserveModalState","raise","CollapseAllVisibility","props","indentWidth","className","style","display","getClassNames","classNamesFunction","CheckGlobalClassNames","root","circle","check","checkHost","Check","styled","checked","theme","styles","useFastIcons","classNames","IconComponent","FontIcon","Icon","iconName","palette","semanticColors","fonts","isRTL","sharedCircleCheck","fontSize","position","textAlign","verticalAlign","medium","lineHeight","userSelect","selectors","content","borderRadius","opacity","background","bodyBackground","themePrimary","color","neutralSecondary","white","MsHighContrastAdjust","fontWeight","border","scope","DetailsRowGlobalClassNames","compact","cell","cellAnimation","cellCheck","cellMeasurer","listCellFirstChild","isContentUnselectable","isCheckVisible","isRowHeader","fields","DEFAULT_CELL_STYLE_PROPS","cellLeftPadding","cellRightPadding","cellExtraRightPadding","DEFAULT_ROW_HEIGHTS","rowHeight","compactRowHeight","values","rowVerticalPadding","compactRowVerticalPadding","GlobalClassNames","tooltipHost","cellIsCheck","collapseButton","isCollapsed","isSelectAllHidden","isResizingColumn","cellSizer","isResizing","dropHintCircleStyle","dropHintCaretStyle","dropHintLineStyle","cellTitle","cellName","filterChevron","gripperBarVertical","checkTooltip","cellStyleProps","bodyText","boxSizing","padding","margin","whiteSpace","textOverflow","isDisabled","isHeader","FastCheck","_defaultCheckboxRender","checkboxProps","_fastDefaultCheckboxRender","SelectAllVisibility","DetailsRowCheck","isVisible","canSelect","anySelected","selected","checkClassName","onRenderDetailsCheckbox","defaultCheckboxRender","onRenderCheckbox","detailsCheckboxProps","buttonProps","role","css","small","alignItems","justifyContent","cursor","backgroundColor","params","_selection","selection","_dragEnterCounts","_activeTargets","_lastId","_initialized","dispose","_events","subscribe","events","dragDropOptions","EventGroup","doc","getDocument","on","body","_onMouseUp","bind","_onDocumentMouseUp","onDragStart","onDragLeave","onDragEnter","onDragEnd","onDrop","onDragOver","onMouseDown","isDraggable","isDroppable","activeTarget","handlers","eventMap","context","updateDropState","dragDropTarget","options","_isDraggable","_isDroppable","handler","callback","eventName","event","isHandled","preventDefault","data","_onMouseDown","_onDragEnd","_isDragging","dataTransfer","setData","id","target","off","unsubscribe","_dragData","Object","keys","dropTarget","documentElement","_onMouseMove","buttons","_isChild","_onMouseLeave","button","clientX","clientY","eventTarget","dragTarget","parent","child","parentElement","childElement","canDrag","dragContext","canDrop","_root","_onRenderColumnHeaderTooltip","tooltipHostProps","hostClassName","children","_onColumnClick","ev","onColumnClick","column","columnActionsMode","disabled","_onDragStart","itemIndex","selectedItems","_classNames","_updateHeaderDragInfo","current","classList","add","borderWhileDragging","_async","setTimeout","noBorderWhileDragging","remove","setDraggedItemIndex","updateDragInfo","_onColumnContextMenu","onColumnContextMenu","_onRootMouseDown","stopPropagation","initializeComponentRef","Async","render","columnIndex","parentId","onRenderColumnHeaderTooltip","headerClassName","iconClassName","isActionable","isEmpty","name","isIconVisible","isSorted","isGrouped","isFiltered","isPadded","isIconOnly","transitionDurationDrag","transitionDurationDrop","ref","isSortedDescending","draggable","calculatedWidth","gripperBarVerticalStyle","cellTooltip","setAriaDescribedBy","ariaLabel","_hasAccessibleLabel","onContextMenu","onClick","hasDropdown","isMenuOpen","accessibleLabel","nearIcon","sortIcon","_renderAccessibleLabel","componentDidMount","dragDropHelper","_addDragDropHandling","isDropped","borderAfterDropping","noBorderAfterDropping","TRANSITION_DURATION_DROP","componentWillUnmount","_dragDropSubscription","componentDidUpdate","_getColumnDragDropOptions","selectionIndex","filterAriaLabel","sortAscendingAriaLabel","sortDescendingAriaLabel","groupAriaLabel","DetailsColumn","colors","iconForegroundColor","bodySubtext","headerForegroundColor","headerBackgroundColor","dropdownChevronForegroundColor","neutralTertiary","resizerColor","neutralTertiaryAlt","nearIconStyle","paddingLeft","outline","borderAfterDragOrDrop","outlineColor","listHeaderBackgroundHovered","listHeaderBackgroundPressed","paddingRight","flexDirection","overflow","alignContent","maxHeight","flexWrap","flex","semibold","transition","NO_COLUMNS","_rootComponent","_draggedColumnIndex","_dropHintDetails","_updateDroppingState","newValue","type","_resetDropHints","_onDragOver","_computeDropHintToBeShown","_onDrop","columnReorderProps","_getColumnReorderProps","targetIndex","_currentDropHintIndex","isValidDrop","_isValidCurrentDropHintIndex","_onDropIndexInfo","sourceIndex","onColumnDrop","dragDropDetails","draggedIndex","handleColumnReorder","_updateDragInfo","_isCheckboxColumnHidden","_getDropHintPositions","onColumnDragStart","onColumnDragEnd","columnDragEndLocation","_isEventOnHeader","dropLocation","prevRef","columns","prevX","prevMid","frozenColumnCountFromStart","frozenColumnCountFromEnd","_rootElement","dropHintElement","querySelectorAll","offsetLeft","newMid","originX","startX","endX","dropHintElementRef","isRtl","eventXRelativePosition","currentDropHintIndex","_liesBetween","currentIndex","lastValidColumn","indexToUpdate","_isBefore","_isAfter","middleIndex","ceil","_updateDropHintElement","_renderColumnSizer","columnResizeDetails","isResizable","_stopPropagation","onBlur","_onSizerBlur","cellSizerStart","cellSizerEnd","cellIsResizing","onDoubleClick","_onSizerDoubleClick","_onSelectAllClicked","columnIndexAttr","getAttribute","setState","columnMinWidth","_onRootMouseMove","isSizing","_onRootRef","focusZone","_onRootKeyDown","onColumnResized","increment","which","KeyCodes","enter","shiftKey","_onSizerMouseMove","onColumnIsSizingChanged","movement","_onSizerMouseUp","_onToggleCollapseAll","onToggleCollapseAll","newCollapsed","state","isAllCollapsed","_id","getId","_dragDropHelper","minimumPixelsForDrag","_subscriptionObject","_getHeaderDragDropOptions","prevProps","previousColumns","ariaLabelForToggleAllGroupsButton","ariaLabelForSelectAllCheckbox","selectAllVisibility","ariaLabelForSelectionColumn","rowWidth","groupNestingDepth","checkboxVisibility","showCheckbox","isCheckboxHidden","hidden","isCheckboxAlwaysVisible","always","FocusZone","componentRef","onMouseMove","minWidth","direction","horizontal","collapseAllVisibility","visible","cellIsGroupExpander","map","_renderDropHint","_renderColumnDivider","Layer","sizingOverlay","onMouseUp","focus","Boolean","columnReorderOptions","displayProperty","childNodes","clientRect","header","onRenderDivider","dropHintIndex","dropHintStyle","onColumnAutoResized","defaultProps","rtl","a","b","DetailsHeader","cellSizerFadeInStyles","cellStyles","paddingBottom","paddingTop","borderBottom","bodyDivider","cellWrapperPadded","neutralLighter","neutralLight","cellIsActionable","cellIsEmpty","zIndex","boxShadow","marginLeft","transformOrigin","transform","visibility","columnStartIndex","rowClassNames","onRenderItemColumn","getCellValueKey","cellsByColumn","enableUpdateAnimations","cellValueKeysRef","cellValueKeys","onRender","getValueKey","cellContentsRender","value","fieldName","toString","getCellText","previousValueKey","cellValueKey","showAnimation","isMultiline","cellPadded","cellUnpadded","_cellMeasurer","_focusZone","selectionState","_getSelectionState","isDropping","dragDropEvents","_droppingClassNames","columnMeasureInfo","_getRowDragDropOptions","onDidMount","_onDidMountCalled","previousProps","newWidth","onMeasureDone","onWillUnmount","UNSAFE_componentWillReceiveProps","newProps","shouldComponentUpdate","nextProps","nextState","useReducedRowRenderer","newSelectionState","onRenderCheck","getRowAriaLabel","getRowAriaDescribedBy","checkButtonAriaLabel","checkboxCellClassName","rowFieldsAs","isSelectionModal","droppingClassName","ariaDescribedBy","ariaSelected","_rowClassNames","rowFields","RowFields","allowFocusRoot","checkCell","checkCover","measureCell","maxWidth","forceIntoFirstElement","_onRenderCheck","eventsToRegister","DetailsRow","neutralPrimary","neutralDark","neutralQuaternaryAlt","focusBorder","defaultHeaderText","defaultMetaText","defaultBackground","defaultHoverHeaderText","defaultHoverMetaText","defaultHoverBackground","selectedHeaderText","selectedMetaText","selectedBackground","selectedHoverHeaderText","selectedHoverMetaText","selectedHoverBackground","focusHeaderText","focusMetaText","focusBackground","focusHoverBackground","selectedStyles","inset","borderColor","borderTop","cannotSelectStyles","rootCompactStyles","minHeight","cellCompactStyles","defaultCellStyles","fadeIn400","slideLeftIn40","marginTop","flexShrink","wordBreak","ignoreNextFocus","_handleNextFocus","_onSelectionChange","_onMouseDownCapture","document","activeElement","elementContains","_hasAttribute","getParent","_onFocus","isToggleModifierPressed","_isCtrlPressed","_isMetaPressed","_getSelectionMode","_shouldHandleFocus","isToggle","itemRoot","_findItemRoot","_getItemIndex","enterModalOnTouch","_isTouch","_setIsTouch","isSelectedOnFocus","_onItemSurfaceClick","_updateModifiers","_isSelectionDisabled","_shouldAutoSelect","_isShiftPressed","_onInvokeMouseDown","disableAutoSelectOnInputElements","tagName","_onTouchStartCapture","_onClick","isSelectionDisabled","_onToggleAllClick","_onToggleClick","_onInvokeClick","_onContextMenu","onItemContextMenu","nativeEvent","_onDoubleClick","onItemInvoked","_isInputElement","_onKeyDownCapture","_onKeyDown","isSelectAllKey","isClearSelectionKey","escape","space","getDerivedStateFromProps","prevState","win","getWindow","_findScrollParentAndTryClearOnEmptyClick","onKeyDown","onKeyDownCapture","onMouseDownCapture","onFocusCapture","_isTabPressed","_clearAndSelectIndex","scrollParent","_tryClearOnEmptyClick","Node","contains","selectionPreservedOnEmptyClick","_isNonHandledClick","ctrlKey","metaKey","keyCode","tab","indexValue","attributeName","handleFocus","_shouldHandleFocusTimeoutId","clearTimeout","isTouch","_isTouchTimeoutId","group","link","listCell","beziers","dropIcon","expand","title","iconTag","_onToggleCollapse","onToggleCollapse","isGroupLoading","newLoadingVisible","isLoadingVisible","_onToggleSelectGroupClick","onToggleSelectGroup","_onHeaderClick","onGroupHeaderClick","_onRenderTitle","headerCount","hasMoreData","groupLevel","viewport","loadingText","onRenderTitle","isCollapsedGroupSelectVisible","expandButtonProps","selectAllButtonProps","groupedListId","ariaPosInSet","ariaSetSize","isSelectionCheckVisible","currentlySelected","groupHeaderContainer","expandIsCollapsed","Spinner","label","GroupHeader","finalRowHeight","checkExpandResetStyles","listBackground","listItemBackgroundHovered","actionLinkHovered","durationValue4","durationValue1","transitionDelay","durationValue3","listItemBackgroundChecked","listItemBackgroundCheckedHovered","neutralQuaternary","mediumPlus","regular","large","durationValue2","_link","href","keytipProps","isButton","RootType","_getRootType","KeytipData","keytipAttributes","_adjustPropsForRootType","as","getStyles","restProps","Link","linkColor","linkInteractedColor","linkHovered","linkDisabledColor","disabledText","focusBorderColor","textDecoration","pointerEvents","GroupShowAll","showAllLinkText","onToggleSummarize","memoizedOnClick","GroupFooter","footerText","ScrollToMode","EMPTY_RECT","_measurePageRect","_measureSurfaceRect","_measureScrollRect","_surface","_onRenderRoot","rootRef","surfaceElement","divProps","_onRenderSurface","surfaceRef","pageElements","_onRenderPage","pageProps","onRenderCell","page","cellRole","cells","itemKey","ignoreScrollingState","isScrolling","pages","_estimatedPageHeight","_totalEstimates","_requiredWindowsAhead","_requiredWindowsBehind","_measureVersion","_onAsyncScroll","debounce","leading","maxWait","_onAsyncIdle","_onAsyncResize","_onScrollingDone","_cachedPageHeights","_focusedIndex","_pageCache","scrollToIndex","measureItem","scrollToMode","_getRenderCount","allowedRect","_allowedRect","scrollTop","itemsPerPage","pageSpecification","_getPageSpecification","pageHeight","itemCount","_scrollElement","scrollRect","scrollWindow","itemPositionWithinPage","itemIndexInPage","scrollBottom","getStartItemIndexInView","isSpacer","_scrollTop","floor","totalRowHeight","_updatePages","_onScroll","renderCount","version","_resetRequiredWindows","_requiredRect","_invalidatePageCache","newState","oldPages","newPages","oldPage","newPage","forceUpdate","_updateRenderRects","getTotalListHeight","_surfaceRect","onRenderSurface","onRenderRoot","_renderPage","finalOnRenderSurface","_shouldVirtualize","onShouldVirtualize","cachedPage","usePageCache","pageElement","pageStyle","_getPageStyle","onRenderPage","getPageStyle","indexString","innerRect","outerRect","_materializedRect","renderedWindowsAhead","renderedWindowsBehind","windowsAhead","requiredWindowsAhead","windowsBehind","requiredWindowsBehind","newListState","_buildPages","oldListPages","_notifyPageChanges","finalProps","finalState","getPageHeight","_updatePageMeasurements","_hasCompletedFirstRender","onPagesUpdated","onPageAdded","onPageRemoved","renderedIndexes","_onPageAdded","_onPageRemoved","heightChanged","_measurePage","hasChangedHeight","refs","cachedHeight","measureVersion","newClientRect","clientWidth","clientHeight","round","materializedRect","pageTop","currentSpacer","focusedIndex","shouldVirtualize","isFirstRender","pageData","targetRect","newRect","pageBottom","isPageRendered","isPageInAllowedRange","isPageInRequiredRange","itemsInPage","_createPage","slice","_visibleRect","SPACER_KEY_PREFIX","visibleRect","getPageSpecification","_getItemCountForPage","_getPageHeight","visibileRect","getItemCountForPage","pageKey","surfaceRect","scrollHeight","_scrollHeight","abs","visibleTop","_expandRect","containsFocus","pagesBefore","pagesAfter","_list","_droppingClassName","_onRenderGroupHeader","_onRenderGroupShowAll","_onRenderGroupFooter","_renderSubGroup","subGroup","subGroupIndex","getGroupItemLimit","groupProps","headerProps","showAllProps","footerProps","listProps","onRenderGroupHeader","onRenderGroupShowAll","onRenderGroupFooter","nestingDepth","level","showEmptyGroups","GroupedListSection","_getGroupKey","groupIndex","groups","_getGroupDragDropOptions","isGroup","newIsDropping","groupedListClassNames","Infinity","isShowAllVisible","isShowingAll","hasNestedGroups","dividerProps","ariaControlsProps","groupHeaderProps","groupShowAllProps","groupFooterProps","canDragGroups","_getDroppingClassName","_returnOne","_onRenderGroup","forceListUpdate","subGroupCount","String","_onRenderGroupCell","groupIsDropping","_renderGroup","_onToggleSelectGroup","_onToggleSummarize","_getGroupNestingDepth","onRenderHeader","onRenderShowAll","onRenderFooter","_getDefaultGroupItemLimit","_getGroupItemLimit","_getGroupHeight","COMPACT_ROW_HEIGHT","ROW_HEIGHT","getGroupHeight","pageGroup","_updateIsSomeGroupExpanded","_isSomeGroupExpanded","_computeIsSomeGroupExpanded","lastWidth","shouldForceUpdates","_forceListUpdates","isAllGroupsCollapsed","_setGroupsCollapsedState","toggleCollapseAll","allCollapsed","groupsInLevel","groupCount","some","onGroupExpandStateChanged","newIsSomeGroupExpanded","isHeaderVisible","GroupedList","withViewport","ComposedComponent","_registerResizeObserver","_viewportResizeObserver","ResizeObserver","observe","_unregisterResizeObserver","disconnect","_updateViewport","withForceUpdate","viewportElement","scrollElement","_resizeAttempts","_composedComponentInstance","skipViewportMeasures","_isResizeObserverAvailable","oldSkipViewportMeasures","newSkipViewportMeasures","newViewport","_updateComposedComponentRef","BaseDecorator","_header","_groupedList","_selectionZone","_sumColumnWidths","memoize","totalWidth","forEach","_onRenderRow","_onRenderDetailsHeader","detailsHeaderProps","_onRenderDetailsFooter","detailsFooterProps","_onRenderListCell","_onRenderCell","rowElementEventMap","onRenderMissingItem","onRenderRow","adjustedColumns","rowProps","_onRowDidMount","_onRowWillUnmount","_onGroupExpandStateChanged","isSomeGroupExpanded","_onColumnIsSizingChanged","_onHeaderKeyDown","down","_onContentKeyDown","up","altKey","row","_getItemKey","_activeRows","_setFocusToRowIfPending","onRowDidMount","onRowWillUnmount","collapsed","_onColumnDragEnd","finalDropLocation","outside","surface","_onColumnResized","resizingColumn","resizingColumnIndex","newCalculatedWidth","onColumnResize","_rememberCalculatedWidth","_adjustColumns","_onColumnAutoResized","totalCount","_onActiveRowChanged","el","onActiveItemChanged","focusedItemIndex","_onBlur","isRightArrow","_columnOverrides","_getAdjustedColumns","Selection","disableSelectionZone","_initialFocusedIndex","initialFocusedIndex","focusIndex","_setFocusToRow","onDidUpdate","setKey","newViewportWidth","oldViewportWidth","shouldResetSelection","layoutMode","ariaLabelForListHeader","constrainMode","isPlaceholderData","onColumnHeaderClick","onColumnHeaderContextMenu","selectionZoneProps","ariaLabelForGrid","shouldApplyApplicationRole","additionalListProps","onRenderDetailsHeader","onRenderDetailsFooter","_getDetailsFooterProps","rowCount","total","remainingGroups","currentGroup","pop","isFixed","fixedColumns","isHorizontalConstrained","horizontalConstrained","list","_getGroupProps","headerWrapper","contentWrapper","vertical","isInnerZoneKeystroke","onActiveElementChanged","enterModalSelectionOnTouch","_notifyColumnsResized","currentWidth","viewportWidth","lastSelectionMode","newColumns","canResizeColumns","sortedColumnKey","groupedColumnKey","firstItem","propName","isCollapsable","isCollapsible","clickable","buildColumns","newItems","_getFixedColumns","_getJustifiedColumnsAfterResize","_getJustifiedColumns","_getColumnOverride","newColumn","fixedWidth","reduce","getPaddedWidth","remainingColumns","remainingWidth","firstIndex","rowCheckWidth","groupExpandWidth","availableWidth","lastIndex","overflowWidth","originalWidth","splice","isLast","overrides","spaceLeft","detailsGroupProps","onRenderDetailsGroupFooter","onRenderDetailsGroupHeader","justified","onHover","DetailsListBase","isFirst","DetailsList","listText","overflowX","overflowY","WebkitOverflowScrolling","SpinnerSize","SpinnerType","size","ariaLive","labelPosition","statusMessage","nativeProps","styleSize","DelayedRender","screenReaderText","spinAnimation","themeLight","borderTopColor","animationName","animationDuration","animationIterationCount","animationTimingFunction","xSmall","customStyles","baseButtonStyles","splitButtonStyles","iconButtonStyles","rootHovered","themeDarkAlt","rootHasMenu","rootPressed","themeDark","rootExpanded","rootChecked","rootCheckedHovered","rootDisabled","BaseButton","variantClassName","onRenderText","onRenderDescription","IconButton","customizable","ColumnActionsMode","ConstrainMode","ColumnDragEndLocation","DetailsListLayoutMode","CheckboxVisibility"],"mappings":"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","file":"static/js/3.c6d38b22.chunk.js","sourcesContent":["/**\n * {@docCategory Selection}\n */\nexport interface IObjectWithKey {\n  key?: string | number;\n}\n\nexport const SELECTION_CHANGE = 'change';\n\n/**\n * {@docCategory Selection}\n */\nexport enum SelectionMode {\n  none = 0,\n  single = 1,\n  multiple = 2,\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelection<TItem = IObjectWithKey> {\n  count: number;\n  mode: SelectionMode;\n\n  canSelectItem: (item: TItem, index?: number) => boolean;\n\n  // Obesrvable methods.\n  setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;\n\n  // Initialization methods.\n\n  setItems(items: TItem[], shouldClear: boolean): void;\n  getItems(): TItem[];\n\n  // Read selection methods.\n\n  getSelection(): TItem[];\n  getSelectedIndices(): number[];\n  getSelectedCount(): number;\n  isRangeSelected(fromIndex: number, count: number): boolean;\n\n  isAllSelected(): boolean;\n  isKeySelected(key: string): boolean;\n  isIndexSelected(index: number): boolean;\n\n  isModal?(): boolean;\n\n  // Write selection methods.\n\n  setAllSelected(isAllSelected: boolean): void;\n  setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void;\n  setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void;\n\n  setModal?(isModal: boolean): void; // TODO make non-optional on next breaking change\n\n  // Write range selection methods.\n\n  selectToKey(key: string, clearSelection?: boolean): void;\n  selectToIndex(index: number, clearSelection?: boolean): void;\n\n  // Toggle helpers.\n\n  toggleAllSelected(): void;\n  toggleKeySelected(key: string): void;\n  toggleIndexSelected(index: number): void;\n  toggleRangeSelected(fromIndex: number, count: number): void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport enum SelectionDirection {\n  horizontal = 0,\n  vertical = 1,\n}\n","import { IRectangle } from '../IRectangle';\n/**\n * Helper to get bounding client rect. Passing in window will get the window size.\n *\n * @public\n */\nexport function getRect(element: HTMLElement | Window | null): IRectangle | undefined {\n  let rect: IRectangle | undefined;\n  if (element) {\n    if (element === window) {\n      rect = {\n        left: 0,\n        top: 0,\n        width: window.innerWidth,\n        height: window.innerHeight,\n        right: window.innerWidth,\n        bottom: window.innerHeight,\n      };\n    } else if ((element as HTMLElement).getBoundingClientRect) {\n      rect = (element as HTMLElement).getBoundingClientRect();\n    }\n  }\n  return rect;\n}\n","import { IRenderFunction } from '../IRenderFunction';\nimport { createMemoizer } from '../memoize';\n\ninterface IRenderFunctionComposer {\n  <TProps>(outer: IRenderFunction<TProps>): (inner: IRenderFunction<TProps>) => IRenderFunction<TProps>;\n}\n\nfunction createComposedRenderFunction<TProps>(\n  outer: IRenderFunction<TProps>,\n): (inner: IRenderFunction<TProps>) => IRenderFunction<TProps> {\n  const outerMemoizer = createMemoizer((inner: IRenderFunction<TProps>) => {\n    const innerMemoizer = createMemoizer((defaultRender: IRenderFunction<TProps>) => {\n      return (innerProps?: TProps) => {\n        return inner(innerProps, defaultRender);\n      };\n    });\n\n    return (outerProps?: TProps, defaultRender?: IRenderFunction<TProps>) => {\n      return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);\n    };\n  });\n\n  return outerMemoizer;\n}\n\nconst memoizer = createMemoizer<IRenderFunctionComposer>(createComposedRenderFunction);\n\n/**\n * Composes two 'render functions' to produce a final render function that renders\n * the outer function, passing the inner function as 'default render'. The inner function\n * is then passed the original 'default render' prop.\n * @public\n */\nexport function composeRenderFunction<TProps>(\n  outer: IRenderFunction<TProps>,\n  inner: IRenderFunction<TProps>,\n): IRenderFunction<TProps> {\n  return memoizer(outer)(inner);\n}\n","import { IObjectWithKey, ISelection, SELECTION_CHANGE, SelectionMode } from './Selection.types';\nimport { EventGroup } from '../EventGroup';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionOptions<TItem = IObjectWithKey> {\n  onSelectionChanged?: () => void;\n  /** Custom logic to generate item keys. Required if `TItem` does not have a `key` property. */\n  getKey?: (item: TItem, index?: number) => string | number;\n  canSelectItem?: (item: TItem, index?: number) => boolean;\n  selectionMode?: SelectionMode;\n}\n\n/**\n * Selection options with required `getKey` property.\n * {@docCategory Selection}\n */\nexport type ISelectionOptionsWithRequiredGetKey<TItem> = ISelectionOptions<TItem> &\n  Required<Pick<ISelectionOptions<TItem>, 'getKey'>>;\n\n/**\n * {@docCategory Selection}\n */\nexport class Selection<TItem = IObjectWithKey> implements ISelection<TItem> {\n  /** Number of items selected. Do not modify. */\n  public count: number;\n  public readonly mode: SelectionMode;\n\n  private _getKey: (item: TItem, index?: number) => string | number;\n  private _canSelectItem: (item: TItem, index?: number) => boolean;\n\n  private _changeEventSuppressionCount: number;\n  private _items: TItem[];\n  private _selectedItems: TItem[] | null;\n  private _selectedIndices: number[] | undefined;\n  private _isAllSelected: boolean;\n  private _exemptedIndices: { [index: string]: boolean };\n  private _exemptedCount: number;\n  private _keyToIndexMap: { [key: string]: number };\n  private _anchoredIndex: number;\n  private _onSelectionChanged: (() => void) | undefined;\n  private _hasChanged: boolean;\n  private _unselectableIndices: { [index: string]: boolean };\n  private _unselectableCount: number;\n  private _isModal: boolean;\n\n  /**\n   * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options\n   * object with a `getKey` implementation. Providing options is optional otherwise.\n   * (At most one `options` object is accepted.)\n   */\n  constructor(\n    ...options: TItem extends IObjectWithKey // If the item type has a built-in key...\n      ? [] | [ISelectionOptions<TItem>] // Then the arguments can be empty or have the options without `getKey`\n      : [ISelectionOptionsWithRequiredGetKey<TItem>] // Otherwise, arguments require options with `getKey`.\n  ) {\n    const { onSelectionChanged, getKey, canSelectItem = () => true, selectionMode = SelectionMode.multiple } =\n      options[0] || ({} as ISelectionOptions<TItem>);\n\n    this.mode = selectionMode;\n\n    this._getKey = getKey || defaultGetKey;\n\n    this._changeEventSuppressionCount = 0;\n    this._exemptedCount = 0;\n    this._anchoredIndex = 0;\n    this._unselectableCount = 0;\n\n    this._onSelectionChanged = onSelectionChanged;\n    this._canSelectItem = canSelectItem;\n\n    this._isModal = false;\n\n    this.setItems([], true);\n\n    this.count = this.getSelectedCount();\n  }\n\n  public canSelectItem(item: TItem, index?: number): boolean {\n    if (typeof index === 'number' && index < 0) {\n      return false;\n    }\n\n    return this._canSelectItem(item, index);\n  }\n\n  public getKey(item: TItem, index?: number): string {\n    const key = this._getKey(item, index);\n\n    return typeof key === 'number' || key ? `${key}` : '';\n  }\n\n  public setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void {\n    this._changeEventSuppressionCount += isEnabled ? -1 : 1;\n\n    if (this._changeEventSuppressionCount === 0 && this._hasChanged) {\n      this._hasChanged = false;\n\n      if (!suppressChange) {\n        this._change();\n      }\n    }\n  }\n\n  public isModal(): boolean {\n    return this._isModal;\n  }\n\n  public setModal(isModal: boolean): void {\n    if (this._isModal !== isModal) {\n      this.setChangeEvents(false);\n\n      this._isModal = isModal;\n\n      if (!isModal) {\n        this.setAllSelected(false);\n      }\n\n      this._change();\n\n      this.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * Selection needs the items, call this method to set them. If the set\n   * of items is the same, this will re-evaluate selection and index maps.\n   * Otherwise, shouldClear should be set to true, so that selection is\n   * cleared.\n   */\n  public setItems(items: TItem[], shouldClear: boolean = true): void {\n    const newKeyToIndexMap: { [key: string]: number } = {};\n    const newUnselectableIndices: { [key: string]: boolean } = {};\n    let hasSelectionChanged = false;\n\n    this.setChangeEvents(false);\n\n    // Reset the unselectable count.\n    this._unselectableCount = 0;\n\n    // Build lookup table for quick selection evaluation.\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n\n      if (item) {\n        const key = this.getKey(item, i);\n\n        if (key) {\n          newKeyToIndexMap[key] = i;\n        }\n      }\n\n      newUnselectableIndices[i] = item && !this.canSelectItem(item);\n      if (newUnselectableIndices[i]) {\n        this._unselectableCount++;\n      }\n    }\n\n    if (shouldClear || items.length === 0) {\n      this._setAllSelected(false, true);\n    }\n\n    // Check the exemption list for discrepencies.\n    const newExemptedIndicies: { [key: string]: boolean } = {};\n    let newExemptedCount = 0;\n\n    for (const indexProperty in this._exemptedIndices) {\n      if (this._exemptedIndices.hasOwnProperty(indexProperty)) {\n        const index = Number(indexProperty);\n        const item = this._items[index];\n        const exemptKey = item ? this.getKey(item, Number(index)) : undefined;\n        const newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;\n\n        if (newIndex === undefined) {\n          // The item has likely been replaced or removed.\n          hasSelectionChanged = true;\n        } else {\n          // We know the new index of the item. update the existing exemption table.\n          newExemptedIndicies[newIndex] = true;\n          newExemptedCount++;\n          hasSelectionChanged = hasSelectionChanged || newIndex !== index;\n        }\n      }\n    }\n\n    if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {\n      // If everything was selected but the number of items has changed, selection has changed.\n      hasSelectionChanged = true;\n    }\n\n    this._exemptedIndices = newExemptedIndicies;\n    this._exemptedCount = newExemptedCount;\n    this._keyToIndexMap = newKeyToIndexMap;\n    this._unselectableIndices = newUnselectableIndices;\n    this._items = items;\n    this._selectedItems = null;\n\n    if (hasSelectionChanged) {\n      this._updateCount();\n      this._change();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public getItems(): TItem[] {\n    return this._items;\n  }\n\n  public getSelection(): TItem[] {\n    if (!this._selectedItems) {\n      this._selectedItems = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedItems.push(items[i]);\n          }\n        }\n      }\n    }\n\n    return this._selectedItems;\n  }\n\n  public getSelectedCount(): number {\n    return this._isAllSelected\n      ? this._items.length - this._exemptedCount - this._unselectableCount\n      : this._exemptedCount;\n  }\n\n  public getSelectedIndices(): number[] {\n    if (!this._selectedIndices) {\n      this._selectedIndices = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedIndices.push(i);\n          }\n        }\n      }\n    }\n\n    return this._selectedIndices;\n  }\n\n  public isRangeSelected(fromIndex: number, count: number): boolean {\n    if (count === 0) {\n      return false;\n    }\n\n    const endIndex = fromIndex + count;\n\n    for (let i = fromIndex; i < endIndex; i++) {\n      if (!this.isIndexSelected(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isAllSelected(): boolean {\n    let selectableCount = this._items.length - this._unselectableCount;\n\n    // In single mode, we can only have a max of 1 item.\n    if (this.mode === SelectionMode.single) {\n      selectableCount = Math.min(selectableCount, 1);\n    }\n\n    return (\n      (this.count > 0 && this._isAllSelected && this._exemptedCount === 0) ||\n      (!this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0)\n    );\n  }\n\n  public isKeySelected(key: string): boolean {\n    const index = this._keyToIndexMap[key];\n\n    return this.isIndexSelected(index);\n  }\n\n  public isIndexSelected(index: number): boolean {\n    return !!(\n      (this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index]) ||\n      (!this._isAllSelected && this._exemptedIndices[index])\n    );\n  }\n\n  public setAllSelected(isAllSelected: boolean): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void {\n    const index = this._keyToIndexMap[key];\n\n    if (index >= 0) {\n      this.setIndexSelected(index, isSelected, shouldAnchor);\n    }\n  }\n\n  public setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    // Clamp the index.\n    index = Math.min(Math.max(0, index), this._items.length - 1);\n\n    // No-op on out of bounds selections.\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n\n    const isExempt = this._exemptedIndices[index];\n    const canSelect = !this._unselectableIndices[index];\n\n    if (canSelect) {\n      if (isSelected && this.mode === SelectionMode.single) {\n        // If this is single-select, the previous selection should be removed.\n        this._setAllSelected(false, true);\n      }\n\n      // Determine if we need to remove the exemption.\n      if (isExempt && ((isSelected && this._isAllSelected) || (!isSelected && !this._isAllSelected))) {\n        delete this._exemptedIndices[index];\n        this._exemptedCount--;\n      }\n\n      // Determine if we need to add the exemption.\n      if (!isExempt && ((isSelected && !this._isAllSelected) || (!isSelected && this._isAllSelected))) {\n        this._exemptedIndices[index] = true;\n        this._exemptedCount++;\n      }\n\n      if (shouldAnchor) {\n        this._anchoredIndex = index;\n      }\n    }\n\n    this._updateCount();\n\n    this.setChangeEvents(true);\n  }\n\n  public selectToKey(key: string, clearSelection?: boolean): void {\n    this.selectToIndex(this._keyToIndexMap[key], clearSelection);\n  }\n\n  public selectToIndex(index: number, clearSelection?: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    if (this.mode === SelectionMode.single) {\n      this.setIndexSelected(index, true, true);\n      return;\n    }\n\n    const anchorIndex = this._anchoredIndex || 0;\n    let startIndex = Math.min(index, anchorIndex);\n    const endIndex = Math.max(index, anchorIndex);\n\n    this.setChangeEvents(false);\n\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public toggleAllSelected(): void {\n    this.setAllSelected(!this.isAllSelected());\n  }\n\n  public toggleKeySelected(key: string): void {\n    this.setKeySelected(key, !this.isKeySelected(key), true);\n  }\n\n  public toggleIndexSelected(index: number): void {\n    this.setIndexSelected(index, !this.isIndexSelected(index), true);\n  }\n\n  public toggleRangeSelected(fromIndex: number, count: number): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    const isRangeSelected = this.isRangeSelected(fromIndex, count);\n    const endIndex = fromIndex + count;\n\n    if (this.mode === SelectionMode.single && count > 1) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n    for (let i = fromIndex; i < endIndex; i++) {\n      this.setIndexSelected(i, !isRangeSelected, false);\n    }\n    this.setChangeEvents(true);\n  }\n\n  private _updateCount(preserveModalState: boolean = false): void {\n    const count = this.getSelectedCount();\n\n    if (count !== this.count) {\n      this.count = count;\n      this._change();\n    }\n\n    if (!this.count && !preserveModalState) {\n      this.setModal(false);\n    }\n  }\n\n  private _setAllSelected(isAllSelected: boolean, preserveModalState: boolean = false): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount(preserveModalState);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  private _change(): void {\n    if (this._changeEventSuppressionCount === 0) {\n      this._selectedItems = null;\n      this._selectedIndices = undefined;\n\n      EventGroup.raise(this, SELECTION_CHANGE);\n\n      if (this._onSelectionChanged) {\n        this._onSelectionChanged();\n      }\n    } else {\n      this._hasChanged = true;\n    }\n  }\n}\n\nfunction defaultGetKey<TItem = IObjectWithKey>(item: TItem, index?: number): string | number {\n  return item && (item as IObjectWithKey).key ? (item as IObjectWithKey).key! : `${index}`;\n}\n","import * as React from 'react';\nimport { GroupedListBase } from './GroupedList.base';\nimport { IList, IListProps } from '../../List';\nimport { IRefObject, IRenderFunction } from '../../Utilities';\nimport { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../utilities/dragdrop/index';\nimport { ISelection, SelectionMode } from '../../utilities/selection/index';\nimport { IViewport } from '../../utilities/decorators/withViewport';\nimport { ITheme, IStyle } from '../../Styling';\nimport { IStyleFunctionOrObject } from '../../Utilities';\nimport { IGroupHeaderProps } from './GroupHeader.types';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\nimport { IGroupFooterProps } from './GroupFooter.types';\n\n/**\n * {@docCategory GroupedList}\n */\nexport enum CollapseAllVisibility {\n  hidden = 0,\n  visible = 1,\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list props don't change, but the list still\n   * needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change, you can\n   * call this to force a re-evaluation. Be aware that this can be an expensive operation and should be done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Toggles the collapsed state of all the groups in the list.\n   */\n  toggleCollapseAll: (allCollapsed: boolean) => void;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListProps extends React.ClassAttributes<GroupedListBase> {\n  /**\n   * Theme that is passed in from Higher Order Component\n   */\n  theme?: ITheme;\n\n  /**\n   * Style function to be passed in to override the themed or default styles\n   */\n  styles?: IStyleFunctionOrObject<IGroupedListStyleProps, IGroupedListStyles>;\n\n  /**\n   * Optional callback to access the IGroupedList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IGroupedList>;\n\n  /** Optional class name to add to the root element. */\n  className?: string;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to groups and rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Optional grouping instructions. */\n  groups?: IGroup[];\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional properties to pass through to the list components being rendered. */\n  listProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Optional callback when the group expand state changes between all collapsed and at least one group is expanded. */\n  onGroupExpandStateChanged?: (isSomeGroupExpanded: boolean) => void;\n\n  /**\n   * boolean to control if pages containing unchanged items should be cached, this is a perf optimization\n   * The same property in List.Props\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /**\n   * Optional function to override default group height calculation used by list virtualization.\n   */\n  getGroupHeight?: (group: IGroup, groupIndex: number) => number;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroup {\n  /**\n   * Unique identifier for the group.\n   */\n  key: string;\n\n  /**\n   * Display name for the group, rendered on the header.\n   */\n  name: string;\n\n  /**\n   * Start index for the group within the given items.\n   */\n  startIndex: number;\n\n  /**\n   * How many items should be rendered within the group.\n   */\n  count: number;\n\n  /**\n   * Nested groups, if any.\n   */\n  children?: IGroup[];\n\n  /**\n   * Number indicating the level of nested groups.\n   */\n  level?: number;\n\n  /**\n   * Deprecated at 1.0.0, selection state will be controled by the selection store only.\n   * @deprecated At 1.0.0, selection state wil be controlled by the selection store only.\n   */\n  isSelected?: boolean;\n\n  /**\n   * If all the items in the group are collapsed.\n   */\n  isCollapsed?: boolean;\n\n  /**\n   * If the items within the group are summarized or showing all.\n   */\n  isShowingAll?: boolean;\n\n  /**\n   * If drag/drop is enabled for the group header.\n   */\n  isDropEnabled?: boolean;\n\n  /**\n   * Arbitrary data required to be preserved by the caller.\n   */\n  data?: any;\n\n  /**\n   * Optional accessibility label (aria-label) attribute that will be stamped on to the element.\n   * If none is specified, the arai-label attribute will contain the group name\n   */\n  ariaLabel?: string;\n\n  /**\n   * Optional flag to indicate the group has more data to load than the current group count indicated.\n   * This can be used to indicate that a plus should be rendered next to the group count in the header.\n   */\n  hasMoreData?: boolean;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupRenderProps {\n  /** Boolean indicating if all groups are in collapsed state. */\n  isAllGroupsCollapsed?: boolean;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Callback for when all groups are expanded or collapsed. */\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** Information to pass in to the group Show all footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /**\n   * Override which allows the caller to provide a custom header.\n   */\n  onRenderHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /**\n   * Override which allows the caller to provide a custom Show All link.\n   */\n  onRenderShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /**\n   * Override which allows the caller to provide a custom footer.\n   */\n  onRenderFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Flag to indicate whether to ignore the collapsing icon on header.\n   * @defaultvalue CollapseAllVisibility.visible\n   */\n  collapseAllVisibility?: CollapseAllVisibility;\n\n  /**\n   * Boolean indicating if empty groups are shown\n   * @defaultvalue false\n   */\n  showEmptyGroups?: boolean;\n\n  /**\n   * Override which allows the caller to provide a custom aria role\n   */\n  role?: string;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupDividerProps {\n  componentRef?: IRefObject<{}>;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Callback to determine if a group has missing items and needs to load them from the server. */\n  isGroupLoading?: (group: IGroup) => boolean;\n\n  /** Text shown on group headers to indicate the group is being loaded. */\n  loadingText?: string;\n\n  /** The group to be rendered by the header. */\n  group?: IGroup;\n\n  /** The index of the group. */\n  groupIndex?: number;\n\n  /** The indent level of the group. */\n  groupLevel?: number;\n\n  /**\n   * Width corresponding to a single level.\n   * This is multiplied by the groupLevel to get the full spacer width for the group.\n   */\n  indentWidth?: number;\n\n  /** If all items in the group are selected. */\n  selected?: boolean;\n\n  /**\n   * Deprecated at v.65.1 and will be removed by v 1.0. Use `selected` instead.\n   * @deprecated Use `selected` instead.\n   */\n  isSelected?: boolean;\n\n  /** A reference to the viewport in which the header is rendered. */\n  viewport?: IViewport;\n\n  /** The selection mode of the list the group lives within. */\n  selectionMode?: SelectionMode;\n\n  /** Text to display for the group footer. */\n  footerText?: string;\n\n  /** Text to display for the group \"Show All\" link. */\n  showAllLinkText?: string;\n\n  /** Callback for when the group \"Show All\" link is clicked */\n  onToggleSummarize?: (group: IGroup) => void;\n\n  /** Callback for when the group header is clicked. */\n  onGroupHeaderClick?: (group: IGroup) => void;\n\n  /** Callback for when the group is expanded or collapsed. */\n  onToggleCollapse?: (group: IGroup) => void;\n\n  /** Callback for when the group is selected. */\n  onToggleSelectGroup?: (group: IGroup) => void;\n\n  /** Determines if the group selection check box is shown for collapsed groups. */\n  isCollapsedGroupSelectVisible?: boolean;\n\n  /** Override which allows the caller to provider a custom renderer for the GroupHeader title. */\n  onRenderTitle?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Props for expand/collapse button\n   * @deprecated Use {@link IGroupHeaderProps.expandButtonProps} instead.\n   */\n  expandButtonProps?: React.HTMLAttributes<HTMLButtonElement>;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n\n  /** Custom className */\n  className?: string;\n\n  /** Theme provided by the Higher Order Component */\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport type IGroupedListStyleProps = Required<Pick<IGroupedListProps, 'theme'>> &\n  Pick<IGroupedListProps, 'className'> & {\n    /** whether or not the group is collapsed */\n    isCollapsed?: boolean;\n\n    /** Whether the group is in compact mode or not */\n    compact?: boolean;\n  };\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListStyles {\n  root: IStyle;\n  group: IStyle;\n  groupIsDropping: IStyle;\n}\n","import * as React from 'react';\nimport { IGroupSpacerProps } from './GroupSpacer.types';\n\nexport const SPACER_WIDTH = 36;\n\nexport const GroupSpacer: React.FunctionComponent<IGroupSpacerProps> = props => {\n  const { count, indentWidth = SPACER_WIDTH } = props;\n  const width = count * indentWidth;\n\n  return count > 0 ? <span className={'ms-GroupSpacer'} style={{ display: 'inline-block', width }} /> : null;\n};\n","import * as React from 'react';\nimport { ICheckProps } from './Check.types';\nimport { Icon, FontIcon } from '../../Icon';\nimport { classNamesFunction } from '../../Utilities';\nimport { ICheckStyleProps, ICheckStyles } from './Check.types';\n\nconst getClassNames = classNamesFunction<ICheckStyleProps, ICheckStyles>();\n\nexport const CheckBase: React.FunctionComponent<ICheckProps> = props => {\n  const { checked = false, className, theme, styles, useFastIcons = true } = props;\n\n  const classNames = getClassNames(styles!, { theme: theme!, className, checked });\n  const IconComponent = useFastIcons ? FontIcon : Icon;\n\n  return (\n    <div className={classNames.root}>\n      <IconComponent iconName=\"CircleRing\" className={classNames.circle} />\n      <IconComponent iconName=\"StatusCircleCheckmark\" className={classNames.check} />\n    </div>\n  );\n};\n","import { ICheckStyleProps, ICheckStyles } from './Check.types';\nimport { HighContrastSelector, IStyle, getGlobalClassNames, IconFontSizes } from '../../Styling';\nimport { getRTL } from '../../Utilities';\n\nexport const CheckGlobalClassNames = {\n  root: 'ms-Check',\n  circle: 'ms-Check-circle',\n  check: 'ms-Check-check',\n  /** Must be manually applied to the parent element of the check. */\n  checkHost: 'ms-Check-checkHost',\n};\n\nexport const getStyles = (props: ICheckStyleProps): ICheckStyles => {\n  // tslint:disable-next-line:deprecation\n  const { height = props.checkBoxHeight || '18px', checked, className, theme } = props;\n\n  const { palette, semanticColors, fonts } = theme;\n  const isRTL = getRTL(theme);\n\n  const classNames = getGlobalClassNames(CheckGlobalClassNames, theme);\n\n  const sharedCircleCheck: IStyle = {\n    fontSize: height,\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    width: height,\n    height: height,\n    textAlign: 'center',\n    verticalAlign: 'middle',\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      {\n        // lineHeight currently needs to be a string to output without 'px'\n        lineHeight: '1',\n        width: height,\n        height: height,\n        verticalAlign: 'top',\n        position: 'relative',\n        userSelect: 'none',\n\n        selectors: {\n          ':before': {\n            content: '\"\"',\n            position: 'absolute',\n            top: '1px',\n            right: '1px',\n            bottom: '1px',\n            left: '1px',\n            borderRadius: '50%',\n            opacity: 1,\n            background: semanticColors.bodyBackground,\n          },\n\n          [`.${classNames.checkHost}:hover &, .${classNames.checkHost}:focus &, &:hover, &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n\n      checked && [\n        'is-checked',\n        {\n          selectors: {\n            ':before': {\n              background: palette.themePrimary,\n              opacity: 1,\n              selectors: {\n                [HighContrastSelector]: {\n                  background: 'Window',\n                },\n              },\n            },\n          },\n        },\n      ],\n      className,\n    ],\n\n    circle: [\n      classNames.circle,\n      sharedCircleCheck,\n\n      {\n        color: palette.neutralSecondary,\n\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'WindowText',\n          },\n        },\n      },\n\n      checked && {\n        color: palette.white,\n      },\n    ],\n\n    check: [\n      classNames.check,\n      sharedCircleCheck,\n\n      {\n        opacity: 0,\n        color: palette.neutralSecondary,\n        fontSize: IconFontSizes.medium,\n        left: isRTL ? '-0.5px' : '.5px', // for centering the check icon inside the circle.\n\n        selectors: {\n          ':hover': {\n            opacity: 1,\n          },\n\n          [HighContrastSelector]: {\n            MsHighContrastAdjust: 'none',\n          },\n        },\n      },\n\n      checked && {\n        opacity: 1,\n        color: palette.white,\n        fontWeight: 900,\n\n        selectors: {\n          [HighContrastSelector]: {\n            border: 'none',\n            color: 'WindowText',\n          },\n        },\n      },\n    ],\n\n    checkHost: classNames.checkHost,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ICheckProps, ICheckStyleProps, ICheckStyles } from './Check.types';\nimport { CheckBase } from './Check.base';\nimport { getStyles } from './Check.styles';\n\nexport const Check: React.FunctionComponent<ICheckProps> = styled<ICheckProps, ICheckStyleProps, ICheckStyles>(\n  CheckBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Check',\n  },\n  true,\n);\n","import { IDetailsRowStyleProps, IDetailsRowStyles, ICellStyleProps } from './DetailsRow.types';\nimport {\n  AnimationClassNames,\n  AnimationStyles,\n  HighContrastSelector,\n  IStyle,\n  getFocusStyle,\n  getGlobalClassNames,\n  FontWeights,\n} from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\n\nexport const DetailsRowGlobalClassNames = {\n  root: 'ms-DetailsRow',\n  // TODO: in Fabric 7.0 lowercase the 'Compact' for consistency across other components.\n  compact: 'ms-DetailsList--Compact',\n  cell: 'ms-DetailsRow-cell',\n  cellAnimation: 'ms-DetailsRow-cellAnimation',\n  cellCheck: 'ms-DetailsRow-cellCheck',\n  check: 'ms-DetailsRow-check',\n  cellMeasurer: 'ms-DetailsRow-cellMeasurer',\n  listCellFirstChild: 'ms-List-cell:first-child',\n  isContentUnselectable: 'is-contentUnselectable',\n  isSelected: 'is-selected',\n  isCheckVisible: 'is-check-visible',\n  isRowHeader: 'is-row-header',\n  fields: 'ms-DetailsRow-fields',\n};\nconst IsFocusableSelector = \"[data-is-focusable='true']\";\n\nexport const DEFAULT_CELL_STYLE_PROPS: ICellStyleProps = {\n  cellLeftPadding: 12,\n  cellRightPadding: 8,\n  cellExtraRightPadding: 24,\n};\n\n// Source of default row heights to share.\nexport const DEFAULT_ROW_HEIGHTS = {\n  rowHeight: 42,\n  compactRowHeight: 32,\n};\n\n// Constant values\nconst values = {\n  ...DEFAULT_ROW_HEIGHTS,\n  rowVerticalPadding: 11,\n  compactRowVerticalPadding: 6,\n};\n\nexport const getStyles = (props: IDetailsRowStyleProps): IDetailsRowStyles => {\n  const {\n    theme,\n    isSelected,\n    canSelect,\n    droppingClassName,\n    anySelected,\n    isCheckVisible,\n    checkboxCellClassName,\n    compact,\n    className,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    enableUpdateAnimations,\n  } = props;\n\n  const { palette, fonts } = theme;\n  const {\n    neutralPrimary,\n    white,\n    neutralSecondary,\n    neutralLighter,\n    neutralLight,\n    neutralDark,\n    neutralQuaternaryAlt,\n  } = palette;\n  const { focusBorder } = theme.semanticColors;\n\n  const classNames = getGlobalClassNames(DetailsRowGlobalClassNames, theme);\n\n  const colors = {\n    // Default\n    defaultHeaderText: neutralPrimary,\n    defaultMetaText: neutralSecondary,\n    defaultBackground: white,\n\n    // Default Hover\n    defaultHoverHeaderText: neutralDark,\n    defaultHoverMetaText: neutralPrimary,\n    defaultHoverBackground: neutralLighter,\n\n    // Selected\n    selectedHeaderText: neutralDark,\n    selectedMetaText: neutralPrimary,\n    selectedBackground: neutralLight,\n\n    // Selected Hover\n    selectedHoverHeaderText: neutralDark,\n    selectedHoverMetaText: neutralPrimary,\n    selectedHoverBackground: neutralQuaternaryAlt,\n\n    // Focus\n    focusHeaderText: neutralDark,\n    focusMetaText: neutralPrimary,\n    focusBackground: neutralLight,\n    focusHoverBackground: neutralQuaternaryAlt,\n  };\n\n  // Selected row styles\n  const selectedStyles: IStyle = [\n    getFocusStyle(theme, { inset: -1, borderColor: focusBorder, outlineColor: white }),\n    classNames.isSelected,\n    {\n      color: colors.selectedMetaText,\n      background: colors.selectedBackground,\n      borderBottom: `1px solid ${white}`,\n      selectors: {\n        '&:before': {\n          position: 'absolute',\n          display: 'block',\n          top: -1,\n          height: 1,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          content: '',\n          borderTop: `1px solid ${white}`,\n        },\n\n        // Selected State hover\n        '&:hover': {\n          background: colors.selectedHoverBackground,\n          color: colors.selectedHoverMetaText,\n          selectors: {\n            // Selected State hover meta cell\n            [`.${classNames.cell} ${HighContrastSelector}`]: {\n              color: 'HighlightText',\n              selectors: {\n                '> a': {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Selected State hover Header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.selectedHoverHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Ensure high-contrast mode overrides default hover background\n            [HighContrastSelector]: {\n              background: 'Highlight',\n            },\n          },\n        },\n\n        // Focus state\n        '&:focus': {\n          background: colors.focusBackground,\n          selectors: {\n            // Selected State hover meta cell\n            [`.${classNames.cell}`]: {\n              color: colors.focusMetaText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                  selectors: {\n                    '> a': {\n                      color: 'HighlightText',\n                    },\n                  },\n                },\n              },\n            },\n\n            // Row header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.focusHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Ensure high-contrast mode overrides default focus background\n            [HighContrastSelector]: {\n              background: 'Highlight',\n            },\n          },\n        },\n\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          MsHighContrastAdjust: 'none',\n          selectors: {\n            a: {\n              color: 'HighlightText',\n            },\n          },\n        },\n\n        // Focus and hover state\n        '&:focus:hover': {\n          background: colors.focusHoverBackground,\n        },\n      },\n    },\n  ];\n\n  const cannotSelectStyles: IStyle = [\n    classNames.isContentUnselectable,\n    {\n      userSelect: 'none',\n      cursor: 'default',\n    },\n  ];\n\n  const rootCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    border: 0,\n  };\n\n  const cellCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    paddingTop: values.compactRowVerticalPadding,\n    paddingBottom: values.compactRowVerticalPadding,\n    paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n  };\n\n  const defaultCellStyles: IStyle = [\n    getFocusStyle(theme, { inset: -1 }),\n    classNames.cell,\n    {\n      display: 'inline-block',\n      position: 'relative',\n      boxSizing: 'border-box',\n      minHeight: values.rowHeight,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      paddingTop: values.rowVerticalPadding,\n      paddingBottom: values.rowVerticalPadding,\n      paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n      selectors: {\n        '& > button': {\n          maxWidth: '100%',\n        },\n\n        [IsFocusableSelector]: getFocusStyle(theme, { inset: -1, borderColor: neutralSecondary, outlineColor: white }),\n      },\n    },\n\n    isSelected && {\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          MsHighContrastAdjust: 'none',\n          selectors: {\n            a: {\n              color: 'HighlightText',\n            },\n          },\n        },\n      },\n    },\n\n    compact && cellCompactStyles,\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      AnimationClassNames.fadeIn400,\n      droppingClassName,\n      theme.fonts.small,\n      isCheckVisible && classNames.isCheckVisible,\n      getFocusStyle(theme, { borderColor: focusBorder, outlineColor: white }),\n      {\n        borderBottom: `1px solid ${neutralLighter}`,\n        background: colors.defaultBackground,\n        color: colors.defaultMetaText,\n        // This ensures that the row always tries to consume is minimum width and does not compress.\n        display: 'inline-flex',\n        minWidth: '100%',\n        minHeight: values.rowHeight,\n        whiteSpace: 'nowrap',\n        padding: 0,\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        textAlign: 'left',\n        selectors: {\n          [`.${classNames.listCellFirstChild} &:before`]: {\n            display: 'none',\n          },\n\n          '&:hover': {\n            background: colors.defaultHoverBackground,\n            color: colors.defaultHoverMetaText,\n            selectors: {\n              [`.${classNames.isRowHeader}`]: {\n                color: colors.defaultHoverHeaderText,\n              },\n            },\n          },\n\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n        },\n      },\n      isSelected && selectedStyles,\n      !canSelect && cannotSelectStyles,\n      compact && rootCompactStyles,\n      className,\n    ],\n\n    cellUnpadded: {\n      paddingRight: `${cellStyleProps.cellRightPadding}px`,\n    },\n\n    cellPadded: {\n      paddingRight: `${cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding}px`,\n      selectors: {\n        [`&.${classNames.cellCheck}`]: {\n          paddingRight: 0,\n        },\n      },\n    },\n\n    cell: defaultCellStyles,\n    cellAnimation: enableUpdateAnimations && AnimationStyles.slideLeftIn40,\n    cellMeasurer: [\n      classNames.cellMeasurer,\n      {\n        overflow: 'visible',\n        whiteSpace: 'nowrap',\n      },\n    ],\n    checkCell: [\n      defaultCellStyles,\n      classNames.cellCheck,\n      checkboxCellClassName,\n      {\n        padding: 0,\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        flexShrink: 0,\n      },\n    ],\n    checkCover: {\n      position: 'absolute',\n      top: -1,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      display: anySelected ? 'block' : 'none',\n    },\n    fields: [\n      classNames.fields,\n      {\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n    isRowHeader: [\n      classNames.isRowHeader,\n      {\n        color: colors.defaultHeaderText,\n        fontSize: fonts.medium.fontSize,\n      },\n      isSelected && {\n        color: colors.selectedHeaderText,\n        fontWeight: FontWeights.semibold,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'HighlightText',\n          },\n        },\n      },\n    ],\n    isMultiline: [\n      defaultCellStyles,\n      {\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n        textOverflow: 'clip',\n      },\n    ],\n    check: [classNames.check],\n  };\n};\n","import { IDetailsHeaderStyleProps, IDetailsHeaderStyles } from './DetailsHeader.types';\nimport {\n  getFocusStyle,\n  focusClear,\n  IStyle,\n  getGlobalClassNames,\n  HighContrastSelector,\n  hiddenContentStyle,\n  ITheme,\n} from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { ICellStyleProps } from './DetailsRow.types';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPANDER_WIDTH } from '../GroupedList/GroupSpacer';\n\nconst GlobalClassNames = {\n  tooltipHost: 'ms-TooltipHost',\n  root: 'ms-DetailsHeader',\n  cell: 'ms-DetailsHeader-cell',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintCaretStyle: 'ms-DetailsHeader-dropHintCaretStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVertical: 'ms-DetailsColumn-gripperBarVertical',\n  checkTooltip: 'ms-DetailsHeader-checkTooltip',\n  check: 'ms-DetailsHeader-check',\n};\n\nexport const HEADER_HEIGHT = 42;\n\nexport const getCellStyles = (props: { theme: ITheme; cellStyleProps?: ICellStyleProps }): IStyle => {\n  const { theme, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return [\n    classNames.cell,\n    getFocusStyle(theme),\n    {\n      color: semanticColors.bodyText,\n      position: 'relative',\n      display: 'inline-block',\n      boxSizing: 'border-box',\n      padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n      lineHeight: 'inherit',\n      margin: '0',\n      height: HEADER_HEIGHT,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      textAlign: 'left',\n    },\n  ];\n};\n\nexport const getStyles = (props: IDetailsHeaderStyleProps): IDetailsHeaderStyles => {\n  const {\n    theme,\n    className,\n    isAllSelected,\n    isResizingColumn,\n    isSizing,\n    isAllCollapsed,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    dropdownChevronForegroundColor: palette.neutralTertiary,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const cellSizerFadeInStyles: IStyle = {\n    opacity: 1,\n    transition: 'opacity 0.3s linear',\n  };\n\n  const cellStyles = getCellStyles(props);\n\n  return {\n    root: [\n      classNames.root,\n      fonts.small,\n      {\n        display: 'inline-block',\n        background: colors.headerBackgroundColor,\n        position: 'relative',\n        minWidth: '100%',\n        verticalAlign: 'top',\n        height: HEADER_HEIGHT,\n        lineHeight: HEADER_HEIGHT,\n        whiteSpace: 'nowrap',\n        boxSizing: 'content-box',\n        paddingBottom: '1px',\n        paddingTop: '16px',\n        borderBottom: `1px solid ${semanticColors.bodyDivider}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`& .${classNames.tooltipHost} .${classNames.checkTooltip}`]: {\n            display: 'block',\n          },\n        },\n      },\n      isAllSelected && classNames.isAllSelected,\n      isResizingColumn && classNames.isResizingColumn,\n      className,\n    ],\n\n    check: [\n      classNames.check,\n      {\n        height: HEADER_HEIGHT,\n      },\n      {\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n\n    cellWrapperPadded: {\n      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n    },\n\n    cellIsCheck: [\n      cellStyles,\n      classNames.cellIsCheck,\n      {\n        position: 'relative',\n        padding: 0,\n        margin: 0,\n        display: 'inline-flex',\n        alignItems: 'center',\n        border: 'none',\n      },\n      isAllSelected && {\n        opacity: 1,\n      },\n    ],\n\n    cellIsGroupExpander: [\n      cellStyles,\n      {\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        padding: 0,\n        border: 'none',\n        width: GROUP_EXPANDER_WIDTH, // align with GroupedList's first expandIcon cell width.\n        color: palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: palette.neutralLighter,\n          },\n          ':active': {\n            backgroundColor: palette.neutralLight,\n          },\n        },\n      },\n    ],\n\n    cellIsActionable: {\n      selectors: {\n        ':hover': {\n          color: semanticColors.bodyText,\n          background: semanticColors.listHeaderBackgroundHovered,\n        },\n        ':active': {\n          background: semanticColors.listHeaderBackgroundPressed,\n        },\n      },\n    },\n    cellIsEmpty: {\n      textOverflow: 'clip',\n    },\n\n    cellSizer: [\n      classNames.cellSizer,\n      focusClear(),\n      {\n        display: 'inline-block',\n        position: 'relative',\n        cursor: 'ew-resize',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 'inherit',\n        background: 'transparent',\n        zIndex: 1,\n        width: 16,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            width: 1,\n            background: colors.resizerColor,\n            opacity: 0,\n            left: '50%',\n          },\n          ':focus:after': cellSizerFadeInStyles,\n          ':hover:after': cellSizerFadeInStyles,\n          [`&.${classNames.isResizing}:after`]: [\n            cellSizerFadeInStyles,\n            {\n              boxShadow: '0 0 5px 0 rgba(0, 0, 0, 0.4)',\n            },\n          ],\n        },\n      },\n    ],\n\n    cellIsResizing: classNames.isResizing,\n\n    cellSizerStart: {\n      margin: '0 -8px',\n    },\n\n    cellSizerEnd: {\n      margin: 0,\n      marginLeft: -16,\n    },\n\n    collapseButton: [\n      classNames.collapseButton,\n      {\n        transformOrigin: '50% 50%',\n        transition: 'transform .1s linear',\n      },\n      isAllCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n            },\n          ]\n        : {\n            transform: 'rotate(90deg)',\n          },\n    ],\n\n    checkTooltip: classNames.checkTooltip,\n\n    sizingOverlay: isSizing && {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      cursor: 'ew-resize',\n      background: 'rgba(255, 255, 255, 0)',\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'transparent',\n          MsHighContrastAdjust: 'none',\n        },\n      },\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    dropHintCircleStyle: [\n      classNames.dropHintCircleStyle,\n      {\n        display: 'inline-block',\n        visibility: 'hidden',\n        position: 'absolute',\n        bottom: 0,\n        height: 9,\n        width: 9,\n        borderRadius: '50%',\n        marginLeft: -5,\n        top: 34,\n        overflow: 'visible',\n        zIndex: 10,\n        border: `1px solid ${palette.themePrimary}`,\n        background: palette.white,\n      },\n    ],\n\n    dropHintCaretStyle: [\n      classNames.dropHintCaretStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        top: -28,\n        left: -6.5,\n        fontSize: fonts.medium.fontSize,\n        color: palette.themePrimary,\n        overflow: 'visible',\n        zIndex: 10,\n      },\n    ],\n\n    dropHintLineStyle: [\n      classNames.dropHintLineStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 42,\n        width: 1,\n        background: palette.themePrimary,\n        zIndex: 10,\n      },\n    ],\n\n    dropHintStyle: {\n      display: 'inline-block',\n      position: 'absolute',\n    },\n  };\n};\n","import { getGlobalClassNames, getFocusStyle } from '../../Styling';\nimport { IDetailsRowCheckStyleProps, IDetailsRowCheckStyles } from './DetailsRowCheck.types';\nimport { DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nimport { HEADER_HEIGHT } from './DetailsHeader.styles';\nimport { CheckGlobalClassNames } from '../Check/Check.styles';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsRow-check',\n  isDisabled: 'ms-DetailsRow-check--isDisabled',\n  isHeader: 'ms-DetailsRow-check--isHeader',\n};\n\nexport const CHECK_CELL_WIDTH = 48;\n\nexport const getStyles = (props: IDetailsRowCheckStyleProps): IDetailsRowCheckStyles => {\n  const { theme, className, isHeader, selected, anySelected, canSelect, compact, isVisible } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n  const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n\n  const height = isHeader ? HEADER_HEIGHT : compact ? compactRowHeight : rowHeight;\n\n  const isCheckVisible = isVisible || selected || anySelected;\n\n  return {\n    root: [classNames.root, className],\n\n    check: [\n      !canSelect && classNames.isDisabled,\n      isHeader && classNames.isHeader,\n      getFocusStyle(theme),\n      theme.fonts.small,\n      CheckGlobalClassNames.checkHost,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'default',\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        opacity: isCheckVisible ? 1 : 0,\n        height: height,\n        width: CHECK_CELL_WIDTH,\n        padding: 0,\n        margin: 0,\n      },\n    ],\n\n    isDisabled: [],\n  };\n};\n","import * as React from 'react';\nimport {\n  IDetailsRowCheckProps,\n  IDetailsCheckboxProps,\n  IDetailsRowCheckStyleProps,\n  IDetailsRowCheckStyles,\n} from './DetailsRowCheck.types';\nimport { css, styled, classNamesFunction } from '../../Utilities';\nimport { Check } from '../../Check';\nimport { getStyles } from './DetailsRowCheck.styles';\nimport { composeRenderFunction } from '@uifabric/utilities';\nimport { ITheme } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>();\n\nconst DetailsRowCheckBase: React.FunctionComponent<IDetailsRowCheckProps> = props => {\n  const {\n    isVisible = false,\n    canSelect = false,\n    anySelected = false,\n    selected = false,\n    isHeader = false,\n    className,\n    checkClassName,\n    styles,\n    theme,\n    compact,\n    onRenderDetailsCheckbox,\n    useFastIcons = true, // must be removed from buttonProps\n    ...buttonProps\n  } = props;\n  const defaultCheckboxRender = useFastIcons ? _fastDefaultCheckboxRender : _defaultCheckboxRender;\n\n  const onRenderCheckbox = onRenderDetailsCheckbox\n    ? composeRenderFunction(onRenderDetailsCheckbox, defaultCheckboxRender)\n    : defaultCheckboxRender;\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    canSelect,\n    selected,\n    anySelected,\n    className,\n    isHeader,\n    isVisible,\n    compact,\n  });\n\n  const detailsCheckboxProps: IDetailsCheckboxProps = {\n    checked: selected,\n    theme,\n  };\n\n  return canSelect ? (\n    <div\n      {...buttonProps}\n      role=\"checkbox\"\n      // tslint:disable-next-line:deprecation\n      className={css(classNames.root, classNames.check)}\n      aria-checked={selected}\n      data-selection-toggle={true}\n      data-automationid=\"DetailsRowCheck\"\n    >\n      {onRenderCheckbox(detailsCheckboxProps)}\n    </div>\n  ) : (\n    // tslint:disable-next-line:deprecation\n    <div {...buttonProps} className={css(classNames.root, classNames.check)} />\n  );\n};\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n\nfunction _defaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <Check checked={checkboxProps.checked} />;\n}\n\nfunction _fastDefaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n}\n\nexport const DetailsRowCheck = styled<IDetailsRowCheckProps, IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>(\n  DetailsRowCheckBase,\n  getStyles,\n  undefined,\n  { scope: 'DetailsRowCheck' },\n  true,\n);\n","import * as React from 'react';\r\nimport { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { CollapseAllVisibility } from '../../GroupedList';\r\nimport { ITheme, IStyle } from '../../Styling';\r\nimport { DetailsHeaderBase } from './DetailsHeader.base';\r\nimport { IColumn, DetailsListLayoutMode, IColumnReorderOptions, ColumnDragEndLocation } from './DetailsList.types';\r\nimport { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\r\nimport { ISelection, SelectionMode } from '../../utilities/selection/index';\r\nimport { IDetailsCheckboxProps } from './DetailsRowCheck.types';\r\nimport { IDetailsColumnRenderTooltipProps } from './DetailsColumn.types';\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeader {\r\n  /** sets focus into the header */\r\n  focus: () => boolean;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeaderBaseProps extends React.ClassAttributes<DetailsHeaderBase>, IDetailsItemProps {\r\n  /** Theme from the Higher Order Component */\r\n  theme?: ITheme;\r\n\r\n  /** Call to provide customized styling that will layer on top of the variant rules. */\r\n  styles?: IStyleFunctionOrObject<IDetailsHeaderStyleProps, IDetailsHeaderStyles>;\r\n\r\n  /** Ref to the component itself */\r\n  componentRef?: IRefObject<IDetailsHeader>;\r\n\r\n  /** Layout mode - fixedColumns or justified */\r\n  layoutMode: DetailsListLayoutMode;\r\n\r\n  /** Callback for when column sizing has changed */\r\n  onColumnIsSizingChanged?: (column: IColumn, isSizing: boolean) => void;\r\n\r\n  /** Callback for when column is resized */\r\n  onColumnResized?: (column: IColumn, newWidth: number, columnIndex: number) => void;\r\n\r\n  /** Callback for when column is automatically resized */\r\n  onColumnAutoResized?: (column: IColumn, columnIndex: number) => void;\r\n\r\n  /** Callback for when the column is clicked */\r\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\r\n\r\n  /** Callback for when the column needs to show a context menu */\r\n  onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void;\r\n\r\n  /** Callback to render a tooltip for the column header */\r\n  onRenderColumnHeaderTooltip?: IRenderFunction<IDetailsColumnRenderTooltipProps>;\r\n\r\n  /** Whether to collapse for all visibility */\r\n  collapseAllVisibility?: CollapseAllVisibility;\r\n\r\n  /** Whether or not all is collapsed */\r\n  isAllCollapsed?: boolean;\r\n\r\n  /** Callback for when collapse all is toggled */\r\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\r\n\r\n  /** ariaLabel for the entire header */\r\n  ariaLabel?: string;\r\n\r\n  /** ariaLabel for expand/collapse group button */\r\n  ariaLabelForToggleAllGroupsButton?: string;\r\n\r\n  /** ariaLabel for the header checkbox that selects or deselects everything */\r\n  ariaLabelForSelectAllCheckbox?: string;\r\n\r\n  /** ariaLabel for the selection column */\r\n  ariaLabelForSelectionColumn?: string;\r\n\r\n  /** Select all button visibility */\r\n  selectAllVisibility?: SelectAllVisibility;\r\n\r\n  /** Column reordering options */\r\n  columnReorderOptions?: IColumnReorderOptions;\r\n\r\n  /** Column reordering options */\r\n  columnReorderProps?: IColumnReorderHeaderProps;\r\n\r\n  /** Minimum pixels to be moved before dragging is registered */\r\n  minimumPixelsForDrag?: number;\r\n\r\n  /** Overriding class name */\r\n  className?: string;\r\n\r\n  /** If provided, can be used to render a custom checkbox */\r\n  onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;\r\n\r\n  /**\r\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\r\n   * but are still customizable via class names.\r\n   * @defaultvalue true\r\n   */\r\n  useFastIcons?: boolean;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeaderProps extends IDetailsHeaderBaseProps {\r\n  /**\r\n   * Column metadata\r\n   */\r\n  columns: IColumn[];\r\n\r\n  /**\r\n   * Selection from utilities\r\n   */\r\n  selection: ISelection;\r\n\r\n  /**\r\n   * Selection mode\r\n   */\r\n  selectionMode: SelectionMode;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport enum SelectAllVisibility {\r\n  none = 0,\r\n  hidden = 1,\r\n  visible = 2,\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeaderState {\r\n  columnResizeDetails?: IColumnResizeDetails;\r\n  isAllSelected?: boolean;\r\n  isSizing?: boolean;\r\n  isAllCollapsed?: boolean;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IColumnResizeDetails {\r\n  columnIndex: number;\r\n  originX?: number;\r\n  columnMinWidth: number;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IColumnReorderHeaderProps extends IColumnReorderOptions {\r\n  /** Callback to notify the column dragEnd event to List\r\n   * Need this to check whether the dragEnd has happened on\r\n   * corresponding list or outside of the list\r\n   */\r\n  onColumnDragEnd?: (props: { dropLocation?: ColumnDragEndLocation }, event: MouseEvent) => void;\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDropHintDetails {\r\n  originX: number; // X index of dropHint Element relative to header\r\n  startX: number; // start index of the range for the current drophint\r\n  endX: number; // end index of the range for the current drophint\r\n  dropHintElementRef: HTMLElement; // Reference for drophint to change the style when needed\r\n}\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport type IDetailsHeaderStyleProps = Required<Pick<IDetailsHeaderProps, 'theme'>> &\r\n  Pick<IDetailsHeaderProps, 'className'> & {\r\n    /** Whether to hide select all checkbox */\r\n    isSelectAllHidden?: boolean;\r\n\r\n    /** Whether the \"select all\" checkbox is checked */\r\n    isAllSelected?: boolean;\r\n\r\n    /** Is column being resized */\r\n    isResizingColumn?: boolean;\r\n\r\n    /** Are all columns collapsed */\r\n    isAllCollapsed?: boolean;\r\n\r\n    /** Whether the header is sizing */\r\n    isSizing?: boolean;\r\n\r\n    /** Whether checkbox is hidden  */\r\n    isCheckboxHidden?: boolean;\r\n\r\n    cellStyleProps?: ICellStyleProps;\r\n  };\r\n\r\n/**\r\n * {@docCategory DetailsList}\r\n */\r\nexport interface IDetailsHeaderStyles {\r\n  root: IStyle;\r\n  check: IStyle;\r\n\r\n  /**\r\n   * @deprecated Not used\r\n   */\r\n  cellWrapperPadded: IStyle;\r\n  cellIsCheck: IStyle;\r\n\r\n  /**\r\n   * @deprecated Not used\r\n   */\r\n  cellIsActionable: IStyle;\r\n\r\n  /**\r\n   * @deprecated Not used\r\n   */\r\n  cellIsEmpty: IStyle;\r\n  cellSizer: IStyle;\r\n  cellSizerStart: IStyle;\r\n  cellSizerEnd: IStyle;\r\n  cellIsResizing: IStyle;\r\n  cellIsGroupExpander: IStyle;\r\n  collapseButton: IStyle;\r\n  checkTooltip: IStyle;\r\n  sizingOverlay: IStyle;\r\n  dropHintCircleStyle: IStyle;\r\n  dropHintCaretStyle: IStyle;\r\n  dropHintLineStyle: IStyle;\r\n  dropHintStyle: IStyle;\r\n  accessibleLabel: IStyle;\r\n}\r\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { EventGroup, getDocument } from '../../Utilities';\nimport { IDragDropHelper, IDragDropTarget, IDragDropOptions, IDragDropEvent, IDragDropContext } from './interfaces';\nimport { ISelection } from '../../utilities/selection/interfaces';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nexport interface IDragDropHelperParams {\n  selection: ISelection;\n  minimumPixelsForDrag?: number;\n}\n\nexport class DragDropHelper implements IDragDropHelper {\n  private _dragEnterCounts: { [key: string]: number };\n  private _isDragging: boolean;\n  private _dragData: {\n    eventTarget: EventTarget | null;\n    clientX: number;\n    clientY: number;\n    dataTransfer?: DataTransfer;\n    dropTarget?: IDragDropTarget;\n    dragTarget?: IDragDropTarget;\n  } | null;\n  private _selection: ISelection;\n  private _activeTargets: {\n    [key: string]: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n  };\n  private _events: EventGroup;\n  private _lastId: number;\n  private _initialized: boolean;\n\n  constructor(params: IDragDropHelperParams) {\n    this._selection = params.selection;\n    this._dragEnterCounts = {};\n    this._activeTargets = {};\n    this._lastId = 0;\n    // To make this class cheap to create, which allows simplifying some logic elsewhere,\n    // only initialize the event group and global event handlers as needed.\n    this._initialized = false;\n  }\n\n  public dispose(): void {\n    if (this._events) {\n      this._events.dispose();\n    }\n  }\n\n  public subscribe(\n    root: HTMLElement,\n    events: EventGroup,\n    dragDropOptions: IDragDropOptions,\n  ): {\n    key: string;\n    dispose(): void;\n  } {\n    if (!this._initialized) {\n      this._events = new EventGroup(this);\n\n      const doc = getDocument();\n\n      // clear drag data when mouse up, use capture event to ensure it will be run\n      if (doc) {\n        this._events.on(doc.body, 'mouseup', this._onMouseUp.bind(this), true);\n        this._events.on(doc, 'mouseup', this._onDocumentMouseUp.bind(this), true);\n      }\n\n      this._initialized = true;\n    }\n\n    const { key = `${++this._lastId}` } = dragDropOptions;\n\n    const handlers: {\n      callback: (context: IDragDropContext, event?: any) => void;\n      eventName: string;\n    }[] = [];\n\n    let onDragStart: (event: DragEvent) => void;\n    let onDragLeave: (event: DragEvent) => void;\n    let onDragEnter: (event: DragEvent) => void;\n    let onDragEnd: (event: DragEvent) => void;\n    let onDrop: (event: DragEvent) => void;\n    let onDragOver: (event: DragEvent) => void;\n    let onMouseDown: (event: MouseEvent) => void;\n\n    let isDraggable: boolean;\n    let isDroppable: boolean;\n\n    let activeTarget: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n\n    if (dragDropOptions && root) {\n      const { eventMap, context, updateDropState } = dragDropOptions;\n\n      const dragDropTarget: IDragDropTarget = {\n        root: root,\n        options: dragDropOptions,\n        key: key,\n      };\n\n      isDraggable = this._isDraggable(dragDropTarget);\n      isDroppable = this._isDroppable(dragDropTarget);\n\n      if (isDraggable || isDroppable) {\n        if (eventMap) {\n          for (const event of eventMap) {\n            const handler = {\n              callback: event.callback.bind(null, context),\n              eventName: event.eventName,\n            };\n\n            handlers.push(handler);\n\n            this._events.on(root, handler.eventName, handler.callback);\n          }\n        }\n      }\n\n      if (isDroppable) {\n        // If the target is droppable, wire up global event listeners to track drop-related events.\n        onDragLeave = (event: DragEvent) => {\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]--;\n            if (this._dragEnterCounts[key] === 0) {\n              updateDropState(false /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnter = (event: DragEvent) => {\n          event.preventDefault(); // needed for IE\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]++;\n            if (this._dragEnterCounts[key] === 1) {\n              updateDropState(true /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnd = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n        };\n\n        onDrop = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n\n          if (dragDropOptions.onDrop) {\n            dragDropOptions.onDrop(dragDropOptions.context.data, event);\n          }\n        };\n\n        onDragOver = (event: DragEvent) => {\n          event.preventDefault();\n          if (dragDropOptions.onDragOver) {\n            dragDropOptions.onDragOver(dragDropOptions.context.data, event);\n          }\n        };\n\n        this._dragEnterCounts[key] = 0;\n\n        // dragenter and dragleave will be fired when hover to the child element\n        // but we only want to change state when enter or leave the current element\n        // use the count to ensure it.\n        events.on(root, 'dragenter', onDragEnter);\n        events.on(root, 'dragleave', onDragLeave);\n        events.on(root, 'dragend', onDragEnd);\n        events.on(root, 'drop', onDrop);\n        events.on(root, 'dragover', onDragOver);\n      }\n\n      if (isDraggable) {\n        // If the target is draggable, wire up local event listeners for mouse events.\n        onMouseDown = this._onMouseDown.bind(this, dragDropTarget);\n        onDragEnd = this._onDragEnd.bind(this, dragDropTarget);\n\n        // We need to add in data so that on Firefox we show the ghost element when dragging\n        onDragStart = (event: DragEvent) => {\n          const options = dragDropOptions;\n          if (options && options.onDragStart) {\n            options.onDragStart(options.context.data, options.context.index, this._selection.getSelection(), event);\n          }\n          this._isDragging = true;\n          if (event.dataTransfer) {\n            event.dataTransfer.setData('id', root.id);\n          }\n        };\n\n        events.on(root, 'dragstart', onDragStart);\n        events.on(root, 'mousedown', onMouseDown);\n        events.on(root, 'dragend', onDragEnd);\n      }\n\n      activeTarget = {\n        target: dragDropTarget,\n        dispose: () => {\n          if (this._activeTargets[key] === activeTarget) {\n            delete this._activeTargets[key];\n          }\n\n          if (root) {\n            for (const handler of handlers) {\n              this._events.off(root, handler.eventName, handler.callback);\n            }\n\n            if (isDroppable) {\n              events.off(root, 'dragenter', onDragEnter);\n              events.off(root, 'dragleave', onDragLeave);\n              events.off(root, 'dragend', onDragEnd);\n              events.off(root, 'dragover', onDragOver);\n              events.off(root, 'drop', onDrop);\n            }\n\n            if (isDraggable) {\n              events.off(root, 'dragstart', onDragStart);\n              events.off(root, 'mousedown', onMouseDown);\n              events.off(root, 'dragend', onDragEnd);\n            }\n          }\n        },\n      };\n\n      this._activeTargets[key] = activeTarget;\n    }\n\n    return {\n      key: key,\n      dispose: () => {\n        if (activeTarget) {\n          activeTarget.dispose();\n        }\n      },\n    };\n  }\n\n  public unsubscribe(root: HTMLElement, key: string): void {\n    const activeTarget = this._activeTargets[key];\n\n    if (activeTarget) {\n      activeTarget.dispose();\n    }\n  }\n\n  private _onDragEnd(target: IDragDropTarget, event: DragEvent): void {\n    const { options } = target;\n    if (options.onDragEnd) {\n      options.onDragEnd(options.context.data, event);\n    }\n  }\n\n  /**\n   * clear drag data when mouse up on body\n   */\n  private _onMouseUp(event: MouseEvent): void {\n    this._isDragging = false;\n    if (this._dragData) {\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n\n        if (activeTarget.target.root) {\n          this._events.off(activeTarget.target.root, 'mousemove');\n          this._events.off(activeTarget.target.root, 'mouseleave');\n        }\n      }\n\n      if (this._dragData.dropTarget) {\n        // raise dragleave event to let dropTarget know it need to remove dropping style\n        EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n        EventGroup.raise(this._dragData.dropTarget.root, 'drop');\n      }\n    }\n    this._dragData = null;\n  }\n\n  /**\n   * clear drag data when mouse up outside of the document\n   */\n  private _onDocumentMouseUp(event: MouseEvent): void {\n    const doc = getDocument();\n\n    if (doc && event.target === doc.documentElement) {\n      this._onMouseUp(event);\n    }\n  }\n\n  /**\n   * when mouse move over a new drop target while dragging some items,\n   * fire dragleave on the old target and fire dragenter to the new target\n   * The target will handle style change on dragenter and dragleave events.\n   */\n  private _onMouseMove(target: IDragDropTarget, event: MouseEvent): void {\n    const {\n      // use buttons property here since ev.button in some edge case is not updating well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = MOUSEMOVE_PRIMARY_BUTTON,\n    } = event;\n\n    if (this._dragData && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onMouseUp(event);\n      return;\n    }\n\n    const { root, key } = target;\n    if (this._isDragging) {\n      if (this._isDroppable(target)) {\n        // we can have nested drop targets in the DOM, like a folder inside a group. In that case, when we drag into\n        // the inner target (folder), we first set dropTarget to the inner element. But the same event is bubbled to the\n        // outer target too, and we need to prevent the outer one from taking over.\n        // So, check if the last dropTarget is not a child of the current.\n\n        if (this._dragData) {\n          if (\n            this._dragData.dropTarget &&\n            this._dragData.dropTarget.key !== key &&\n            !this._isChild(root, this._dragData.dropTarget.root)\n          ) {\n            if (this._dragEnterCounts[this._dragData.dropTarget.key] > 0) {\n              EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n              EventGroup.raise(root, 'dragenter');\n              this._dragData.dropTarget = target;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * when mouse leave a target while dragging some items, fire dragleave to the target\n   */\n  private _onMouseLeave(target: IDragDropTarget, event: MouseEvent): void {\n    if (this._isDragging) {\n      if (this._dragData && this._dragData.dropTarget && this._dragData.dropTarget.key === target.key) {\n        EventGroup.raise(target.root, 'dragleave');\n        this._dragData.dropTarget = undefined;\n      }\n    }\n  }\n\n  /**\n   * when mouse down on a draggable item, we start to track dragdata.\n   */\n  private _onMouseDown(target: IDragDropTarget, event: MouseEvent): void {\n    if (event.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    if (this._isDraggable(target)) {\n      this._dragData = {\n        clientX: event.clientX,\n        clientY: event.clientY,\n        eventTarget: event.target,\n        dragTarget: target,\n      };\n\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n        if (activeTarget.target.root) {\n          this._events.on(activeTarget.target.root, 'mousemove', this._onMouseMove.bind(this, activeTarget.target));\n          this._events.on(activeTarget.target.root, 'mouseleave', this._onMouseLeave.bind(this, activeTarget.target));\n        }\n      }\n    } else {\n      this._dragData = null;\n    }\n  }\n\n  /**\n   * determine whether the child target is a descendant of the parent\n   */\n  private _isChild(parent: React.ReactInstance, child: React.ReactInstance): boolean {\n    const parentElement = ReactDOM.findDOMNode(parent);\n    let childElement = ReactDOM.findDOMNode(child);\n    while (childElement && childElement.parentElement) {\n      if (childElement.parentElement === parentElement) {\n        return true;\n      }\n      childElement = childElement.parentElement;\n    }\n    return false;\n  }\n\n  private _isDraggable(target: IDragDropTarget): boolean {\n    const { options } = target;\n    return !!(options.canDrag && options.canDrag(options.context.data));\n  }\n\n  private _isDroppable(target: IDragDropTarget): boolean {\n    // TODO: take the drag item into consideration to prevent dragging an item into the same group\n    const { options } = target;\n    const dragContext =\n      this._dragData && this._dragData.dragTarget ? this._dragData.dragTarget.options.context : undefined;\n    return !!(options.canDrop && options.canDrop(options.context, dragContext));\n  }\n}\n","import * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { initializeComponentRef, EventGroup, Async, IDisposable, classNamesFunction } from '../../Utilities';\nimport { ColumnActionsMode } from './DetailsList.types';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnRenderTooltipProps,\n} from './DetailsColumn.types';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nconst getClassNames = classNamesFunction<IDetailsColumnStyleProps, IDetailsColumnStyles>();\nconst TRANSITION_DURATION_DRAG = 200; // ms\nconst TRANSITION_DURATION_DROP = 1500; // ms\nconst CLASSNAME_ADD_INTERVAL = 20; // ms\n\n/**\n * Component for rendering columns in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport class DetailsColumnBase extends React.Component<IDetailsColumnProps> {\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragDropSubscription: IDisposable;\n  private _classNames: IProcessedStyleSet<IDetailsColumnStyles>;\n\n  constructor(props: IDetailsColumnProps) {\n    super(props);\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      column,\n      columnIndex,\n      parentId,\n      isDraggable,\n      styles,\n      theme,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      useFastIcons = true,\n    } = this.props;\n    const { onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip } = this.props;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      headerClassName: column.headerClassName,\n      iconClassName: column.iconClassName,\n      isActionable: column.columnActionsMode !== ColumnActionsMode.disabled,\n      isEmpty: !column.name,\n      isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,\n      isPadded: column.isPadded,\n      isIconOnly: column.isIconOnly,\n      cellStyleProps,\n      transitionDurationDrag: TRANSITION_DURATION_DRAG,\n      transitionDurationDrop: TRANSITION_DURATION_DROP,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    return (\n      <>\n        <div\n          key={column.key}\n          ref={this._root}\n          role={'columnheader'}\n          aria-sort={column.isSorted ? (column.isSortedDescending ? 'descending' : 'ascending') : 'none'}\n          aria-colindex={columnIndex}\n          className={classNames.root}\n          data-is-draggable={isDraggable}\n          draggable={isDraggable}\n          style={{\n            width:\n              column.calculatedWidth! +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          }}\n          data-automationid={'ColumnsHeaderColumn'}\n          data-item-key={column.key}\n        >\n          {isDraggable && (\n            <IconComponent iconName=\"GripperBarVertical\" className={classNames.gripperBarVerticalStyle} />\n          )}\n          {onRenderColumnHeaderTooltip(\n            {\n              hostClassName: classNames.cellTooltip,\n              id: `${parentId}-${column.key}-tooltip`,\n              setAriaDescribedBy: false,\n              column,\n              content: column.columnActionsMode !== ColumnActionsMode.disabled ? column.ariaLabel : '',\n              children: (\n                <span\n                  id={`${parentId}-${column.key}`}\n                  aria-label={column.isIconOnly ? column.name : undefined}\n                  aria-labelledby={column.isIconOnly ? undefined : `${parentId}-${column.key}-name`}\n                  className={classNames.cellTitle}\n                  data-is-focusable={column.columnActionsMode !== ColumnActionsMode.disabled}\n                  role={\n                    column.columnActionsMode !== ColumnActionsMode.disabled &&\n                    (column.onColumnClick !== undefined || this.props.onColumnClick !== undefined)\n                      ? 'button'\n                      : undefined\n                  }\n                  aria-describedby={\n                    !this.props.onRenderColumnHeaderTooltip && this._hasAccessibleLabel()\n                      ? `${parentId}-${column.key}-tooltip`\n                      : undefined\n                  }\n                  onContextMenu={this._onColumnContextMenu}\n                  onClick={this._onColumnClick}\n                  aria-haspopup={column.columnActionsMode === ColumnActionsMode.hasDropdown}\n                  aria-expanded={\n                    column.columnActionsMode === ColumnActionsMode.hasDropdown ? !!column.isMenuOpen : undefined\n                  }\n                >\n                  <span id={`${parentId}-${column.key}-name`} className={classNames.cellName}>\n                    {(column.iconName || column.iconClassName) && (\n                      <IconComponent className={classNames.iconClassName} iconName={column.iconName} />\n                    )}\n\n                    {column.isIconOnly ? (\n                      <span className={classNames.accessibleLabel}>{column.name}</span>\n                    ) : (\n                      column.name\n                    )}\n                  </span>\n\n                  {column.isFiltered && <IconComponent className={classNames.nearIcon} iconName=\"Filter\" />}\n\n                  {column.isSorted && (\n                    <IconComponent\n                      className={classNames.sortIcon}\n                      iconName={column.isSortedDescending ? 'SortDown' : 'SortUp'}\n                    />\n                  )}\n\n                  {column.isGrouped && <IconComponent className={classNames.nearIcon} iconName=\"GroupedDescending\" />}\n\n                  {column.columnActionsMode === ColumnActionsMode.hasDropdown && !column.isIconOnly && (\n                    <IconComponent aria-hidden={true} className={classNames.filterChevron} iconName=\"ChevronDown\" />\n                  )}\n                </span>\n              ),\n            },\n            this._onRenderColumnHeaderTooltip,\n          )}\n        </div>\n        {!this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleLabel() : null}\n      </>\n    );\n  }\n\n  public componentDidMount(): void {\n    if (this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    const classNames = this._classNames;\n\n    if (this.props.isDropped) {\n      if (this._root.current) {\n        this._root.current.classList.add(classNames.borderAfterDropping);\n\n        this._async.setTimeout(() => {\n          if (this._root.current) {\n            this._root.current.classList.add(classNames.noBorderAfterDropping);\n          }\n        }, CLASSNAME_ADD_INTERVAL);\n      }\n\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.remove(classNames.borderAfterDropping);\n          this._root.current.classList.remove(classNames.noBorderAfterDropping);\n        }\n      }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public componentDidUpdate(): void {\n    if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    if (this._dragDropSubscription && !this.props.isDraggable) {\n      this._dragDropSubscription.dispose();\n      this._events.off(this._root.current, 'mousedown');\n      delete this._dragDropSubscription;\n    }\n  }\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: IDetailsColumnRenderTooltipProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  private _onColumnClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnClick, column } = this.props;\n\n    if (column.columnActionsMode === ColumnActionsMode.disabled) {\n      return;\n    }\n\n    if (column.onColumnClick) {\n      column.onColumnClick(ev, column);\n    }\n\n    if (onColumnClick) {\n      onColumnClick(ev, column);\n    }\n  };\n\n  private _getColumnDragDropOptions(): IDragDropOptions {\n    const { columnIndex } = this.props;\n    const options = {\n      selectionIndex: columnIndex,\n      context: { data: columnIndex, index: columnIndex },\n      canDrag: () => this.props.isDraggable!,\n      canDrop: () => false,\n      onDragStart: this._onDragStart,\n      updateDropState: () => undefined,\n      onDrop: () => undefined,\n      onDragEnd: this._onDragEnd,\n    };\n    return options;\n  }\n\n  private _hasAccessibleLabel(): boolean {\n    const { column } = this.props;\n\n    return !!(\n      column.ariaLabel ||\n      column.filterAriaLabel ||\n      column.sortAscendingAriaLabel ||\n      column.sortDescendingAriaLabel ||\n      column.groupAriaLabel\n    );\n  }\n\n  private _renderAccessibleLabel(): JSX.Element | null {\n    const { column, parentId } = this.props;\n    const classNames = this._classNames;\n\n    return this._hasAccessibleLabel() && !this.props.onRenderColumnHeaderTooltip ? (\n      <label\n        key={`${column.key}_label`}\n        id={`${parentId}-${column.key}-tooltip`}\n        className={classNames.accessibleLabel}\n      >\n        {column.ariaLabel}\n        {(column.isFiltered && column.filterAriaLabel) || null}\n        {(column.isSorted &&\n          (column.isSortedDescending ? column.sortDescendingAriaLabel : column.sortAscendingAriaLabel)) ||\n          null}\n        {(column.isGrouped && column.groupAriaLabel) || null}\n      </label>\n    ) : null;\n  }\n\n  private _onDragStart = (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (itemIndex) {\n      this._updateHeaderDragInfo(itemIndex);\n      this._root.current!.classList.add(classNames.borderWhileDragging);\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.add(classNames.noBorderWhileDragging);\n        }\n      }, CLASSNAME_ADD_INTERVAL);\n    }\n  };\n\n  private _onDragEnd = (item?: any, event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (event) {\n      this._updateHeaderDragInfo(-1, event);\n    }\n    this._root.current!.classList.remove(classNames.borderWhileDragging);\n    this._root.current!.classList.remove(classNames.noBorderWhileDragging);\n  };\n\n  private _updateHeaderDragInfo = (itemIndex: number, event?: MouseEvent) => {\n    // tslint:disable:deprecation\n    if (this.props.setDraggedItemIndex) {\n      this.props.setDraggedItemIndex(itemIndex);\n    }\n    // tslint:enable:deprecation\n    if (this.props.updateDragInfo) {\n      this.props.updateDragInfo({ itemIndex }, event);\n    }\n  };\n\n  private _onColumnContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnContextMenu, column } = this.props;\n    if (column.onColumnContextMenu) {\n      column.onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n    if (onColumnContextMenu) {\n      onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const { isDraggable } = this.props;\n    // Ignore anything except the primary button.\n    if (isDraggable && ev.button === MOUSEDOWN_PRIMARY_BUTTON) {\n      ev.stopPropagation();\n    }\n  };\n\n  private _addDragDropHandling() {\n    this._dragDropSubscription = this.props.dragDropHelper!.subscribe(\n      this._root.current!,\n      this._events,\n      this._getColumnDragDropOptions(),\n    );\n\n    // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n    this._events.on(this._root.current, 'mousedown', this._onRootMouseDown);\n  }\n}\n","import { IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\nimport { getFocusStyle, getGlobalClassNames, hiddenContentStyle, IStyle, FontWeights } from '../../Styling';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { getCellStyles } from './DetailsHeader.styles';\n\nconst GlobalClassNames = {\n  isActionable: 'is-actionable',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  isEmpty: 'is-empty',\n  isIconVisible: 'is-icon-visible',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVerticalStyle: 'ms-DetailsColumn-gripperBar',\n  nearIcon: 'ms-DetailsColumn-nearIcon',\n};\n\nexport const getStyles = (props: IDetailsColumnStyleProps): IDetailsColumnStyles => {\n  const {\n    theme,\n    headerClassName,\n    iconClassName,\n    isActionable,\n    isEmpty,\n    isIconVisible,\n    isPadded,\n    isIconOnly,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    transitionDurationDrag,\n    transitionDurationDrop,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    dropdownChevronForegroundColor: palette.neutralTertiary,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const nearIconStyle: IStyle = {\n    color: colors.iconForegroundColor,\n    opacity: 1,\n    paddingLeft: 8,\n  };\n\n  const borderWhileDragging: IStyle = {\n    outline: `1px solid ${palette.themePrimary}`,\n  };\n\n  const borderAfterDragOrDrop: IStyle = {\n    outlineColor: 'transparent',\n  };\n\n  return {\n    root: [\n      getCellStyles(props),\n      fonts.small,\n      isActionable && [\n        classNames.isActionable,\n        {\n          selectors: {\n            ':hover': {\n              color: semanticColors.bodyText,\n              background: semanticColors.listHeaderBackgroundHovered,\n            },\n            ':active': {\n              background: semanticColors.listHeaderBackgroundPressed,\n            },\n          },\n        },\n      ],\n      isEmpty && [\n        classNames.isEmpty,\n        {\n          textOverflow: 'clip',\n        },\n      ],\n      isIconVisible && classNames.isIconVisible,\n      isPadded && {\n        paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n      },\n      {\n        selectors: {\n          ':hover i[data-icon-name=\"GripperBarVertical\"]': {\n            display: 'block',\n          },\n        },\n      },\n      headerClassName,\n    ],\n\n    gripperBarVerticalStyle: {\n      display: 'none',\n      position: 'absolute',\n      textAlign: 'left',\n      color: palette.neutralTertiary,\n      left: 1,\n    },\n\n    nearIcon: [classNames.nearIcon, nearIconStyle],\n\n    sortIcon: [\n      nearIconStyle,\n      {\n        paddingLeft: 4,\n        position: 'relative',\n        top: 1,\n      },\n    ],\n\n    iconClassName: [\n      {\n        color: colors.iconForegroundColor,\n        opacity: 1,\n      },\n      iconClassName,\n    ],\n\n    filterChevron: [\n      classNames.filterChevron,\n      {\n        color: colors.dropdownChevronForegroundColor,\n        paddingLeft: 6,\n        verticalAlign: 'middle',\n        fontSize: fonts.small.fontSize,\n      },\n    ],\n\n    cellTitle: [\n      classNames.cellTitle,\n      getFocusStyle(theme),\n      {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'stretch',\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n        padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n        ...(isIconOnly\n          ? {\n              alignContent: 'flex-end',\n              maxHeight: '100%',\n              flexWrap: 'wrap-reverse',\n            }\n          : {}),\n      },\n    ],\n\n    cellName: [\n      classNames.cellName,\n      {\n        flex: '0 1 auto',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontWeight: FontWeights.semibold,\n        fontSize: fonts.medium.fontSize,\n      },\n      isIconOnly && {\n        selectors: {\n          [`.${classNames.nearIcon}`]: {\n            paddingLeft: 0,\n          },\n        },\n      },\n    ],\n\n    cellTooltip: {\n      display: 'block',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    borderWhileDragging: borderWhileDragging,\n\n    noBorderWhileDragging: [borderAfterDragOrDrop, { transition: `outline ${transitionDurationDrag}ms ease` }],\n\n    borderAfterDropping: borderWhileDragging,\n\n    noBorderAfterDropping: [borderAfterDragOrDrop, { transition: `outline  ${transitionDurationDrop}ms ease` }],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IDetailsColumnProps, IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\nimport { DetailsColumnBase } from './DetailsColumn.base';\nimport { getStyles } from './DetailsColumn.styles';\n\nexport { IDetailsColumnProps };\n\nexport const DetailsColumn: React.FunctionComponent<IDetailsColumnProps> = styled<\n  IDetailsColumnProps,\n  IDetailsColumnStyleProps,\n  IDetailsColumnStyles\n>(DetailsColumnBase, getStyles, undefined, { scope: 'DetailsColumn' });\n","import * as React from 'react';\r\nimport { findDOMNode } from 'react-dom';\r\nimport { IProcessedStyleSet } from '../../Styling';\r\nimport {\r\n  initializeComponentRef,\r\n  EventGroup,\r\n  IDisposable,\r\n  css,\r\n  getRTL,\r\n  getId,\r\n  KeyCodes,\r\n  classNamesFunction,\r\n} from '../../Utilities';\r\nimport {\r\n  IColumn,\r\n  IDetailsHeaderBaseProps,\r\n  IColumnDragDropDetails,\r\n  ColumnDragEndLocation,\r\n  CheckboxVisibility,\r\n} from './DetailsList.types';\r\nimport { IFocusZone, FocusZone, FocusZoneDirection } from '../../FocusZone';\r\nimport { Icon, FontIcon } from '../../Icon';\r\nimport { Layer } from '../../Layer';\r\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\r\nimport { CollapseAllVisibility } from '../../GroupedList';\r\nimport { DetailsRowCheck } from './DetailsRowCheck';\r\nimport { ITooltipHostProps } from '../../Tooltip';\r\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\r\nimport { IDragDropOptions, DragDropHelper } from '../../utilities/dragdrop/index';\r\nimport { DetailsColumn, IDetailsColumnProps } from '../../components/DetailsList/DetailsColumn';\r\nimport {\r\n  SelectAllVisibility,\r\n  IDropHintDetails,\r\n  IColumnReorderHeaderProps,\r\n  IDetailsHeaderState,\r\n} from './DetailsHeader.types';\r\nimport { IDetailsHeaderStyleProps, IDetailsHeaderStyles, IDetailsHeader } from './DetailsHeader.types';\r\n\r\nconst getClassNames = classNamesFunction<IDetailsHeaderStyleProps, IDetailsHeaderStyles>();\r\n\r\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\r\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\r\n\r\nconst NO_COLUMNS: IColumn[] = [];\r\n\r\nexport class DetailsHeaderBase extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState>\r\n  implements IDetailsHeader {\r\n  public static defaultProps = {\r\n    selectAllVisibility: SelectAllVisibility.visible,\r\n    collapseAllVisibility: CollapseAllVisibility.visible,\r\n    useFastIcons: true,\r\n  };\r\n\r\n  private _classNames: IProcessedStyleSet<IDetailsHeaderStyles>;\r\n  private _rootElement: HTMLElement | undefined;\r\n  private _events: EventGroup;\r\n  private _rootComponent = React.createRef<IFocusZone>();\r\n  private _id: string;\r\n  private _draggedColumnIndex = -1;\r\n  private _dropHintDetails: { [key: number]: IDropHintDetails } = {};\r\n  private _dragDropHelper: DragDropHelper;\r\n  private _currentDropHintIndex: number;\r\n  private _subscriptionObject: IDisposable;\r\n  private _onDropIndexInfo: {\r\n    sourceIndex: number;\r\n    targetIndex: number;\r\n  };\r\n\r\n  constructor(props: IDetailsHeaderBaseProps) {\r\n    super(props);\r\n\r\n    initializeComponentRef(this);\r\n    this._events = new EventGroup(this);\r\n\r\n    this.state = {\r\n      columnResizeDetails: undefined,\r\n      isAllCollapsed: this.props.isAllCollapsed,\r\n      isAllSelected: !!this.props.selection && this.props.selection.isAllSelected(),\r\n    };\r\n\r\n    this._onDropIndexInfo = {\r\n      sourceIndex: -1,\r\n      targetIndex: -1,\r\n    };\r\n    this._id = getId('header');\r\n    this._currentDropHintIndex = -1;\r\n\r\n    // The drag drop handler won't do any work until subscribe() is called,\r\n    // so always set it up for convenience\r\n    this._dragDropHelper = new DragDropHelper({\r\n      selection: {\r\n        getSelection: () => {\r\n          return;\r\n        },\r\n      } as ISelection,\r\n      minimumPixelsForDrag: this.props.minimumPixelsForDrag,\r\n    });\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    const { selection } = this.props;\r\n\r\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\r\n\r\n    // We need to use native on this to prevent MarqueeSelection from handling the event before us.\r\n    this._events.on(this._rootElement!, 'mousedown', this._onRootMouseDown);\r\n\r\n    this._events.on(this._rootElement!, 'keydown', this._onRootKeyDown);\r\n\r\n    if (this._getColumnReorderProps()) {\r\n      this._subscriptionObject = this._dragDropHelper.subscribe(\r\n        this._rootElement!,\r\n        this._events,\r\n        this._getHeaderDragDropOptions(),\r\n      );\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void {\r\n    if (this._getColumnReorderProps()) {\r\n      if (!this._subscriptionObject) {\r\n        this._subscriptionObject = this._dragDropHelper.subscribe(\r\n          this._rootElement!,\r\n          this._events,\r\n          this._getHeaderDragDropOptions(),\r\n        );\r\n      }\r\n    } else if (this._subscriptionObject) {\r\n      this._subscriptionObject.dispose();\r\n      delete this._subscriptionObject;\r\n    }\r\n\r\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\r\n      const { columns: previousColumns = NO_COLUMNS } = prevProps;\r\n      const { columns = NO_COLUMNS } = this.props;\r\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\r\n        this._onDropIndexInfo = {\r\n          sourceIndex: -1,\r\n          targetIndex: -1,\r\n        };\r\n      }\r\n    }\r\n\r\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\r\n      this.setState({ isAllCollapsed: this.props.isAllCollapsed });\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    if (this._subscriptionObject) {\r\n      this._subscriptionObject.dispose();\r\n      delete this._subscriptionObject;\r\n    }\r\n\r\n    this._dragDropHelper.dispose();\r\n\r\n    this._events.dispose();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      columns = NO_COLUMNS,\r\n      ariaLabel,\r\n      ariaLabelForToggleAllGroupsButton,\r\n      ariaLabelForSelectAllCheckbox,\r\n      selectAllVisibility,\r\n      ariaLabelForSelectionColumn,\r\n      indentWidth,\r\n      rowWidth = 0,\r\n      onColumnClick,\r\n      onColumnContextMenu,\r\n      onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip,\r\n      styles,\r\n      selectionMode,\r\n      theme,\r\n      onRenderDetailsCheckbox,\r\n      groupNestingDepth,\r\n      useFastIcons,\r\n      checkboxVisibility,\r\n      className,\r\n    } = this.props;\r\n    const { isAllSelected, columnResizeDetails, isSizing, isAllCollapsed } = this.state;\r\n    const showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\r\n    const isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\r\n    const isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\r\n\r\n    const columnReorderProps = this._getColumnReorderProps();\r\n    const frozenColumnCountFromStart =\r\n      columnReorderProps && columnReorderProps.frozenColumnCountFromStart\r\n        ? columnReorderProps.frozenColumnCountFromStart\r\n        : 0;\r\n    const frozenColumnCountFromEnd =\r\n      columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\r\n        ? columnReorderProps.frozenColumnCountFromEnd\r\n        : 0;\r\n\r\n    this._classNames = getClassNames(styles, {\r\n      theme: theme!,\r\n      isAllSelected,\r\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\r\n      isResizingColumn: !!columnResizeDetails && isSizing,\r\n      isSizing,\r\n      isAllCollapsed,\r\n      isCheckboxHidden,\r\n      className,\r\n    });\r\n\r\n    const classNames = this._classNames;\r\n    const IconComponent = useFastIcons ? FontIcon : Icon;\r\n\r\n    const isRTL = getRTL(theme);\r\n    return (\r\n      <FocusZone\r\n        role=\"row\"\r\n        aria-label={ariaLabel}\r\n        className={classNames.root}\r\n        componentRef={this._rootComponent}\r\n        ref={this._onRootRef}\r\n        onMouseMove={this._onRootMouseMove}\r\n        data-automationid=\"DetailsHeader\"\r\n        style={{ minWidth: rowWidth }}\r\n        direction={FocusZoneDirection.horizontal}\r\n      >\r\n        {showCheckbox\r\n          ? [\r\n              <div\r\n                key=\"__checkbox\"\r\n                className={classNames.cellIsCheck}\r\n                aria-labelledby={`${this._id}-check`}\r\n                onClick={!isCheckboxHidden ? this._onSelectAllClicked : undefined}\r\n                aria-colindex={1}\r\n                role={'columnheader'}\r\n              >\r\n                {onRenderColumnHeaderTooltip(\r\n                  {\r\n                    hostClassName: classNames.checkTooltip,\r\n                    id: `${this._id}-checkTooltip`,\r\n                    setAriaDescribedBy: false,\r\n                    content: ariaLabelForSelectAllCheckbox,\r\n                    children: (\r\n                      <DetailsRowCheck\r\n                        id={`${this._id}-check`}\r\n                        aria-label={\r\n                          selectionMode === SelectionMode.multiple\r\n                            ? ariaLabelForSelectAllCheckbox\r\n                            : ariaLabelForSelectionColumn\r\n                        }\r\n                        aria-describedby={\r\n                          !isCheckboxHidden\r\n                            ? ariaLabelForSelectAllCheckbox && !this.props.onRenderColumnHeaderTooltip\r\n                              ? `${this._id}-checkTooltip`\r\n                              : undefined\r\n                            : ariaLabelForSelectionColumn && !this.props.onRenderColumnHeaderTooltip\r\n                            ? `${this._id}-checkTooltip`\r\n                            : undefined\r\n                        }\r\n                        data-is-focusable={!isCheckboxHidden || undefined}\r\n                        isHeader={true}\r\n                        selected={isAllSelected}\r\n                        anySelected={false}\r\n                        canSelect={!isCheckboxHidden}\r\n                        className={classNames.check}\r\n                        onRenderDetailsCheckbox={onRenderDetailsCheckbox}\r\n                        useFastIcons={useFastIcons}\r\n                        isVisible={isCheckboxAlwaysVisible}\r\n                      />\r\n                    ),\r\n                  },\r\n                  this._onRenderColumnHeaderTooltip,\r\n                )}\r\n              </div>,\r\n              !this.props.onRenderColumnHeaderTooltip ? (\r\n                ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (\r\n                  <label\r\n                    key=\"__checkboxLabel\"\r\n                    id={`${this._id}-checkTooltip`}\r\n                    className={classNames.accessibleLabel}\r\n                    aria-hidden={true}\r\n                  >\r\n                    {ariaLabelForSelectAllCheckbox}\r\n                  </label>\r\n                ) : ariaLabelForSelectionColumn && isCheckboxHidden ? (\r\n                  <label\r\n                    key=\"__checkboxLabel\"\r\n                    id={`${this._id}-checkTooltip`}\r\n                    className={classNames.accessibleLabel}\r\n                    aria-hidden={true}\r\n                  >\r\n                    {ariaLabelForSelectionColumn}\r\n                  </label>\r\n                ) : null\r\n              ) : null,\r\n            ]\r\n          : null}\r\n        {groupNestingDepth! > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible ? (\r\n          <div\r\n            className={classNames.cellIsGroupExpander}\r\n            onClick={this._onToggleCollapseAll}\r\n            data-is-focusable={true}\r\n            aria-label={ariaLabelForToggleAllGroupsButton}\r\n            aria-expanded={!isAllCollapsed}\r\n            role={ariaLabelForToggleAllGroupsButton ? 'button' : undefined}\r\n          >\r\n            <IconComponent\r\n              className={classNames.collapseButton}\r\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\r\n            />\r\n          </div>\r\n        ) : null}\r\n        <GroupSpacer indentWidth={indentWidth} count={groupNestingDepth! - 1} />\r\n        {columns.map((column: IColumn, columnIndex: number) => {\r\n          const _isDraggable = columnReorderProps\r\n            ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\r\n            : false;\r\n          return [\r\n            columnReorderProps &&\r\n              (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\r\n              this._renderDropHint(columnIndex),\r\n            <DetailsColumn\r\n              column={column}\r\n              styles={column.styles}\r\n              key={column.key}\r\n              columnIndex={(showCheckbox ? 2 : 1) + columnIndex}\r\n              parentId={this._id}\r\n              isDraggable={_isDraggable}\r\n              updateDragInfo={this._updateDragInfo}\r\n              dragDropHelper={this._dragDropHelper}\r\n              onColumnClick={onColumnClick}\r\n              onColumnContextMenu={onColumnContextMenu}\r\n              // Do not render tooltips by default, but allow for override via props.\r\n              onRenderColumnHeaderTooltip={this.props.onRenderColumnHeaderTooltip}\r\n              isDropped={this._onDropIndexInfo.targetIndex === columnIndex}\r\n              cellStyleProps={this.props.cellStyleProps}\r\n              useFastIcons={useFastIcons}\r\n            />,\r\n            this._renderColumnDivider(columnIndex),\r\n          ];\r\n        })}\r\n        {columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length)}\r\n        {isSizing && (\r\n          <Layer>\r\n            <div\r\n              className={classNames.sizingOverlay}\r\n              onMouseMove={this._onSizerMouseMove}\r\n              onMouseUp={this._onSizerMouseUp}\r\n            />\r\n          </Layer>\r\n        )}\r\n      </FocusZone>\r\n    );\r\n  }\r\n\r\n  /** Set focus to the active thing in the focus area. */\r\n  public focus(): boolean {\r\n    return Boolean(this._rootComponent.current && this._rootComponent.current.focus());\r\n  }\r\n\r\n  /**\r\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\r\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\r\n   * (because drag/drop handling will only be set up if reorder props are given).\r\n   */\r\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\r\n    const { columnReorderOptions, columnReorderProps } = this.props;\r\n    return columnReorderProps || (columnReorderOptions && { ...columnReorderOptions, onColumnDragEnd: undefined });\r\n  }\r\n\r\n  private _getHeaderDragDropOptions(): IDragDropOptions {\r\n    const options = {\r\n      selectionIndex: 1,\r\n      context: { data: this, index: 0 },\r\n      canDrag: () => false,\r\n      canDrop: () => true,\r\n      onDragStart: () => undefined,\r\n      updateDropState: this._updateDroppingState,\r\n      onDrop: this._onDrop,\r\n      onDragEnd: () => undefined,\r\n      onDragOver: this._onDragOver,\r\n    };\r\n    return options;\r\n  }\r\n\r\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\r\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\r\n      this._resetDropHints();\r\n    }\r\n  };\r\n\r\n  private _isValidCurrentDropHintIndex() {\r\n    return this._currentDropHintIndex >= 0;\r\n  }\r\n\r\n  private _onDragOver = (item: any, event: DragEvent): void => {\r\n    if (this._draggedColumnIndex >= 0) {\r\n      event.stopPropagation();\r\n      this._computeDropHintToBeShown(event.clientX);\r\n    }\r\n  };\r\n\r\n  private _onDrop = (item?: any, event?: DragEvent): void => {\r\n    // Safe to assume this is defined since we're handling a drop event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n\r\n    // Target index will not get changed if draggeditem is after target item.\r\n    if (this._draggedColumnIndex >= 0 && event) {\r\n      const targetIndex =\r\n        this._draggedColumnIndex > this._currentDropHintIndex\r\n          ? this._currentDropHintIndex\r\n          : this._currentDropHintIndex - 1;\r\n      const isValidDrop = this._isValidCurrentDropHintIndex();\r\n      event.stopPropagation();\r\n      if (isValidDrop) {\r\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\r\n        this._onDropIndexInfo.targetIndex = targetIndex;\r\n\r\n        if (columnReorderProps.onColumnDrop) {\r\n          const dragDropDetails: IColumnDragDropDetails = {\r\n            draggedIndex: this._draggedColumnIndex,\r\n            targetIndex: targetIndex,\r\n          };\r\n          columnReorderProps.onColumnDrop(dragDropDetails);\r\n          // tslint:disable:deprecation\r\n        } else if (columnReorderProps.handleColumnReorder) {\r\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\r\n          // tslint:enable:deprecation\r\n        }\r\n      }\r\n    }\r\n\r\n    this._resetDropHints();\r\n    this._dropHintDetails = {};\r\n    this._draggedColumnIndex = -1;\r\n  };\r\n\r\n  /**\r\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\r\n   */\r\n  private _isCheckboxColumnHidden(): boolean {\r\n    const { selectionMode, checkboxVisibility } = this.props;\r\n\r\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\r\n  }\r\n\r\n  private _updateDragInfo = (props: { itemIndex: number }, event?: MouseEvent) => {\r\n    // Safe to assume this is defined since we're handling a drag event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n    const itemIndex = props.itemIndex;\r\n    if (itemIndex >= 0) {\r\n      // Column index is set based on the checkbox\r\n      this._draggedColumnIndex = this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\r\n      this._getDropHintPositions();\r\n      if (columnReorderProps.onColumnDragStart) {\r\n        columnReorderProps.onColumnDragStart(true);\r\n      }\r\n    } else if (event && this._draggedColumnIndex >= 0) {\r\n      this._resetDropHints();\r\n      this._draggedColumnIndex = -1;\r\n      this._dropHintDetails = {};\r\n      if (columnReorderProps.onColumnDragEnd) {\r\n        const columnDragEndLocation = this._isEventOnHeader(event);\r\n        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\r\n      }\r\n    }\r\n  };\r\n\r\n  private _resetDropHints(): void {\r\n    if (this._currentDropHintIndex >= 0) {\r\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\r\n      this._currentDropHintIndex = -1;\r\n    }\r\n  }\r\n\r\n  private _updateDropHintElement(element: HTMLElement, displayProperty: string) {\r\n    (element.childNodes[1] as HTMLElement).style.display = displayProperty;\r\n    (element.childNodes[0] as HTMLElement).style.display = displayProperty;\r\n  }\r\n\r\n  private _getDropHintPositions = (): void => {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    // Safe to assume this is defined since we're handling a drag/drop event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n    let prevX = 0;\r\n    let prevMid = 0;\r\n    let prevRef: HTMLElement;\r\n    const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\r\n    const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\r\n\r\n    for (let i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\r\n      if (this._rootElement) {\r\n        const dropHintElement = this._rootElement.querySelectorAll('#columnDropHint_' + i)[0] as HTMLElement;\r\n        if (dropHintElement) {\r\n          if (i === frozenColumnCountFromStart) {\r\n            prevX = dropHintElement.offsetLeft;\r\n            prevMid = dropHintElement.offsetLeft;\r\n            prevRef = dropHintElement;\r\n          } else {\r\n            const newMid = (dropHintElement.offsetLeft + prevX!) / 2;\r\n            this._dropHintDetails[i - 1] = {\r\n              originX: prevX,\r\n              startX: prevMid!,\r\n              endX: newMid,\r\n              dropHintElementRef: prevRef!,\r\n            };\r\n            prevMid = newMid;\r\n            prevRef = dropHintElement;\r\n            prevX = dropHintElement.offsetLeft;\r\n            if (i === columns.length - frozenColumnCountFromEnd) {\r\n              this._dropHintDetails[i] = {\r\n                originX: prevX,\r\n                startX: prevMid!,\r\n                endX: dropHintElement.offsetLeft,\r\n                dropHintElementRef: prevRef,\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\r\n   */\r\n  private _computeDropHintToBeShown = (clientX: number): void => {\r\n    const isRtl = getRTL(this.props.theme);\r\n    if (this._rootElement) {\r\n      const clientRect = this._rootElement.getBoundingClientRect();\r\n      const headerOriginX = clientRect.left;\r\n      const eventXRelativePosition = clientX - headerOriginX;\r\n      const currentDropHintIndex = this._currentDropHintIndex;\r\n      if (this._isValidCurrentDropHintIndex()) {\r\n        if (\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex!].startX,\r\n            this._dropHintDetails[currentDropHintIndex!].endX,\r\n          )\r\n        ) {\r\n          return;\r\n        }\r\n      }\r\n      const { columns = NO_COLUMNS } = this.props;\r\n      // Safe to assume this is defined since we're handling a drag/drop event\r\n      const columnReorderProps = this._getColumnReorderProps()!;\r\n      const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\r\n      const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\r\n\r\n      const currentIndex: number = frozenColumnCountFromStart;\r\n      const lastValidColumn = columns.length - frozenColumnCountFromEnd;\r\n      let indexToUpdate = -1;\r\n      if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[currentIndex].endX)) {\r\n        indexToUpdate = currentIndex;\r\n      } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[lastValidColumn].startX)) {\r\n        indexToUpdate = lastValidColumn;\r\n      } else if (this._isValidCurrentDropHintIndex()) {\r\n        if (\r\n          this._dropHintDetails[currentDropHintIndex! + 1] &&\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex! + 1].startX,\r\n            this._dropHintDetails[currentDropHintIndex! + 1].endX,\r\n          )\r\n        ) {\r\n          indexToUpdate = currentDropHintIndex! + 1;\r\n        } else if (\r\n          this._dropHintDetails[currentDropHintIndex! - 1] &&\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex! - 1].startX,\r\n            this._dropHintDetails[currentDropHintIndex! - 1].endX,\r\n          )\r\n        ) {\r\n          indexToUpdate = currentDropHintIndex! - 1;\r\n        }\r\n      }\r\n      if (indexToUpdate === -1) {\r\n        let startIndex = frozenColumnCountFromStart;\r\n        let endIndex = lastValidColumn;\r\n        while (startIndex < endIndex) {\r\n          const middleIndex = Math.ceil((endIndex + startIndex!) / 2);\r\n          if (\r\n            _liesBetween(\r\n              isRtl,\r\n              eventXRelativePosition,\r\n              this._dropHintDetails[middleIndex].startX,\r\n              this._dropHintDetails[middleIndex].endX,\r\n            )\r\n          ) {\r\n            indexToUpdate = middleIndex;\r\n            break;\r\n          } else if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\r\n            endIndex = middleIndex;\r\n          } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\r\n            startIndex = middleIndex;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (indexToUpdate === this._draggedColumnIndex || indexToUpdate === this._draggedColumnIndex + 1) {\r\n        if (this._isValidCurrentDropHintIndex()) {\r\n          this._resetDropHints();\r\n        }\r\n      } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\r\n        this._resetDropHints();\r\n        this._updateDropHintElement(this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\r\n        this._currentDropHintIndex = indexToUpdate;\r\n      }\r\n    }\r\n  };\r\n\r\n  private _isEventOnHeader(event: MouseEvent): ColumnDragEndLocation | undefined {\r\n    if (this._rootElement) {\r\n      const clientRect = this._rootElement.getBoundingClientRect();\r\n      if (\r\n        event.clientX > clientRect.left &&\r\n        event.clientX < clientRect.right &&\r\n        event.clientY > clientRect.top &&\r\n        event.clientY < clientRect.bottom\r\n      ) {\r\n        return ColumnDragEndLocation.header;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _renderColumnSizer = ({ columnIndex }: IDetailsColumnProps): JSX.Element | null => {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    const column = columns[columnIndex];\r\n    const { columnResizeDetails } = this.state;\r\n    const classNames = this._classNames;\r\n\r\n    return column.isResizable ? (\r\n      <div\r\n        key={`${column.key}_sizer`}\r\n        aria-hidden={true}\r\n        role=\"button\"\r\n        data-is-focusable={false}\r\n        onClick={_stopPropagation}\r\n        data-sizer-index={columnIndex}\r\n        onBlur={this._onSizerBlur}\r\n        className={css(\r\n          classNames.cellSizer,\r\n          columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd,\r\n          {\r\n            [classNames.cellIsResizing]: columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\r\n          },\r\n        )}\r\n        onDoubleClick={this._onSizerDoubleClick.bind(this, columnIndex)}\r\n      />\r\n    ) : null;\r\n  };\r\n\r\n  private _renderColumnDivider(columnIndex: number): JSX.Element | null {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    const column = columns[columnIndex];\r\n    const { onRenderDivider } = column;\r\n    return onRenderDivider\r\n      ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer)\r\n      : this._renderColumnSizer({ column, columnIndex });\r\n  }\r\n\r\n  private _renderDropHint(dropHintIndex: number): JSX.Element {\r\n    const classNames = this._classNames;\r\n    const IconComponent = this.props.useFastIcons ? FontIcon : Icon;\r\n    return (\r\n      <div key={'dropHintKey'} className={classNames.dropHintStyle} id={`columnDropHint_${dropHintIndex}`}>\r\n        <IconComponent\r\n          key={`dropHintCircleKey`}\r\n          aria-hidden={true}\r\n          data-is-focusable={false}\r\n          data-sizer-index={dropHintIndex}\r\n          className={classNames.dropHintCaretStyle}\r\n          iconName={'CircleShapeSolid'}\r\n        />\r\n        <div\r\n          key={`dropHintLineKey`}\r\n          aria-hidden={true}\r\n          data-is-focusable={false}\r\n          data-sizer-index={dropHintIndex}\r\n          className={classNames.dropHintLineStyle}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: ITooltipHostProps): JSX.Element => {\r\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\r\n  };\r\n\r\n  /**\r\n   * double click on the column sizer will auto ajust column width\r\n   * to fit the longest content among current rendered rows.\r\n   *\r\n   * @param columnIndex - index of the column user double clicked\r\n   * @param ev - mouse double click event\r\n   */\r\n  private _onSizerDoubleClick(columnIndex: number, ev: React.MouseEvent<HTMLElement>): void {\r\n    const { onColumnAutoResized, columns = NO_COLUMNS } = this.props;\r\n    if (onColumnAutoResized) {\r\n      onColumnAutoResized(columns[columnIndex], columnIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the select all toggle is clicked.\r\n   */\r\n  private _onSelectAllClicked = (): void => {\r\n    const { selection } = this.props;\r\n\r\n    if (selection) {\r\n      selection.toggleAllSelected();\r\n    }\r\n  };\r\n\r\n  private _onRootMouseDown = (ev: MouseEvent): void => {\r\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\r\n    const columnIndex = Number(columnIndexAttr);\r\n    const { columns = NO_COLUMNS } = this.props;\r\n\r\n    if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\r\n      // Ignore anything except the primary button.\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      columnResizeDetails: {\r\n        columnIndex: columnIndex,\r\n        columnMinWidth: columns[columnIndex].calculatedWidth!,\r\n        originX: ev.clientX,\r\n      },\r\n    });\r\n\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  };\r\n\r\n  private _onRootMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { columnResizeDetails, isSizing } = this.state;\r\n\r\n    if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\r\n      this.setState({ isSizing: true });\r\n    }\r\n  };\r\n\r\n  private _onRootRef = (focusZone: FocusZone): void => {\r\n    if (focusZone) {\r\n      // Need to resolve the actual DOM node, not the component.\r\n      // The element itself will be used for drag/drop and focusing.\r\n      this._rootElement = findDOMNode(focusZone) as HTMLElement;\r\n    } else {\r\n      this._rootElement = undefined;\r\n    }\r\n  };\r\n\r\n  private _onRootKeyDown = (ev: KeyboardEvent): void => {\r\n    const { columnResizeDetails, isSizing } = this.state;\r\n    const { columns = NO_COLUMNS, onColumnResized } = this.props;\r\n\r\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\r\n\r\n    if (!columnIndexAttr || isSizing) {\r\n      return;\r\n    }\r\n\r\n    const columnIndex = Number(columnIndexAttr);\r\n\r\n    if (!columnResizeDetails) {\r\n      // tslint:disable-next-line:deprecation\r\n      if (ev.which === KeyCodes.enter) {\r\n        this.setState({\r\n          columnResizeDetails: {\r\n            columnIndex: columnIndex,\r\n            columnMinWidth: columns[columnIndex].calculatedWidth!,\r\n          },\r\n        });\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n      }\r\n    } else {\r\n      let increment: number | undefined;\r\n\r\n      // tslint:disable-next-line:deprecation\r\n      if (ev.which === KeyCodes.enter) {\r\n        this.setState({\r\n          columnResizeDetails: undefined,\r\n        });\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n        // tslint:disable-next-line:deprecation\r\n      } else if (ev.which === KeyCodes.left) {\r\n        increment = getRTL(this.props.theme) ? 1 : -1;\r\n        // tslint:disable-next-line:deprecation\r\n      } else if (ev.which === KeyCodes.right) {\r\n        increment = getRTL(this.props.theme) ? -1 : 1;\r\n      }\r\n\r\n      if (increment) {\r\n        if (!ev.shiftKey) {\r\n          increment *= 10;\r\n        }\r\n\r\n        this.setState({\r\n          columnResizeDetails: {\r\n            ...columnResizeDetails,\r\n            columnMinWidth: columnResizeDetails.columnMinWidth + increment,\r\n          },\r\n        });\r\n\r\n        if (onColumnResized) {\r\n          onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\r\n        }\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * mouse move event handler in the header\r\n   * it will set isSizing state to true when user clicked on the sizer and move the mouse.\r\n   *\r\n   * @param ev - mouse move event\r\n   */\r\n  private _onSizerMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const {\r\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\r\n      // but firefox doesn't support it, so we set the default value when it is not defined.\r\n      buttons,\r\n    } = ev;\r\n    const { onColumnIsSizingChanged, onColumnResized, columns = NO_COLUMNS } = this.props;\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\r\n      // cancel mouse down event and return early when the primary button is not pressed\r\n      this._onSizerMouseUp(ev);\r\n      return;\r\n    }\r\n\r\n    if (ev.clientX !== columnResizeDetails!.originX) {\r\n      if (onColumnIsSizingChanged) {\r\n        onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], true);\r\n      }\r\n    }\r\n\r\n    if (onColumnResized) {\r\n      let movement = ev.clientX - columnResizeDetails!.originX!;\r\n\r\n      if (getRTL(this.props.theme)) {\r\n        movement = -movement;\r\n      }\r\n\r\n      onColumnResized(\r\n        columns[columnResizeDetails!.columnIndex],\r\n        columnResizeDetails!.columnMinWidth + movement,\r\n        columnResizeDetails!.columnIndex,\r\n      );\r\n    }\r\n  };\r\n\r\n  private _onSizerBlur = (ev: React.FocusEvent<HTMLElement>): void => {\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    if (columnResizeDetails) {\r\n      this.setState({\r\n        columnResizeDetails: undefined,\r\n        isSizing: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * mouse up event handler in the header\r\n   * clear the resize related state.\r\n   * This is to ensure we can catch double click event\r\n   *\r\n   * @param ev - mouse up event\r\n   */\r\n  private _onSizerMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { columns = NO_COLUMNS, onColumnIsSizingChanged } = this.props;\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    this.setState({\r\n      columnResizeDetails: undefined,\r\n      isSizing: false,\r\n    });\r\n\r\n    if (onColumnIsSizingChanged) {\r\n      onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], false);\r\n    }\r\n  };\r\n\r\n  private _onSelectionChanged(): void {\r\n    const isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\r\n\r\n    if (this.state.isAllSelected !== isAllSelected) {\r\n      this.setState({\r\n        isAllSelected: isAllSelected,\r\n      });\r\n    }\r\n  }\r\n\r\n  private _onToggleCollapseAll = (): void => {\r\n    const { onToggleCollapseAll } = this.props;\r\n    const newCollapsed = !this.state.isAllCollapsed;\r\n    this.setState({\r\n      isAllCollapsed: newCollapsed,\r\n    });\r\n    if (onToggleCollapseAll) {\r\n      onToggleCollapseAll(newCollapsed);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _liesBetween(rtl: boolean, target: number, left: number, right: number): boolean {\r\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\r\n}\r\nfunction _isBefore(rtl: boolean, a: number, b: number): boolean {\r\n  return rtl ? a >= b : a <= b;\r\n}\r\nfunction _isAfter(rtl: boolean, a: number, b: number): boolean {\r\n  return rtl ? a <= b : a >= b;\r\n}\r\n\r\nfunction _stopPropagation(ev: React.MouseEvent<HTMLElement>): void {\r\n  ev.stopPropagation();\r\n}\r\n","import * as React from 'react';\r\nimport { styled } from '../../Utilities';\r\nimport {\r\n  IDetailsHeaderProps,\r\n  IDetailsHeaderBaseProps,\r\n  IDetailsHeaderStyleProps,\r\n  IDetailsHeaderStyles,\r\n} from './DetailsHeader.types';\r\nimport { DetailsHeaderBase } from './DetailsHeader.base';\r\nimport { getStyles } from './DetailsHeader.styles';\r\n\r\nexport { IDetailsHeaderProps, IDetailsHeaderBaseProps };\r\n\r\nexport const DetailsHeader: React.FunctionComponent<IDetailsHeaderBaseProps> = styled<\r\n  IDetailsHeaderBaseProps,\r\n  IDetailsHeaderStyleProps,\r\n  IDetailsHeaderStyles\r\n>(DetailsHeaderBase, getStyles, undefined, { scope: 'DetailsHeader' });\r\n","import * as React from 'react';\nimport { IColumn } from './DetailsList.types';\nimport { css } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    columnStartIndex,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    onRenderItemColumn,\n    getCellValueKey,\n    cellsByColumn,\n    enableUpdateAnimations,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map((column, columnIndex) => {\n        const width: string | number =\n          typeof column.calculatedWidth === 'undefined'\n            ? 'auto'\n            : column.calculatedWidth +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n        const { onRender = onRenderItemColumn, getValueKey = getCellValueKey } = column;\n        const cellContentsRender =\n          cellsByColumn && column.key in cellsByColumn\n            ? cellsByColumn[column.key]\n            : onRender\n            ? onRender(item, itemIndex, column)\n            : getCellText(item, column);\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        // generate a key that auto-dirties when content changes, to force the container to re-render,\n        // to trigger animation\n        const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n        return (\n          <div\n            key={key}\n            role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n            aria-readonly\n            aria-colindex={columnIndex + columnStartIndex + 1}\n            className={css(\n              column.className,\n              column.isMultiline && rowClassNames.isMultiline,\n              column.isRowHeader && rowClassNames.isRowHeader,\n              rowClassNames.cell,\n              column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n              showAnimation && rowClassNames.cellAnimation,\n            )}\n            style={{ width }}\n            data-automationid=\"DetailsRowCell\"\n            data-automation-key={column.key}\n          >\n            {cellContentsRender}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  IDisposable,\n  css,\n  shallowCompare,\n  getNativeProps,\n  divProperties,\n} from '../../Utilities';\nimport { IColumn, CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection, IFocusZone } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { IDetailsRowBaseProps } from './DetailsRow.types';\nimport { IDetailsRowCheckProps } from './DetailsRowCheck.types';\nimport { IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport { classNamesFunction } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { IProcessedStyleSet } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowStyleProps, IDetailsRowStyles>();\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n  isSelectionModal: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsRowBase extends React.Component<IDetailsRowBaseProps, IDetailsRowState> {\n  private _events: EventGroup;\n  private _root: HTMLElement | undefined;\n  private _cellMeasurer = React.createRef<HTMLSpanElement>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _droppingClassNames: string;\n  /** Whether this.props.onDidMount has been called */\n  private _onDidMountCalled: boolean;\n  private _dragDropSubscription: IDisposable;\n\n  private _classNames: IProcessedStyleSet<IDetailsRowStyles>;\n  private _rowClassNames: IDetailsRowFieldsProps['rowClassNames'];\n\n  constructor(props: IDetailsRowBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      selectionState: this._getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false,\n    };\n\n    this._droppingClassNames = '';\n  }\n\n  public componentDidMount(): void {\n    const { dragDropHelper } = this.props;\n\n    if (dragDropHelper) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root as HTMLElement,\n        this._events,\n        this._getRowDragDropOptions(),\n      );\n    }\n\n    this._events.on(this.props.selection, SELECTION_CHANGE, this._onSelectionChanged);\n\n    if (this.props.onDidMount && this.props.item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      this.props.onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IDetailsRowBaseProps) {\n    const state = this.state;\n    const { item, onDidMount } = this.props;\n    const { columnMeasureInfo } = state;\n\n    if (\n      this.props.itemIndex !== previousProps.itemIndex ||\n      this.props.item !== previousProps.item ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root as HTMLElement,\n          this._events,\n          this._getRowDragDropOptions(),\n        );\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      const newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: undefined,\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { item, onWillUnmount } = this.props;\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IDetailsRowBaseProps): void {\n    this.setState({\n      selectionState: this._getSelectionState(newProps),\n    });\n  }\n\n  public shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean {\n    if (this.props.useReducedRowRenderer) {\n      const newSelectionState = this._getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      columns = NO_COLUMNS,\n      dragDropEvents,\n      item,\n      itemIndex,\n      onRenderCheck = this._onRenderCheck,\n      onRenderDetailsCheckbox,\n      onRenderItemColumn,\n      getCellValueKey,\n      selectionMode,\n      rowWidth = 0,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      rowFieldsAs: RowFields = DetailsRowFields,\n      selection,\n      indentWidth,\n      enableUpdateAnimations,\n      compact,\n      theme,\n      styles,\n      cellsByColumn,\n      groupNestingDepth,\n      useFastIcons = true,\n      cellStyleProps,\n    } = this.props;\n    const { columnMeasureInfo, isDropping } = this.state;\n    const { isSelected = false, isSelectionModal = false } = this.state.selectionState;\n    const isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    const droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    const ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    const canSelect = !!selection && selection.canSelectItem(item, itemIndex);\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    const ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n\n    this._classNames = {\n      ...this._classNames,\n      ...getClassNames(styles, {\n        theme: theme!,\n        isSelected,\n        canSelect: !isContentUnselectable,\n        anySelected: isSelectionModal,\n        checkboxCellClassName,\n        droppingClassName,\n        className,\n        compact,\n        enableUpdateAnimations,\n        cellStyleProps,\n      }),\n    };\n\n    const rowClassNames: IDetailsRowFieldsProps['rowClassNames'] = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields,\n    };\n\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    const rowFields = (\n      <RowFields\n        rowClassNames={this._rowClassNames}\n        cellsByColumn={cellsByColumn}\n        columns={columns}\n        item={item}\n        itemIndex={itemIndex}\n        columnStartIndex={showCheckbox ? 1 : 0}\n        onRenderItemColumn={onRenderItemColumn}\n        getCellValueKey={getCellValueKey}\n        enableUpdateAnimations={enableUpdateAnimations}\n        cellStyleProps={cellStyleProps}\n      />\n    );\n\n    return (\n      <FocusZone\n        data-is-focusable={true}\n        {...getNativeProps(this.props, divProperties)}\n        {...(typeof isDraggable === 'boolean'\n          ? {\n              'data-is-draggable': isDraggable, // This data attribute is used by some host applications.\n              draggable: isDraggable,\n            }\n          : {})}\n        direction={FocusZoneDirection.horizontal}\n        ref={this._onRootRef}\n        componentRef={this._focusZone}\n        role=\"row\"\n        aria-label={ariaLabel}\n        aria-describedby={ariaDescribedBy}\n        className={this._classNames.root}\n        data-selection-index={itemIndex}\n        data-item-index={itemIndex}\n        aria-rowindex={itemIndex + 1}\n        data-automationid=\"DetailsRow\"\n        style={{ minWidth: rowWidth }}\n        aria-selected={ariaSelected}\n        allowFocusRoot={true}\n      >\n        {showCheckbox && (\n          <div role=\"gridcell\" aria-colindex={1} data-selection-toggle={true} className={this._classNames.checkCell}>\n            {onRenderCheck({\n              selected: isSelected,\n              anySelected: isSelectionModal,\n              'aria-label': checkButtonAriaLabel,\n              canSelect,\n              compact,\n              className: this._classNames.check,\n              theme,\n              isVisible: checkboxVisibility === CheckboxVisibility.always,\n              onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n              useFastIcons,\n            })}\n          </div>\n        )}\n\n        <GroupSpacer\n          indentWidth={indentWidth}\n          count={groupNestingDepth! - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)}\n        />\n\n        {item && rowFields}\n        {columnMeasureInfo && (\n          <span\n            role=\"presentation\"\n            className={css(this._classNames.cellMeasurer, this._classNames.cell)}\n            ref={this._cellMeasurer}\n          >\n            <RowFields\n              rowClassNames={this._rowClassNames}\n              columns={[columnMeasureInfo.column]}\n              item={item}\n              itemIndex={itemIndex}\n              columnStartIndex={(showCheckbox ? 1 : 0) + columns.length}\n              onRenderItemColumn={onRenderItemColumn}\n              getCellValueKey={getCellValueKey}\n            />\n          </span>\n        )}\n\n        <span\n          role=\"checkbox\"\n          className={this._classNames.checkCover}\n          aria-checked={isSelected}\n          data-selection-toggle={true}\n        />\n      </FocusZone>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void): void {\n    const { columns = NO_COLUMNS } = this.props;\n    const column: IColumn = { ...columns[index] };\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone,\n      },\n    });\n  }\n\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    return !!this._focusZone.current && this._focusZone.current.focus(forceIntoFirstElement);\n  }\n\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\n    return <DetailsRowCheck {...props} />;\n  }\n\n  private _getSelectionState(props: IDetailsRowBaseProps): IDetailsRowSelectionState {\n    const { itemIndex, selection } = props;\n\n    return {\n      isSelected: !!selection && selection.isIndexSelected(itemIndex),\n      isSelectionModal: !!selection && !!selection.isModal && selection.isModal(),\n    };\n  }\n\n  private _onSelectionChanged = (): void => {\n    const selectionState = this._getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({\n        selectionState: selectionState,\n      });\n    }\n  };\n\n  private _onRootRef = (focusZone: FocusZone): void => {\n    if (focusZone) {\n      // Need to resolve the actual DOM node, not the component.\n      // The element itself will be used for drag/drop and focusing.\n      this._root = ReactDOM.findDOMNode(focusZone) as HTMLElement;\n    } else {\n      this._root = undefined;\n    }\n  };\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    const { item, itemIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents!.onDrop,\n      onDragEnd: dragDropEvents!.onDragEnd,\n    };\n\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @param newValue - New isDropping state value\n   * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents!.onDragLeave) {\n        dragDropEvents!.onDragLeave(item, event);\n      }\n    } else if (dragDropEvents!.onDragEnter) {\n      this._droppingClassNames = dragDropEvents!.onDragEnter(item, event);\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ isDropping: newValue });\n    }\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IDetailsRowProps, IDetailsRowBaseProps, IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport { DetailsRowBase } from './DetailsRow.base';\nimport { getStyles } from './DetailsRow.styles';\n\nexport { IDetailsRowProps, IDetailsRowBaseProps };\n\nexport const DetailsRow: React.FunctionComponent<IDetailsRowBaseProps> = styled<\n  IDetailsRowBaseProps,\n  IDetailsRowStyleProps,\n  IDetailsRowStyles\n>(DetailsRowBase, getStyles, undefined, {\n  scope: 'DetailsRow',\n});\n","import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  KeyCodes,\n  elementContains,\n  findScrollableParent,\n  getParent,\n  getDocument,\n  getWindow,\n  isElementTabbable,\n  css,\n  initializeComponentRef,\n  FocusRects,\n} from '../../Utilities';\nimport { ISelection, SelectionMode, IObjectWithKey } from './interfaces';\n\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\n\nconst SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nconst SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\nconst SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZone {\n  /**\n   * Method to ignore subsequent focus.\n   */\n  ignoreNextFocus: () => void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneProps extends React.ClassAttributes<SelectionZone> {\n  /**\n   * Reference to the component interface.\n   */\n  componentRef?: () => void;\n  /**\n   * Required {@link ISelection} instance bound to the {@link SelectionZone}.\n   */\n  selection: ISelection;\n  /**\n   * @deprecated No longer in use, focus is now managed by {@link FocusZone}.\n   */\n  layout?: {};\n  /**\n   * The mode of Selection, where the value is one of\n   * 'none', 'single', or 'multiple'.\n   *\n   * @defaultvalue {@link SelectionMode.multiple}\n   */\n  selectionMode?: SelectionMode;\n  /**\n   * If true, selection is preserved on outer click.\n   */\n  selectionPreservedOnEmptyClick?: boolean;\n  /**\n   * If true, disables automatic selection on input elements.\n   */\n  disableAutoSelectOnInputElements?: boolean;\n  /**\n   * If true, modal selection is enabled on touch event.\n   */\n  enterModalOnTouch?: boolean;\n  /**\n   * Determines if an item is selected on focus.\n   *\n   * @defaultvalue true\n   */\n  isSelectedOnFocus?: boolean;\n  /**\n   * Optional callback for when an item is\n   * invoked via ENTER or double-click.\n   */\n  onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;\n  /**\n   * Optional callback for when an\n   * item's contextual menu action occurs.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneState {\n  isModal: boolean | undefined;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport class SelectionZone extends React.Component<ISelectionZoneProps, ISelectionZoneState> {\n  public static defaultProps = {\n    isSelectedOnFocus: true,\n    selectionMode: SelectionMode.multiple,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _isCtrlPressed: boolean;\n  private _isShiftPressed: boolean;\n  private _isMetaPressed: boolean;\n  private _isTabPressed: boolean;\n  private _shouldHandleFocus: boolean;\n  private _shouldHandleFocusTimeoutId: number | undefined;\n  private _isTouch: boolean;\n  private _isTouchTimeoutId: number | undefined;\n\n  public static getDerivedStateFromProps(\n    nextProps: ISelectionZoneProps,\n    prevState: ISelectionZoneState,\n  ): ISelectionZoneState {\n    const isModal = nextProps.selection.isModal && nextProps.selection.isModal();\n\n    return {\n      ...prevState,\n      isModal,\n    };\n  }\n\n  constructor(props: ISelectionZoneProps) {\n    super(props);\n\n    this._events = new EventGroup(this);\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    const { selection } = this.props;\n\n    // Reflect the initial modal state of selection into the state.\n    const isModal = selection.isModal && selection.isModal();\n\n    this.state = {\n      isModal,\n    };\n  }\n\n  public componentDidMount(): void {\n    const win = getWindow(this._root.current);\n\n    // Track the latest modifier keys globally.\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\n    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\n    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);\n\n    // Subscribe to the selection to keep modal state updated.\n    this._events.on(this.props.selection, 'change', this._onSelectionChange);\n  }\n\n  public render(): JSX.Element {\n    const { isModal } = this.state;\n\n    return (\n      <div\n        className={css('ms-SelectionZone', {\n          'ms-SelectionZone--modal': !!isModal,\n        })}\n        ref={this._root}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        onKeyDownCapture={this._onKeyDownCapture}\n        onClick={this._onClick}\n        role=\"presentation\"\n        onDoubleClick={this._onDoubleClick}\n        onContextMenu={this._onContextMenu}\n        onMouseDownCapture={this._onMouseDownCapture}\n        onFocusCapture={this._onFocus}\n        data-selection-is-modal={isModal ? true : undefined}\n      >\n        {this.props.children}\n        <FocusRects />\n      </div>\n    );\n  }\n\n  public componentDidUpdate(previousProps: ISelectionZoneProps): void {\n    const { selection } = this.props;\n\n    if (selection !== previousProps.selection) {\n      // Whenever selection changes, update the subscripton to keep modal state updated.\n      this._events.off(previousProps.selection);\n      this._events.on(selection, 'change', this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  /**\n   * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n   * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\n   * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n   * focus event that occurs. This method does that.\n   */\n  public ignoreNextFocus = (): void => {\n    this._handleNextFocus(false);\n  };\n\n  private _onSelectionChange = (): void => {\n    const { selection } = this.props;\n\n    const isModal = selection.isModal && selection.isModal();\n\n    this.setState({\n      isModal,\n    });\n  };\n\n  private _onMouseDownCapture = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    if (document.activeElement !== target && !elementContains(document.activeElement as HTMLElement, target)) {\n      this.ignoreNextFocus();\n      return;\n    }\n\n    if (!elementContains(target, this._root.current)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n        this.ignoreNextFocus();\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  /**\n   * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n   * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n   * specially.\n   */\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\n      const isToggle = this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n      const itemRoot = this._findItemRoot(target);\n\n      if (!isToggle && itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (isToggleModifierPressed) {\n          // set anchor only.\n          selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n          if (this.props.enterModalOnTouch && this._isTouch && selection.setModal) {\n            selection.setModal(true);\n            this._setIsTouch(false);\n          }\n        } else {\n          if (this.props.isSelectedOnFocus) {\n            this._onItemSurfaceClick(ev, index);\n          }\n        }\n      }\n    }\n\n    this._handleNextFocus(false);\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    // No-op if selection is disabled\n    if (this._isSelectionDisabled(target)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        break;\n      } else if (itemRoot) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (\n          (target === itemRoot || this._shouldAutoSelect(target)) &&\n          !this._isShiftPressed &&\n          !this._isCtrlPressed &&\n          !this._isMetaPressed\n        ) {\n          this._onInvokeMouseDown(ev, this._getItemIndex(itemRoot));\n          break;\n        } else if (\n          this.props.disableAutoSelectOnInputElements &&\n          (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')\n        ) {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onTouchStartCapture = (ev: React.TouchEvent<HTMLElement>): void => {\n    this._setIsTouch(true);\n  };\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        if (!isSelectionDisabled) {\n          this._onToggleAllClick(ev);\n        }\n        break;\n      } else if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          if (!isSelectionDisabled) {\n            if (this._isShiftPressed) {\n              this._onItemSurfaceClick(ev, index);\n            } else {\n              this._onToggleClick(ev, index);\n            }\n          }\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          // Items should be invokable even if selection is disabled.\n          this._onInvokeClick(ev, index);\n          break;\n        } else if (target === itemRoot) {\n          if (!isSelectionDisabled) {\n            this._onItemSurfaceClick(ev, index);\n          }\n          break;\n        } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n\n    const { onItemContextMenu, selection } = this.props;\n    if (onItemContextMenu) {\n      const itemRoot = this._findItemRoot(target);\n\n      if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        this._onInvokeMouseDown(ev, index);\n\n        const skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\n\n        // In order to keep back compat, if the value here is undefined, then we should still\n        // call preventDefault(). Only in the case where true is explicitly returned should\n        // the call be skipped.\n        if (!skipPreventDefault) {\n          ev.preventDefault();\n        }\n      }\n    }\n  };\n\n  private _isSelectionDisabled(target: HTMLElement): boolean {\n    if (this._getSelectionMode() === SelectionMode.none) {\n      return true;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\n        return true;\n      }\n      target = getParent(target) as HTMLElement;\n    }\n\n    return false;\n  }\n\n  /**\n   * In multi selection, if you double click within an item's root (but not within the invoke element or\n   * input elements), we should execute the invoke handler.\n   */\n  private _onDoubleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    const { onItemInvoked } = this.props;\n    const itemRoot = this._findItemRoot(target);\n\n    if (itemRoot && onItemInvoked && !this._isInputElement(target)) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (\n          this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          break;\n        } else if (target === itemRoot) {\n          this._onInvokeClick(ev, index);\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onKeyDownCapture = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    this._handleNextFocus(true);\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean | undefined => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    const { selection } = this.props;\n    const isSelectAllKey = ev.which === KeyCodes.a && (this._isCtrlPressed || this._isMetaPressed);\n    const isClearSelectionKey = ev.which === KeyCodes.escape;\n\n    // Ignore key downs from input elements.\n    if (this._isInputElement(target)) {\n      // A key was pressed while an item in this zone was focused.\n      return;\n    }\n\n    const selectionMode = this._getSelectionMode();\n\n    // If ctrl-a is pressed, select all (if all are not already selected.)\n    if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(true);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    // If escape is pressed, clear selection (if any are selected.)\n    if (isClearSelectionKey && selection.getSelectedCount() > 0) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(false);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    const itemRoot = this._findItemRoot(target);\n\n    // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n    if (itemRoot) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n          // so we can no-op for any keydowns in this case.\n          break;\n        } else if (this._shouldAutoSelect(target)) {\n          if (!isSelectionDisabled) {\n            // If the event went to an element which should trigger auto-select, select it and then let\n            // the default behavior kick in.\n            this._onInvokeMouseDown(ev, index);\n          }\n          break;\n        } else if (\n          (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) &&\n          (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')\n        ) {\n          return false;\n        } else if (target === itemRoot) {\n          if (ev.which === KeyCodes.enter) {\n            // Items should be invokable even if selection is disabled.\n            this._onInvokeClick(ev, index);\n            ev.preventDefault();\n            return;\n          } else if (ev.which === KeyCodes.space) {\n            if (!isSelectionDisabled) {\n              this._onToggleClick(ev, index);\n            }\n            ev.preventDefault();\n            return;\n          }\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n    }\n  };\n\n  private _onToggleAllClick(ev: React.MouseEvent<HTMLElement>): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleAllSelected();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  }\n\n  private _onToggleClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    selection.setChangeEvents(false);\n\n    if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {\n      selection.setModal(true);\n      this._setIsTouch(false);\n    }\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleIndexSelected(index);\n    } else if (selectionMode === SelectionMode.single) {\n      const isSelected = selection.isIndexSelected(index);\n      const isModal = selection.isModal && selection.isModal();\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, !isSelected, true);\n      if (isModal && selection.setModal) {\n        // Since the above call to setAllSelected(false) clears modal state,\n        // restore it. This occurs because the SelectionMode of the Selection\n        // may differ from the SelectionZone.\n        selection.setModal(true);\n      }\n    } else {\n      selection.setChangeEvents(true);\n      return;\n    }\n\n    selection.setChangeEvents(true);\n\n    ev.stopPropagation();\n\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n    // for checkboxes if you use a checkbox for the toggle.\n  }\n\n  private _onInvokeClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection, onItemInvoked } = this.props;\n\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onItemSurfaceClick(ev: React.SyntheticEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (this._isShiftPressed && !this._isTabPressed) {\n        selection.selectToIndex(index, !isToggleModifierPressed);\n      } else if (isToggleModifierPressed) {\n        selection.toggleIndexSelected(index);\n      } else {\n        this._clearAndSelectIndex(index);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      this._clearAndSelectIndex(index);\n    }\n  }\n\n  private _onInvokeMouseDown(\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    index: number,\n  ): void {\n    const { selection } = this.props;\n\n    // Only do work if item is not selected.\n    if (selection.isIndexSelected(index)) {\n      return;\n    }\n\n    this._clearAndSelectIndex(index);\n  }\n\n  /**\n   * To avoid high startup cost of traversing the DOM on component mount,\n   * defer finding the scrollable parent until a click interaction.\n   *\n   * The styles will probably already calculated since we're running in a click handler,\n   * so this is less likely to cause layout thrashing then doing it in mount.\n   */\n  private _findScrollParentAndTryClearOnEmptyClick(ev: MouseEvent) {\n    const scrollParent = findScrollableParent(this._root.current);\n    // unbind this handler and replace binding with a binding on the actual scrollable parent\n    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);\n\n    // If we clicked inside the scrollable parent, call through to the handler on this click.\n    if ((scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target)) || scrollParent === ev.target) {\n      this._tryClearOnEmptyClick(ev);\n    }\n  }\n\n  private _tryClearOnEmptyClick(ev: MouseEvent): void {\n    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target as HTMLElement)) {\n      this.props.selection.setAllSelected(false);\n    }\n  }\n\n  private _clearAndSelectIndex(index: number): void {\n    const { selection } = this.props;\n    const isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n\n    if (!isAlreadySingleSelected) {\n      const isModal = selection.isModal && selection.isModal();\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, true, true);\n      if (isModal || (this.props.enterModalOnTouch && this._isTouch)) {\n        if (selection.setModal) {\n          selection.setModal(true);\n        }\n        if (this._isTouch) {\n          this._setIsTouch(false);\n        }\n      }\n      selection.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * We need to track the modifier key states so that when focus events occur, which do not contain\n   * modifier states in the Event object, we know how to behave.\n   */\n  private _updateModifiers(ev: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n\n    const keyCode = (ev as React.KeyboardEvent<HTMLElement>).keyCode;\n    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;\n  }\n\n  private _findItemRoot(target: HTMLElement): HTMLElement | undefined {\n    const { selection } = this.props;\n\n    while (target !== this._root.current) {\n      const indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n      const index = Number(indexValue);\n\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n\n    if (target === this._root.current) {\n      return undefined;\n    }\n\n    return target;\n  }\n\n  private _getItemIndex(itemRoot: HTMLElement): number {\n    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));\n  }\n\n  private _shouldAutoSelect(element: HTMLElement): boolean {\n    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\n  }\n\n  private _hasAttribute(element: HTMLElement, attributeName: string): boolean {\n    let isToggle = false;\n\n    while (!isToggle && element !== this._root.current) {\n      isToggle = element.getAttribute(attributeName) === 'true';\n      element = getParent(element) as HTMLElement;\n    }\n\n    return isToggle;\n  }\n\n  private _isInputElement(element: HTMLElement): boolean {\n    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';\n  }\n\n  private _isNonHandledClick(element: HTMLElement): boolean {\n    const doc = getDocument();\n\n    if (doc && element) {\n      while (element && element !== doc.documentElement) {\n        if (isElementTabbable(element)) {\n          return false;\n        }\n\n        element = getParent(element) as HTMLElement;\n      }\n    }\n\n    return true;\n  }\n\n  private _handleNextFocus(handleFocus: boolean): void {\n    if (this._shouldHandleFocusTimeoutId) {\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\n      this._shouldHandleFocusTimeoutId = undefined;\n    }\n\n    this._shouldHandleFocus = handleFocus;\n\n    if (handleFocus) {\n      this._async.setTimeout(() => {\n        this._shouldHandleFocus = false;\n      }, 100);\n    }\n  }\n\n  private _setIsTouch(isTouch: boolean): void {\n    if (this._isTouchTimeoutId) {\n      this._async.clearTimeout(this._isTouchTimeoutId);\n      this._isTouchTimeoutId = undefined;\n    }\n\n    this._isTouch = true;\n\n    if (isTouch) {\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 300);\n    }\n  }\n\n  private _getSelectionMode(): SelectionMode {\n    const { selection } = this.props;\n\n    const { selectionMode = selection ? selection.mode : SelectionMode.none } = this.props;\n\n    return selectionMode;\n  }\n}\n","import { IGroupedListStyleProps, IGroupedListStyles } from './GroupedList.types';\nimport { getGlobalClassNames, AnimationVariables } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupedList',\n  compact: 'ms-GroupedList--Compact',\n  group: 'ms-GroupedList-group',\n  link: 'ms-Link',\n  listCell: 'ms-List-cell',\n};\n\nconst beziers = {\n  easeInOutSine: 'cubic-bezier(0.445, 0.050, 0.550, 0.950)',\n};\n\nexport const getStyles = (props: IGroupedListStyleProps): IGroupedListStyles => {\n  const { theme, className, compact } = props;\n  const { palette } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        selectors: {\n          [`.${classNames.listCell}`]: {\n            minHeight: 38, // be consistent with DetailsList styles\n          },\n        },\n      },\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32, // be consistent with DetailsList styles\n            },\n          },\n        },\n      ],\n      className,\n    ],\n    group: [\n      classNames.group,\n      {\n        transition: `background-color ${AnimationVariables.durationValue2} ${beziers.easeInOutSine}`,\n      },\n    ],\n    groupIsDropping: {\n      backgroundColor: palette.neutralLight,\n    },\n  };\n};\n","import { IGroupHeaderStyleProps, IGroupHeaderStyles } from './GroupHeader.types';\nimport {\n  getGlobalClassNames,\n  getFocusStyle,\n  IStyle,\n  AnimationVariables,\n  FontWeights,\n  IconFontSizes,\n} from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from '../DetailsList/DetailsRow.styles';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as EXPAND_BUTTON_WIDTH } from './GroupSpacer';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupHeader',\n  compact: 'ms-GroupHeader--compact',\n  check: 'ms-GroupHeader-check',\n  dropIcon: 'ms-GroupHeader-dropIcon',\n  expand: 'ms-GroupHeader-expand',\n  isCollapsed: 'is-collapsed',\n  title: 'ms-GroupHeader-title',\n  isSelected: 'is-selected',\n  iconTag: 'ms-Icon--Tag',\n  group: 'ms-GroupedList-group',\n  isDropping: 'is-dropping',\n};\n\nconst beziers = {\n  easeOutCirc: 'cubic-bezier(0.075, 0.820, 0.165, 1.000)',\n  easeOutSine: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)',\n  easeInBack: 'cubic-bezier(0.600, -0.280, 0.735, 0.045)',\n};\n\nconst DEFAULT_GROUP_HEADER_HEIGHT = 48;\nconst COMPACT_GROUP_HEADER_HEIGHT = 40;\n\nexport const getStyles = (props: IGroupHeaderStyleProps): IGroupHeaderStyles => {\n  const { theme, className, selected, isCollapsed, compact } = props;\n  // padding from the source to align GroupHeader title with DetailsRow's first cell.\n  const { cellLeftPadding } = DEFAULT_CELL_STYLE_PROPS;\n  const finalRowHeight = compact ? COMPACT_GROUP_HEADER_HEIGHT : DEFAULT_GROUP_HEADER_HEIGHT;\n\n  const { semanticColors, palette, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  const checkExpandResetStyles: IStyle = [\n    getFocusStyle(theme),\n    {\n      cursor: 'default',\n      background: 'none',\n      backgroundColor: 'transparent',\n      border: 'none',\n      padding: 0, // cancel default <button> padding\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      getFocusStyle(theme),\n      theme.fonts.medium,\n      {\n        // keep the border for height but color it so it's invisible.\n        borderBottom: `1px solid ${semanticColors.listBackground}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          ':hover': {\n            background: semanticColors.listItemBackgroundHovered,\n            color: semanticColors.actionLinkHovered,\n          },\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`:global(.${classNames.group}.${classNames.isDropping})`]: {\n            selectors: {\n              [`& > .${classNames.root} .${classNames.dropIcon}`]: {\n                transition:\n                  `transform ${AnimationVariables.durationValue4} ${beziers.easeOutCirc} ` +\n                  `opacity ${AnimationVariables.durationValue1} ${beziers.easeOutSine}`,\n                transitionDelay: AnimationVariables.durationValue3,\n                opacity: 1,\n                transform: `rotate(0.2deg) scale(1);`, // rotation prevents jittery motion in IE\n              },\n\n              [`.${classNames.check}`]: {\n                opacity: 0,\n              },\n            },\n          },\n        },\n      },\n      selected && [\n        classNames.isSelected,\n        {\n          background: semanticColors.listItemBackgroundChecked,\n          selectors: {\n            ':hover': {\n              background: semanticColors.listItemBackgroundCheckedHovered,\n            },\n            [`${classNames.check}`]: {\n              opacity: 1,\n            },\n          },\n        },\n      ],\n      compact && [classNames.compact, { border: 'none' }],\n      className,\n    ],\n    groupHeaderContainer: [\n      {\n        display: 'flex',\n        alignItems: 'center',\n        height: finalRowHeight,\n      },\n    ],\n    headerCount: [\n      {\n        padding: '0px 4px',\n      },\n    ],\n    check: [\n      classNames.check,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        // paddingTop and marginTop brought from the DetailsRow.styles.ts with explanation below.\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        opacity: 0,\n        width: CHECK_CELL_WIDTH,\n        height: finalRowHeight,\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n    expand: [\n      classNames.expand,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        width: EXPAND_BUTTON_WIDTH,\n        height: finalRowHeight,\n        color: selected ? palette.neutralPrimary : palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: selected ? palette.neutralQuaternary : palette.neutralLight,\n          },\n          ':active': {\n            backgroundColor: selected ? palette.neutralTertiaryAlt : palette.neutralQuaternaryAlt,\n          },\n        },\n      },\n    ],\n    expandIsCollapsed: [\n      isCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n              transformOrigin: '50% 50%',\n              transition: 'transform .1s linear',\n            },\n          ]\n        : {\n            transform: 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n            transition: 'transform .1s linear',\n          },\n    ],\n    title: [\n      classNames.title,\n      {\n        paddingLeft: cellLeftPadding,\n        fontSize: compact ? fonts.medium.fontSize : fonts.mediumPlus.fontSize,\n        fontWeight: isCollapsed ? FontWeights.regular : FontWeights.semibold,\n        cursor: 'pointer',\n        outline: 0,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n      },\n    ],\n    dropIcon: [\n      classNames.dropIcon,\n      {\n        position: 'absolute',\n        left: -26,\n        fontSize: IconFontSizes.large,\n        color: palette.neutralSecondary,\n        transition:\n          `transform ${AnimationVariables.durationValue2} ${beziers.easeInBack}, ` +\n          `opacity ${AnimationVariables.durationValue4} ${beziers.easeOutSine}`,\n        opacity: 0,\n        transform: 'rotate(0.2deg) scale(0.65)', // rotation prevents jittery motion in IE\n        transformOrigin: '10px 10px',\n        selectors: {\n          [`:global(.${classNames.iconTag})`]: {\n            position: 'absolute',\n          },\n        },\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { classNamesFunction, getRTL } from '../../Utilities';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { IGroupHeaderStyleProps, IGroupHeaderStyles, IGroupHeaderProps } from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IGroupHeaderProps): void {\n    if (newProps.group) {\n      const newCollapsed = newProps.group.isCollapsed;\n      const isGroupLoading = newProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(newProps.group);\n\n      this.setState({\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      });\n    }\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel,\n      viewport,\n      selectionMode,\n      loadingText,\n      // tslint:disable-next-line:deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderTitle = this._onRenderTitle,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      groupedListId,\n      compact,\n      ariaPosInSet,\n      ariaSetSize,\n    } = this.props;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        onClick={this._onHeaderClick}\n        aria-expanded={!group.isCollapsed}\n        aria-label={group.ariaLabel || group.name}\n        aria-level={groupLevel !== undefined ? groupLevel + 1 : undefined}\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        data-is-focusable={true}\n      >\n        <FocusZone className={this._classNames.groupHeaderContainer} direction={FocusZoneDirection.horizontal}>\n          {isSelectionCheckVisible ? (\n            <button\n              type=\"button\"\n              className={this._classNames.check}\n              role=\"checkbox\"\n              aria-checked={currentlySelected}\n              data-selection-toggle={true}\n              onClick={this._onToggleSelectGroupClick}\n              {...selectAllButtonProps}\n            >\n              <Check checked={currentlySelected} />\n            </button>\n          ) : (\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={indentWidth} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon}>\n            <Icon iconName=\"Tag\" />\n          </div>\n          <button\n            type=\"button\"\n            className={this._classNames.expand}\n            onClick={this._onToggleCollapse}\n            aria-expanded={!group.isCollapsed}\n            aria-controls={group && !group.isCollapsed ? groupedListId : undefined}\n            {...expandButtonProps}\n          >\n            <Icon\n              className={this._classNames.expandIsCollapsed}\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\n            />\n          </button>\n\n          {onRenderTitle(this.props, this._onRenderTitle)}\n\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </FocusZone>\n      </div>\n    );\n  }\n\n  private _onToggleCollapse = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  };\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.title}>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </div>\n    );\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupHeader.styles';\nimport { GroupHeaderBase } from './GroupHeader.base';\nimport { IGroupHeaderProps, IGroupHeaderStyles, IGroupHeaderStyleProps } from './GroupHeader.types';\nexport { IGroupHeaderProps };\n\nexport const GroupHeader: React.FunctionComponent<IGroupHeaderProps> = styled<\n  IGroupHeaderProps,\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles\n>(GroupHeaderBase, getStyles, undefined, {\n  scope: 'GroupHeader',\n});\n","import { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nexport { IGroupShowAllProps };\n\nconst GlobalClassNames = {\n  root: 'ms-GroupShowAll',\n  link: 'ms-Link',\n};\n\nexport const getStyles = (props: IGroupShowAllStyleProps): IGroupShowAllStyles => {\n  const { theme } = props;\n  const { fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '10px 84px',\n        cursor: 'pointer',\n        selectors: {\n          [`.${classNames.link}`]: {\n            fontSize: fonts.small.fontSize,\n          },\n        },\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef } from '../../Utilities';\nimport { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\nimport { KeytipData } from '../../KeytipData';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\nexport class LinkBase extends React.Component<ILinkProps, {}> implements ILink {\n  private _link = React.createRef<HTMLAnchorElement | HTMLButtonElement | null>();\n\n  constructor(props: ILinkProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const { disabled, children, className, href, theme, styles, keytipProps } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      className,\n      isButton: !href,\n      isDisabled: disabled,\n      theme: theme!,\n    });\n\n    const RootType = this._getRootType(this.props);\n\n    return (\n      <KeytipData\n        keytipProps={keytipProps}\n        ariaDescribedBy={(this.props as { 'aria-describedby': string })['aria-describedby']}\n        disabled={disabled}\n      >\n        {(keytipAttributes: any): JSX.Element => (\n          <RootType\n            {...keytipAttributes}\n            {...this._adjustPropsForRootType(RootType, this.props)}\n            className={classNames.root}\n            onClick={this._onClick}\n            ref={this._link}\n            aria-disabled={disabled}\n          >\n            {children}\n          </RootType>\n        )}\n      </KeytipData>\n    );\n  }\n\n  public focus() {\n    const { current } = this._link;\n\n    if (current && current.focus) {\n      current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    const { onClick, disabled } = this.props;\n\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  private _adjustPropsForRootType(\n    RootType: string | React.ComponentClass | React.FunctionComponent,\n    props: ILinkProps & { getStyles?: any },\n  ): Partial<ILinkProps> {\n    // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n    // as those will always be removed. We also take some props that are optional\n    // based on the RootType.\n    const { children, as, disabled, target, href, theme, getStyles, styles, componentRef, ...restProps } = props;\n\n    // RootType will be a string if we're dealing with an html component\n    if (typeof RootType === 'string') {\n      // Remove the disabled prop for anchor elements\n      if (RootType === 'a') {\n        return {\n          target,\n          href: disabled ? undefined : href,\n          ...restProps,\n        };\n      }\n\n      // Add the type='button' prop for button elements\n      if (RootType === 'button') {\n        return {\n          type: 'button',\n          disabled,\n          ...restProps,\n        };\n      }\n\n      // Remove the target and href props for all other non anchor elements\n      return { ...restProps, disabled };\n    }\n\n    // Retain all props except 'as' for ReactComponents\n    return { target, href, disabled, ...restProps };\n  }\n\n  private _getRootType(props: ILinkProps): string | React.ComponentClass | React.FunctionComponent {\n    if (props.as) {\n      return props.as;\n    }\n\n    if (props.href) {\n      return 'a';\n    }\n\n    return 'button';\n  }\n}\n","import {\n  getGlobalClassNames,\n  HighContrastSelectorWhite,\n  HighContrastSelectorBlack,\n  HighContrastSelector,\n} from '../../Styling';\nimport { ILinkStyleProps, ILinkStyles } from './Link.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Link',\n};\n\nexport const getStyles = (props: ILinkStyleProps): ILinkStyles => {\n  const { className, isButton, isDisabled, theme } = props;\n  const { semanticColors } = theme;\n\n  // Tokens\n  const linkColor = semanticColors.link;\n  const linkInteractedColor = semanticColors.linkHovered;\n  const linkDisabledColor = semanticColors.disabledText;\n  const focusBorderColor = semanticColors.focusBorder;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        color: linkColor,\n        outline: 'none',\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n        textDecoration: 'none',\n\n        selectors: {\n          '.ms-Fabric--isFocusVisible &:focus': {\n            // Can't use getFocusStyle because it doesn't support wrapping links\n            // https://github.com/microsoft/fluentui/issues/4883#issuecomment-406743543\n            // Using box-shadow and outline allows the focus rect to wrap links that span multiple lines\n            // and helps the focus rect avoid getting clipped.\n            boxShadow: `0 0 0 1px ${focusBorderColor} inset`,\n            outline: `1px auto ${focusBorderColor}`,\n            selectors: {\n              [HighContrastSelector]: {\n                outline: '1px solid WindowText',\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            // For IE high contrast mode\n            borderBottom: 'none',\n          },\n        },\n      },\n      isButton && {\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        cursor: 'pointer',\n        display: 'inline',\n        margin: 0,\n        overflow: 'inherit',\n        padding: 0,\n        textAlign: 'left',\n        textOverflow: 'inherit',\n        userSelect: 'text',\n        borderBottom: '1px solid transparent', // For Firefox high contrast mode\n        selectors: {\n          [HighContrastSelectorBlack]: {\n            color: '#FFFF00',\n          },\n          [HighContrastSelectorWhite]: {\n            color: '#00009F',\n          },\n        },\n      },\n\n      isDisabled && [\n        'is-disabled',\n        {\n          color: linkDisabledColor,\n          cursor: 'default',\n        },\n        {\n          selectors: {\n            '&:link, &:visited': {\n              pointerEvents: 'none',\n            },\n          },\n        },\n      ],\n      !isDisabled && {\n        selectors: {\n          '&:active, &:hover, &:active:hover': {\n            color: linkInteractedColor,\n            textDecoration: 'underline',\n          },\n          '&:focus': {\n            color: linkColor,\n          },\n        },\n      },\n      classNames.root,\n      className,\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { LinkBase } from './Link.base';\nimport { ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\nimport { getStyles } from './Link.styles';\n\nexport const Link: React.FunctionComponent<ILinkProps> = styled<ILinkProps, ILinkStyleProps, ILinkStyles>(\n  LinkBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Link',\n  },\n);\n","import * as React from 'react';\nimport { useCallback } from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { Link } from '../../Link';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\nimport { IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\nimport { GroupSpacer } from './GroupSpacer';\n\nconst getClassNames = classNamesFunction<IGroupShowAllStyleProps, IGroupShowAllStyles>();\n\nexport const GroupShowAllBase: React.FunctionComponent<IGroupShowAllProps> = props => {\n  const { group, groupLevel, showAllLinkText = 'Show All', styles, theme, onToggleSummarize } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  const memoizedOnClick = useCallback(\n    (ev: React.MouseEvent<HTMLElement>) => {\n      onToggleSummarize!(group!);\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    },\n    [onToggleSummarize, group],\n  );\n\n  if (group) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer count={groupLevel!} />\n        <Link onClick={memoizedOnClick}>{showAllLinkText}</Link>\n      </div>\n    );\n  }\n\n  return null;\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupShowAll.styles';\nimport { GroupShowAllBase } from './GroupShowAll.base';\nimport { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\nexport { IGroupShowAllProps };\n\nexport const GroupShowAll: React.FunctionComponent<IGroupShowAllProps> = styled<\n  IGroupShowAllProps,\n  IGroupShowAllStyleProps,\n  IGroupShowAllStyles\n>(GroupShowAllBase, getStyles, undefined, { scope: 'GroupShowAll' });\n","import { IGroupFooterStyleProps, IGroupFooterStyles } from './GroupFooter.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-groupFooter',\n};\n\nexport const getStyles = (props: IGroupFooterStyleProps): IGroupFooterStyles => {\n  const { theme, className } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      theme.fonts.medium,\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '5px 38px',\n      },\n      className,\n    ],\n  };\n};\n","import * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { GroupSpacer } from './GroupSpacer';\nimport { IGroupFooterStyleProps, IGroupFooterStyles, IGroupFooterProps } from './GroupFooter.types';\nconst getClassNames = classNamesFunction<IGroupFooterStyleProps, IGroupFooterStyles>();\n\nexport const GroupFooterBase: React.FunctionComponent<IGroupFooterProps> = props => {\n  const { group, groupLevel, footerText, indentWidth, styles, theme } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  if (group && footerText) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n        {footerText}\n      </div>\n    );\n  }\n\n  return null;\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupFooter.styles';\nimport { GroupFooterBase } from './GroupFooter.base';\nimport { IGroupFooterProps, IGroupFooterStyles, IGroupFooterStyleProps } from './GroupFooter.types';\nexport { IGroupFooterProps };\n\nexport const GroupFooter: React.FunctionComponent<IGroupFooterProps> = styled<\n  IGroupFooterProps,\n  IGroupFooterStyleProps,\n  IGroupFooterStyles\n>(GroupFooterBase, getStyles, undefined, {\n  scope: 'GroupFooter',\n});\n","import * as React from 'react';\nimport { IRefObject, IRectangle, IRenderFunction } from '../../Utilities';\nimport { List } from './List';\n\n/**\n * {@docCategory List}\n */\nexport const ScrollToMode = {\n  /**\n   * Does not make any consideration to where in the viewport the item should align to.\n   */\n  auto: 0 as 0,\n  /**\n   * Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport.\n   */\n  top: 1 as 1,\n  /**\n   * Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport.\n   */\n  bottom: 2 as 2,\n  /**\n   * Attempts to scroll the list so the desired item is in the exact center of the viewport.\n   */\n  center: 3 as 3,\n};\n\n/**\n * {@docCategory List}\n */\nexport type ScrollToMode = typeof ScrollToMode[keyof typeof ScrollToMode];\n\n/**\n * Props passed to the render override for the list root.\n * {@docCategory List}\n */\nexport interface IListOnRenderRootProps<T> {\n  /**\n   * The ref to be applied to the list root.\n   * The `List` uses this element to track scroll position and sizing.\n   */\n  rootRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list root element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered as the list surface element.\n   * This will have been rendered using `onRenderSurface`.\n   */\n  surfaceElement: JSX.Element | null;\n}\n\n/**\n * Props passed to the render override for the list surface.\n * {@docCategory List}\n */\nexport interface IListOnRenderSurfaceProps<T> {\n  /**\n   * A ref to be applied to the surface element.\n   * The `List` uses this element to track content size and focus.\n   */\n  surfaceRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list surface element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered representing all active pages.\n   */\n  pageElements: JSX.Element[];\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IList {\n  /**\n   * Force the component to update.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  getTotalListHeight?: () => number;\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines the behavior of the scrolling alignment. Defaults to auto.\n   *  Note: The scrollToMode requires the measureItem callback is provided to function.\n   */\n  scrollToIndex: (index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IListProps<T = any> extends React.HTMLAttributes<List<T> | HTMLDivElement> {\n  /**\n   * Optional callback to access the IList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IList>;\n\n  /** Optional classname to append to root list. */\n  className?: string;\n\n  /** Items to render. */\n  items?: T[];\n\n  /**\n   * Method to call when trying to render an item.\n   * @param item - The data associated with the cell that is being rendered.\n   * @param index - The index of the cell being rendered.\n   * @param isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells\n   * are complex.\n   */\n  onRenderCell?: (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode;\n\n  /**\n   * Optional callback invoked when List rendering completed.\n   * This can be on initial mount or on re-render due to scrolling.\n   * This method will be called as a result of changes in List pages (added or removed),\n   * and after ALL the changes complete.\n   * To track individual page Add / Remove use onPageAdded / onPageRemoved instead.\n   * @param pages - The current array of pages in the List.\n   */\n  onPagesUpdated?: (pages: IPage<T>[]) => void;\n\n  /** Optional callback for monitoring when a page is added. */\n  onPageAdded?: (page: IPage<T>) => void;\n\n  /** Optional callback for monitoring when a page is removed. */\n  onPageRemoved?: (page: IPage<T>) => void;\n\n  /** Optional callback to get the item key, to be used on render. */\n  getKey?: (item: T, index?: number) => string;\n\n  /**\n   * Called by the list to get the specification for a page.\n   * Use this method to provide an allocation of items per page,\n   * as well as an estimated rendered height for the page.\n   * The list will use this to optimize virtualization.\n   */\n  getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification;\n\n  /**\n   * Method called by the list to get how many items to render per page from specified index.\n   * In general, use `getPageSpecification` instead.\n   */\n  getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) => number;\n\n  /**\n   * Method called by the list to get the pixel height for a given page. By default, we measure the first\n   * page's height and default all other pages to that height when calculating the surface space. It is\n   * ideal to be able to adequately predict page heights in order to keep the surface space from jumping\n   * in pixels, which has been seen to cause browser performance issues.\n   * In general, use `getPageSpecification` instead.\n   */\n  getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle, itemCount?: number) => number;\n\n  /**\n   * Method called by the list to derive the page style object. For spacer pages, the list will derive\n   * the height and passed in heights will be ignored.\n   */\n  getPageStyle?: (page: IPage<T>) => any;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render ahead.\n   * @defaultvalue 2\n   */\n  renderedWindowsAhead?: number;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render behind.\n   * @defaultvalue 2\n   */\n  renderedWindowsBehind?: number;\n\n  /** Index in items array to start rendering from. Defaults to 0. */\n  startIndex?: number;\n\n  /** Number of items to render. Defaults to items.length. */\n  renderCount?: number;\n\n  /**\n   * Boolean value to enable render page caching. This is an experimental performance optimization\n   * that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps<T>) => boolean;\n\n  /**\n   * The role to assign to the list root element.\n   * Use this to override the default assignment of 'list' to the root and 'listitem' to the cells.\n   */\n  role?: string;\n\n  /**\n   * Called when the List will render a page.\n   * Override this to control how cells are rendered within a page.\n   */\n  onRenderPage?: IRenderFunction<IPageProps<T>>;\n\n  /**\n   * Render override for the element at the root of the `List`.\n   * Use this to apply some final attributes or structure to the content\n   * each time the list is updated with new active pages or items.\n   */\n  onRenderRoot?: IRenderFunction<IListOnRenderRootProps<T>>;\n\n  /**\n   * Render override for the element representing the surface of the `List`.\n   * Use this to alter the structure of the rendered content if necessary on each update.\n   */\n  onRenderSurface?: IRenderFunction<IListOnRenderSurfaceProps<T>>;\n\n  /**\n   * An object which can be passed in as a fresh instance to 'force update' the list.\n   */\n  version?: {};\n\n  /**\n   * Whether to disable scroll state updates. This causes the isScrolling arg in onRenderCell to always be undefined.\n   * This is a performance optimization to let List skip a render cycle by not updating its scrolling state.\n   */\n  ignoreScrollingState?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPage<T = any> {\n  key: string;\n  items: T[] | undefined;\n  startIndex: number;\n  itemCount: number;\n  style: React.CSSProperties;\n  top: number;\n  height: number;\n  data?: any;\n  isSpacer?: boolean;\n  isVisible?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageProps<T = any>\n  extends React.HTMLAttributes<HTMLDivElement>,\n    React.ClassAttributes<HTMLDivElement> {\n  /**\n   * The role being assigned to the rendered page element by the list.\n   */\n  role?: string;\n  /**\n   * The allocation data for the page.\n   */\n  page: IPage<T>;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageSpecification {\n  /**\n   * The number of items to allocate to the page.\n   */\n  itemCount?: number;\n  /**\n   * The estimated pixel height of the page.\n   */\n  height?: number;\n  /**\n   * Data to pass through to the page when rendering.\n   */\n  data?: any;\n  /**\n   * The key to use when creating the page.\n   */\n  key?: string;\n}\n","import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  IRectangle,\n  IRenderFunction,\n  css,\n  divProperties,\n  findIndex,\n  findScrollableParent,\n  getNativeProps,\n  getParent,\n  getWindow,\n  initializeComponentRef,\n} from '../../Utilities';\nimport {\n  IList,\n  IListProps,\n  IPage,\n  IPageProps,\n  ScrollToMode,\n  IListOnRenderSurfaceProps,\n  IListOnRenderRootProps,\n} from './List.types';\nimport { composeRenderFunction } from '../../Utilities';\n\nconst RESIZE_DELAY = 16;\nconst MIN_SCROLL_UPDATE_DELAY = 100;\nconst MAX_SCROLL_UPDATE_DELAY = 500;\nconst IDLE_DEBOUNCE_DELAY = 200;\n// The amount of time to wait before declaring that the list isn't scrolling\nconst DONE_SCROLLING_WAIT = 500;\nconst DEFAULT_ITEMS_PER_PAGE = 10;\nconst DEFAULT_PAGE_HEIGHT = 30;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst PAGE_KEY_PREFIX = 'page-';\nconst SPACER_KEY_PREFIX = 'spacer-';\n\nexport interface IListState<T = any> {\n  pages?: IPage<T>[];\n\n  /** The last versionstamp for  */\n  measureVersion?: number;\n  isScrolling?: boolean;\n}\n\ninterface IPageCacheItem<T> {\n  page: IPage<T>;\n  pageElement?: JSX.Element;\n}\n\ninterface IPageCache<T> {\n  [key: string]: IPageCacheItem<T>;\n}\n\nconst EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0,\n};\n\n// Naming expensive measures so that they're named in profiles.\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\nconst _measureSurfaceRect = _measurePageRect;\nconst _measureScrollRect = _measurePageRect;\n\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nexport class List<T = any> extends React.Component<IListProps<T>, IListState<T>> implements IList {\n  public static defaultProps = {\n    startIndex: 0,\n    onRenderCell: (item: any, index: number, containsFocus: boolean) => <>{(item && item.name) || ''}</>,\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND,\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance;\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _surface = React.createRef<HTMLDivElement>();\n  private _async: Async;\n  private _events: EventGroup;\n  private _estimatedPageHeight: number;\n  private _totalEstimates: number;\n  private _cachedPageHeights: {\n    [key: string]: {\n      height: number;\n      measureVersion: number;\n    };\n  };\n  private _focusedIndex: number;\n  private _scrollElement: HTMLElement;\n  private _hasCompletedFirstRender: boolean;\n\n  // surface rect relative to window\n  private _surfaceRect: IRectangle | undefined;\n\n  // The visible rect that we're required to render given the current list state.\n  private _requiredRect: IRectangle | null;\n\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\n  private _allowedRect: IRectangle;\n\n  // The rect that is visible to the user\n  private _visibleRect: IRectangle | undefined;\n\n  // materialized rect around visible items, relative to surface\n  private _materializedRect: IRectangle | null;\n\n  private _requiredWindowsAhead: number;\n  private _requiredWindowsBehind: number;\n\n  private _measureVersion: number;\n  private _scrollHeight: number;\n  private _scrollTop: number;\n  private _pageCache: IPageCache<T>;\n\n  constructor(props: IListProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      pages: [],\n      isScrolling: false,\n    };\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    this._estimatedPageHeight = 0;\n    this._totalEstimates = 0;\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n\n    // Track the measure version for everything.\n    this._measureVersion = 0;\n\n    // Ensure that scrolls are lazy updated.\n    this._onAsyncScroll = this._async.debounce(this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {\n      leading: false,\n      maxWait: MAX_SCROLL_UPDATE_DELAY,\n    });\n\n    this._onAsyncIdle = this._async.debounce(this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {\n      leading: false,\n    });\n\n    this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n      leading: false,\n    });\n\n    this._onScrollingDone = this._async.debounce(this._onScrollingDone, DONE_SCROLLING_WAIT, {\n      leading: false,\n    });\n\n    this._cachedPageHeights = {};\n    this._estimatedPageHeight = 0;\n    this._focusedIndex = -1;\n    this._pageCache = {};\n  }\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n   */\n  public scrollToIndex(\n    index: number,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode: ScrollToMode = ScrollToMode.auto,\n  ): void {\n    const startIndex = this.props.startIndex as number;\n    const renderCount = this._getRenderCount();\n    const endIndex = startIndex + renderCount;\n\n    const allowedRect = this._allowedRect;\n\n    let scrollTop = 0;\n\n    let itemsPerPage = 1;\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n\n      const pageHeight = pageSpecification.height;\n      itemsPerPage = pageSpecification.itemCount;\n\n      const requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;\n      if (requestedIndexIsInPage) {\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in\n        // just the given item, otherwise we'll only bring the page into view\n        if (measureItem && this._scrollElement) {\n          const scrollRect = _measureScrollRect(this._scrollElement);\n          const scrollWindow = {\n            top: this._scrollElement.scrollTop,\n            bottom: this._scrollElement.scrollTop + scrollRect.height,\n          };\n\n          // Adjust for actual item position within page\n          const itemPositionWithinPage = index - itemIndex;\n          for (let itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\n          }\n          const scrollBottom = scrollTop + measureItem(index);\n\n          // If scrollToMode is set to something other than auto, we always want to\n          // scroll the item into a specific position on the page.\n          switch (scrollToMode) {\n            case ScrollToMode.top:\n              this._scrollElement.scrollTop = scrollTop;\n              return;\n            case ScrollToMode.bottom:\n              this._scrollElement.scrollTop = scrollBottom - scrollRect.height;\n              return;\n            case ScrollToMode.center:\n              this._scrollElement.scrollTop = (scrollTop + scrollBottom - scrollRect.height) / 2;\n              return;\n            case ScrollToMode.auto:\n            default:\n              break;\n          }\n\n          const itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n          if (itemIsFullyVisible) {\n            // Item is already visible, do nothing.\n            return;\n          }\n\n          const itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n          const itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n\n          if (itemIsPartiallyAbove) {\n            //  We will just scroll to 'scrollTop'\n            //  .------.   - scrollTop\n            //  |Item  |\n            //  | .----|-. - scrollWindow.top\n            //  '------' |\n            //    |      |\n            //    '------'\n          } else if (itemIsPartiallyBelow) {\n            //  Adjust scrollTop position to just bring in the element\n            // .------.  - scrollTop\n            // |      |\n            // | .------.\n            // '-|----' | - scrollWindow.bottom\n            //   | Item |\n            //   '------' - scrollBottom\n            scrollTop = scrollBottom - scrollRect.height;\n          }\n        }\n\n        this._scrollElement.scrollTop = scrollTop;\n        return;\n      }\n\n      scrollTop += pageHeight;\n    }\n  }\n\n  public getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number {\n    const pages = this.state.pages || [];\n    for (const page of pages) {\n      const isPageVisible =\n        !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;\n      if (isPageVisible) {\n        if (!measureItem) {\n          const rowHeight = Math.floor(page.height / page.itemCount);\n          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);\n        } else {\n          let totalRowHeight = 0;\n          for (let itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {\n            const rowHeight = measureItem(itemIndex);\n            if (\n              page.top + totalRowHeight <= this._scrollTop &&\n              this._scrollTop < page.top + totalRowHeight + rowHeight\n            ) {\n              return itemIndex;\n            } else {\n              totalRowHeight += rowHeight;\n            }\n          }\n        }\n      }\n    }\n    return 0;\n  }\n\n  public componentDidMount(): void {\n    this._updatePages();\n    this._measureVersion++;\n    this._scrollElement = findScrollableParent(this._root.current) as HTMLElement;\n\n    this._events.on(window, 'resize', this._onAsyncResize);\n    if (this._root.current) {\n      this._events.on(this._root.current, 'focus', this._onFocus, true);\n    }\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n\n    delete this._scrollElement;\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IListProps<T>): void {\n    if (\n      newProps.items !== this.props.items ||\n      newProps.renderCount !== this.props.renderCount ||\n      newProps.startIndex !== this.props.startIndex ||\n      newProps.version !== this.props.version\n    ) {\n      // We have received new items so we want to make sure that initially we only render a single window to\n      // fill the currently visible rect, and then later render additional windows.\n      this._resetRequiredWindows();\n      this._requiredRect = null;\n\n      this._measureVersion++;\n      this._invalidatePageCache();\n      this._updatePages(newProps);\n    }\n  }\n\n  public shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>): boolean {\n    const { pages: oldPages } = this.state;\n    const { pages: newPages } = newState;\n    let shouldComponentUpdate = false;\n\n    // Update if the page stops scrolling\n    if (!newState.isScrolling && this.state.isScrolling) {\n      return true;\n    }\n\n    if (newProps.version !== this.props.version) {\n      return true;\n    }\n\n    if (newProps.items === this.props.items && oldPages!.length === newPages!.length) {\n      for (let i = 0; i < oldPages!.length; i++) {\n        const oldPage = oldPages![i];\n        const newPage = newPages![i];\n\n        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n\n    return shouldComponentUpdate;\n  }\n\n  public forceUpdate(): void {\n    this._invalidatePageCache();\n    // Ensure that when the list is force updated we update the pages first before render.\n    this._updateRenderRects(this.props, true);\n    this._updatePages();\n    this._measureVersion++;\n\n    super.forceUpdate();\n  }\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  public getTotalListHeight(): number {\n    return this._surfaceRect!.height;\n  }\n\n  public render(): JSX.Element | null {\n    const { className, role = 'list', onRenderSurface, onRenderRoot } = this.props;\n    const { pages = [] } = this.state;\n    const pageElements: JSX.Element[] = [];\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    for (const page of pages) {\n      pageElements.push(this._renderPage(page));\n    }\n\n    const finalOnRenderSurface = onRenderSurface\n      ? composeRenderFunction(onRenderSurface, this._onRenderSurface)\n      : this._onRenderSurface;\n\n    const finalOnRenderRoot = onRenderRoot\n      ? composeRenderFunction(onRenderRoot, this._onRenderRoot)\n      : this._onRenderRoot;\n\n    return finalOnRenderRoot({\n      rootRef: this._root,\n      pages,\n      surfaceElement: finalOnRenderSurface({\n        surfaceRef: this._surface,\n        pages,\n        pageElements,\n        divProps: {\n          role: 'presentation',\n          className: 'ms-List-surface',\n        },\n      }),\n      divProps: {\n        ...divProps,\n        className: css('ms-List', className),\n        role: pageElements.length > 0 ? role : undefined,\n      },\n    });\n  }\n\n  private _shouldVirtualize(props: IListProps<T> = this.props): boolean {\n    const { onShouldVirtualize } = props;\n    return !onShouldVirtualize || onShouldVirtualize(props);\n  }\n\n  /**\n   * when props.items change or forceUpdate called, throw away cached pages\n   */\n  private _invalidatePageCache(): void {\n    this._pageCache = {};\n  }\n\n  private _renderPage(page: IPage<T>): JSX.Element {\n    const { usePageCache } = this.props;\n    let cachedPage;\n    // if usePageCache is set and cached page element can be found, just return cached page\n    if (usePageCache) {\n      cachedPage = this._pageCache[page.key];\n      if (cachedPage && cachedPage.pageElement) {\n        return cachedPage.pageElement;\n      }\n    }\n\n    const pageStyle = this._getPageStyle(page);\n\n    const { onRenderPage = this._onRenderPage } = this.props;\n\n    const pageElement = onRenderPage(\n      {\n        page: page,\n        className: 'ms-List-page',\n        key: page.key,\n        ref: page.key,\n        style: pageStyle,\n        role: 'presentation',\n      },\n      this._onRenderPage,\n    );\n\n    // cache the first page for now since it is re-rendered a lot times unnecessarily.\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\n    if (usePageCache && page.startIndex === 0) {\n      this._pageCache[page.key] = {\n        page: page,\n        pageElement: pageElement,\n      };\n    }\n    return pageElement;\n  }\n\n  private _onRenderRoot = (props: IListOnRenderRootProps<T>): JSX.Element => {\n    const { rootRef, surfaceElement, divProps } = props;\n\n    return (\n      <div ref={rootRef} {...divProps}>\n        {surfaceElement}\n      </div>\n    );\n  };\n\n  private _onRenderSurface = (props: IListOnRenderSurfaceProps<T>): JSX.Element => {\n    const { surfaceRef, pageElements, divProps } = props;\n\n    return (\n      <div ref={surfaceRef} {...divProps}>\n        {pageElements}\n      </div>\n    );\n  };\n\n  /** Generate the style object for the page. */\n  private _getPageStyle(page: IPage<T>): React.StyleHTMLAttributes<HTMLDivElement> {\n    const { getPageStyle } = this.props;\n\n    return {\n      ...(getPageStyle ? getPageStyle(page) : {}),\n      ...(!page.items\n        ? {\n            height: page.height,\n          }\n        : {}),\n    };\n  }\n\n  private _onRenderPage = (pageProps: IPageProps<T>, defaultRender?: IRenderFunction<IPageProps<T>>): any => {\n    const { onRenderCell, role } = this.props;\n\n    const {\n      page: { items = [], startIndex },\n      ...divProps\n    } = pageProps;\n\n    // only assign list item role if no role is assigned\n    const cellRole = role === undefined ? 'listitem' : 'presentation';\n    const cells: React.ReactNode[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const index = startIndex + i;\n      const item = items[i];\n\n      let itemKey = this.props.getKey ? this.props.getKey(item, index) : item && (item as any).key;\n\n      if (itemKey === null || itemKey === undefined) {\n        itemKey = index;\n      }\n\n      cells.push(\n        <div\n          role={cellRole}\n          className={'ms-List-cell'}\n          key={itemKey}\n          data-list-index={index}\n          data-automationid=\"ListCell\"\n        >\n          {onRenderCell &&\n            onRenderCell(item, index, !this.props.ignoreScrollingState ? this.state.isScrolling : undefined)}\n        </div>,\n      );\n    }\n\n    return <div {...divProps}>{cells}</div>;\n  };\n\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n  private _onFocus(ev: any): void {\n    let target = ev.target as HTMLElement;\n\n    while (target !== this._surface.current) {\n      const indexString = target.getAttribute('data-list-index');\n\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n  private _onScroll(): void {\n    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: true });\n    }\n    this._resetRequiredWindows();\n    this._onScrollingDone();\n  }\n\n  private _resetRequiredWindows(): void {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  }\n\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n  private _onAsyncScroll(): void {\n    this._updateRenderRects();\n\n    // Only update pages when the visible rect falls outside of the materialized rect.\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect as IRectangle, this._materializedRect)) {\n      this._updatePages();\n    } else {\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  }\n\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n  private _onAsyncIdle(): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    const { _requiredWindowsAhead: requiredWindowsAhead, _requiredWindowsBehind: requiredWindowsBehind } = this;\n    const windowsAhead = Math.min(renderedWindowsAhead as number, requiredWindowsAhead + 1);\n    const windowsBehind = Math.min(renderedWindowsBehind as number, requiredWindowsBehind + 1);\n\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n      // console.log('idling', windowsBehind, windowsAhead);\n\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n      this._updateRenderRects();\n      this._updatePages();\n    }\n\n    if (renderedWindowsAhead! > windowsAhead || renderedWindowsBehind! > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  }\n\n  /**\n   * Function to call when the list is done scrolling.\n   * This function is debounced.\n   */\n  private _onScrollingDone(): void {\n    if (!this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: false });\n    }\n  }\n\n  private _onAsyncResize(): void {\n    this.forceUpdate();\n  }\n\n  private _updatePages(props: IListProps<T> = this.props): void {\n    // console.log('updating pages');\n\n    if (!this._requiredRect) {\n      this._updateRenderRects(props);\n    }\n\n    const newListState = this._buildPages(props);\n    const oldListPages = this.state.pages!;\n\n    this._notifyPageChanges(oldListPages, newListState.pages!);\n\n    this.setState(newListState, () => {\n      // Multiple updates may have been queued, so the callback will reflect all of them.\n      // Re-fetch the current props and states to avoid using a stale props or state captured in the closure.\n      const finalProps = this.props;\n      const finalState = this.state;\n\n      // If we weren't provided with the page height, measure the pages\n      if (!finalProps.getPageHeight) {\n        // If measured version is invalid since we've updated the DOM\n        const heightsChanged = this._updatePageMeasurements(finalState.pages!);\n\n        // On first render, we should re-measure so that we don't get a visual glitch.\n        if (heightsChanged) {\n          this._materializedRect = null;\n          if (!this._hasCompletedFirstRender) {\n            this._hasCompletedFirstRender = true;\n            this._updatePages(finalProps);\n          } else {\n            this._onAsyncScroll();\n          }\n        } else {\n          // Enqueue an idle bump.\n          this._onAsyncIdle();\n        }\n      } else {\n        // Enqueue an idle bump\n        this._onAsyncIdle();\n      }\n\n      // Notify the caller that rendering the new pages has completed\n      if (finalProps.onPagesUpdated) {\n        finalProps.onPagesUpdated(finalState.pages as IPage<T>[]);\n      }\n    });\n  }\n\n  /**\n   * Notify consumers that the rendered pages have changed\n   * @param oldPages - The old pages\n   * @param newPages - The new pages\n   * @param props - The props to use\n   */\n  private _notifyPageChanges(oldPages: IPage<T>[], newPages: IPage<T>[], props: IListProps<T> = this.props): void {\n    const { onPageAdded, onPageRemoved } = props;\n\n    if (onPageAdded || onPageRemoved) {\n      const renderedIndexes: {\n        [index: number]: IPage<T>;\n      } = {};\n\n      for (const page of oldPages) {\n        if (page.items) {\n          renderedIndexes[page.startIndex] = page;\n        }\n      }\n\n      for (const page of newPages) {\n        if (page.items) {\n          if (!renderedIndexes[page.startIndex]) {\n            this._onPageAdded(page);\n          } else {\n            delete renderedIndexes[page.startIndex];\n          }\n        }\n      }\n\n      for (const index in renderedIndexes) {\n        if (renderedIndexes.hasOwnProperty(index)) {\n          this._onPageRemoved(renderedIndexes[index]);\n        }\n      }\n    }\n  }\n\n  private _updatePageMeasurements(pages: IPage<T>[]): boolean {\n    let heightChanged = false;\n\n    // when not in virtualize mode, we render all the items without page measurement\n    if (!this._shouldVirtualize()) {\n      return heightChanged;\n    }\n\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n\n      if (page.items) {\n        heightChanged = this._measurePage(page) || heightChanged;\n      }\n    }\n\n    return heightChanged;\n  }\n\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n  private _measurePage(page: IPage<T>): boolean {\n    let hasChangedHeight = false;\n    const pageElement = this.refs[page.key] as HTMLElement;\n    const cachedHeight = this._cachedPageHeights[page.startIndex];\n\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\n\n    if (\n      pageElement &&\n      this._shouldVirtualize() &&\n      (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)\n    ) {\n      const newClientRect = {\n        width: pageElement.clientWidth,\n        height: pageElement.clientHeight,\n      };\n\n      if (newClientRect.height || newClientRect.width) {\n        hasChangedHeight = page.height !== newClientRect.height;\n\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n\n        page.height = newClientRect.height;\n\n        this._cachedPageHeights[page.startIndex] = {\n          height: newClientRect.height,\n          measureVersion: this._measureVersion,\n        };\n\n        this._estimatedPageHeight = Math.round(\n          (this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1),\n        );\n\n        this._totalEstimates++;\n      }\n    }\n\n    return hasChangedHeight;\n  }\n\n  /** Called when a page has been added to the DOM. */\n  private _onPageAdded(page: IPage<T>): void {\n    const { onPageAdded } = this.props;\n\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  }\n\n  /** Called when a page has been removed from the DOM. */\n  private _onPageRemoved(page: IPage<T>): void {\n    const { onPageRemoved } = this.props;\n\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  }\n\n  /** Build up the pages that should be rendered. */\n  private _buildPages(props: IListProps<T>): IListState<T> {\n    let { renderCount } = props;\n    const { items, startIndex, getPageHeight } = props;\n\n    renderCount = this._getRenderCount(props);\n\n    const materializedRect = { ...EMPTY_RECT };\n    const pages: IPage<T>[] = [];\n\n    let itemsPerPage = 1;\n    let pageTop = 0;\n    let currentSpacer = null;\n    const focusedIndex = this._focusedIndex;\n    const endIndex = startIndex! + renderCount;\n    const shouldVirtualize = this._shouldVirtualize(props);\n\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n    const isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n\n    const allowedRect = this._allowedRect;\n\n    for (let itemIndex = startIndex!; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n      const pageHeight = pageSpecification.height;\n      const pageData = pageSpecification.data;\n      const key = pageSpecification.key;\n\n      itemsPerPage = pageSpecification.itemCount;\n\n      const pageBottom = pageTop + pageHeight - 1;\n\n      const isPageRendered =\n        findIndex(this.state.pages as IPage<T>[], (page: IPage<T>) => !!page.items && page.startIndex === itemIndex) >\n        -1;\n      const isPageInAllowedRange = !allowedRect || (pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom!);\n      const isPageInRequiredRange =\n        !this._requiredRect || (pageBottom >= this._requiredRect.top && pageTop <= this._requiredRect.bottom!);\n      const isPageVisible =\n        (!isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered))) || !shouldVirtualize;\n      const isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;\n      const isFirstPage = itemIndex === startIndex;\n\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +\n      // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n\n      // Only render whats visible, focused, or first page,\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n\n        const itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n        const newPage = this._createPage(\n          key,\n          items!.slice(itemIndex, itemIndex + itemsInPage),\n          itemIndex,\n          undefined,\n          undefined,\n          pageData,\n        );\n\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n        if (this._visibleRect && this._visibleRect.bottom) {\n          newPage.isVisible = pageBottom >= this._visibleRect.top && pageTop <= this._visibleRect.bottom;\n        }\n\n        pages.push(newPage);\n\n        if (isPageInRequiredRange && this._allowedRect) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: allowedRect.left,\n            right: allowedRect.right,\n            width: allowedRect.width,\n          });\n        }\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this._createPage(\n            SPACER_KEY_PREFIX + itemIndex,\n            undefined,\n            itemIndex,\n            0,\n            undefined,\n            pageData,\n            true /*isSpacer*/,\n          );\n        }\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n      pageTop += pageBottom - pageTop + 1;\n\n      // in virtualized mode, we render need to render first page then break and measure,\n      // otherwise, we render all items without measurement to make rendering fast\n      if (isFirstRender && shouldVirtualize) {\n        break;\n      }\n    }\n\n    if (currentSpacer) {\n      currentSpacer.key = SPACER_KEY_PREFIX + 'end';\n      pages.push(currentSpacer);\n    }\n\n    this._materializedRect = materializedRect;\n\n    // console.log('materialized: ', materializedRect);\n    return {\n      pages: pages,\n      measureVersion: this._measureVersion,\n    };\n  }\n\n  private _getPageSpecification(\n    itemIndex: number,\n    visibleRect: IRectangle,\n  ): {\n    // These return values are now no longer optional.\n    itemCount: number;\n    height: number;\n    data?: any;\n    key?: string;\n  } {\n    const { getPageSpecification } = this.props;\n    if (getPageSpecification) {\n      const pageData = getPageSpecification(itemIndex, visibleRect);\n\n      const { itemCount = this._getItemCountForPage(itemIndex, visibleRect) } = pageData;\n\n      const { height = this._getPageHeight(itemIndex, visibleRect, itemCount) } = pageData;\n\n      return {\n        itemCount: itemCount,\n        height: height,\n        data: pageData.data,\n        key: pageData.key,\n      };\n    } else {\n      const itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n\n      return {\n        itemCount: itemCount,\n        height: this._getPageHeight(itemIndex, visibleRect, itemCount),\n      };\n    }\n  }\n\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n  private _getPageHeight(itemIndex: number, visibleRect: IRectangle, itemsPerPage: number): number {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);\n    } else {\n      const cachedHeight = this._cachedPageHeights[itemIndex];\n\n      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;\n    }\n  }\n\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\n    const itemsPerPage = this.props.getItemCountForPage\n      ? this.props.getItemCountForPage(itemIndex, visibileRect)\n      : DEFAULT_ITEMS_PER_PAGE;\n\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  }\n\n  private _createPage(\n    pageKey: string | undefined,\n    items: any[] | undefined,\n    startIndex: number = -1,\n    count: number = items ? items.length : 0,\n    style: React.CSSProperties = {},\n    data?: any,\n    isSpacer?: boolean,\n  ): IPage<T> {\n    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;\n    const cachedPage = this._pageCache[pageKey];\n    if (cachedPage && cachedPage.page) {\n      return cachedPage.page;\n    }\n\n    return {\n      key: pageKey,\n      startIndex: startIndex,\n      itemCount: count,\n      items: items,\n      style: style,\n      top: 0,\n      height: 0,\n      data: data,\n      isSpacer: isSpacer || false,\n    };\n  }\n\n  private _getRenderCount(props?: IListProps<T>): number {\n    const { items, startIndex, renderCount } = props || this.props;\n\n    return renderCount === undefined ? (items ? items.length - startIndex! : 0) : renderCount;\n  }\n\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n  private _updateRenderRects(props?: IListProps<T>, forceUpdate?: boolean): void {\n    props = props || this.props;\n    const { renderedWindowsAhead, renderedWindowsBehind } = props;\n    const { pages } = this.state;\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n    if (!this._shouldVirtualize(props)) {\n      return;\n    }\n\n    let surfaceRect = this._surfaceRect || { ...EMPTY_RECT };\n    const scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;\n    const scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0;\n\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    // This needs to be called to recalculate when new pages should be loaded.\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n    if (\n      this._surface.current &&\n      (forceUpdate ||\n        !pages ||\n        !this._surfaceRect ||\n        !scrollHeight ||\n        scrollHeight !== this._scrollHeight ||\n        Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)\n    ) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);\n      this._scrollTop = scrollTop;\n    }\n\n    // If the scroll height has changed, something in the container likely resized and\n    // we should redo the page heights incase their content resized.\n    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {\n      this._measureVersion++;\n    }\n\n    this._scrollHeight = scrollHeight;\n\n    // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n    const visibleTop = Math.max(0, -surfaceRect.top);\n    const win = getWindow(this._root.current);\n    const visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + win!.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: win!.innerHeight,\n    };\n\n    // The required/allowed rects are adjusted versions of the visible rect.\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind!, renderedWindowsAhead!);\n\n    // store the visible rect for later use.\n    this._visibleRect = visibleRect;\n  }\n}\n\nfunction _expandRect(rect: IRectangle, pagesBefore: number, pagesAfter: number): IRectangle {\n  const top = rect.top - pagesBefore * rect.height;\n  const height = rect.height + (pagesBefore + pagesAfter) * rect.height;\n\n  return {\n    top: top,\n    bottom: top + height,\n    height: height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width,\n  };\n}\n\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\n  return (\n    innerRect.top >= outerRect.top &&\n    innerRect.left >= outerRect.left &&\n    innerRect.bottom! <= outerRect.bottom! &&\n    innerRect.right! <= outerRect.right!\n  );\n}\n\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\n  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;\n  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;\n  targetRect.bottom =\n    newRect.bottom! > targetRect.bottom! || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;\n  targetRect.right = newRect.right! > targetRect.right! || targetRect.right === -1 ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right! - targetRect.left + 1;\n  targetRect.height = targetRect.bottom! - targetRect.top + 1;\n\n  return targetRect;\n}\n","import * as React from 'react';\nimport { IGroup, IGroupDividerProps, IGroupRenderProps, IGroupedListStyles } from './GroupedList.types';\nimport { IGroupHeaderProps } from './GroupHeader.types';\nimport { IGroupFooterProps } from './GroupFooter.types';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\n\nimport { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../utilities/dragdrop/index';\n\nimport { IProcessedStyleSet } from '../../Styling';\nimport { initializeComponentRef, IRenderFunction, IDisposable, css, getId, EventGroup } from '../../Utilities';\n\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/index';\n\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\n\nimport { List } from '../../List';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { IViewport } from '../../utilities/decorators/withViewport';\nimport { IListProps } from '../List/index';\n\nexport interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\n  /** GroupedList resolved class names */\n  groupedListClassNames?: IProcessedStyleSet<IGroupedListStyles>;\n\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: () => void;\n\n  /** Whether to render in compact mode */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item rows and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Optional grouping instructions. */\n  groupIndex?: number;\n\n  /** Optional group nesting level. */\n  groupNestingDepth?: number;\n\n  /** Optional grouping instructions. */\n  group?: IGroup;\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional list props to pass to list renderer.  */\n  listProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Information to pass in to the group Show All footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Override for rendering the group header. */\n  onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Override for rendering the group Show All link. */\n  onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /** Override for rendering the group footer. */\n  onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n}\n\nexport interface IGroupedListSectionState {\n  isDropping?: boolean;\n  isSelected?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class GroupedListSection extends React.Component<IGroupedListSectionProps, IGroupedListSectionState> {\n  private _root = React.createRef<HTMLDivElement>();\n  private _list = React.createRef<List>();\n  private _id: string;\n  private _events: EventGroup;\n\n  private _dragDropSubscription: IDisposable;\n  private _droppingClassName: string = '';\n\n  constructor(props: IGroupedListSectionProps) {\n    super(props);\n\n    const { selection, group } = props;\n\n    initializeComponentRef(this);\n\n    this._id = getId('GroupedListSection');\n\n    this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false,\n    };\n\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount(): void {\n    const { dragDropHelper, selection } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getGroupDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  }\n\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\n    if (\n      this.props.group !== previousProps.group ||\n      this.props.groupIndex !== previousProps.groupIndex ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getGroupDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      getGroupItemLimit,\n      group,\n      groupIndex,\n      headerProps,\n      showAllProps,\n      footerProps,\n      viewport,\n      selectionMode,\n      onRenderGroupHeader = this._onRenderGroupHeader,\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\n      onRenderGroupFooter = this._onRenderGroupFooter,\n      onShouldVirtualize,\n      groupedListClassNames,\n      groups,\n      compact,\n      listProps = {},\n    } = this.props;\n    const { isSelected } = this.state;\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    const isShowAllVisible =\n      group &&\n      !group.children &&\n      !group.isCollapsed &&\n      !group.isShowingAll &&\n      (group.count > renderCount || group.hasMoreData);\n    const hasNestedGroups = group && group.children && group.children.length > 0;\n\n    const { version } = listProps;\n\n    const dividerProps: IGroupDividerProps = {\n      group,\n      groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected,\n      selected: isSelected,\n      viewport,\n      selectionMode,\n      groups,\n      compact,\n    };\n\n    const ariaControlsProps: IGroupHeaderProps = {\n      groupedListId: this._id,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined,\n    };\n\n    const groupHeaderProps: IGroupHeaderProps = { ...headerProps, ...dividerProps, ...ariaControlsProps };\n    const groupShowAllProps: IGroupShowAllProps = { ...showAllProps, ...dividerProps };\n    const groupFooterProps: IGroupFooterProps = { ...footerProps, ...dividerProps };\n\n    const isDraggable: boolean =\n      !!this.props.dragDropHelper &&\n      this._getGroupDragDropOptions().canDrag!(group) &&\n      !!this.props.dragDropEvents!.canDragGroups;\n\n    return (\n      <div\n        ref={this._root}\n        {...(isDraggable && { draggable: true })}\n        className={css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName())}\n        role=\"presentation\"\n      >\n        {onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader)}\n        {group && group.isCollapsed ? null : hasNestedGroups ? (\n          <List\n            role=\"presentation\"\n            ref={this._list}\n            items={group ? group.children : []}\n            onRenderCell={this._renderSubGroup}\n            getItemCountForPage={this._returnOne}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            id={this._id}\n          />\n        ) : (\n          this._onRenderGroup(renderCount)\n        )}\n        {group && group.isCollapsed\n          ? null\n          : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)}\n        {onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this.forceListUpdate();\n  }\n\n  public forceListUpdate() {\n    const { group } = this.props;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        const subGroupCount = group.children.length;\n\n        for (let i = 0; i < subGroupCount; i++) {\n          const subGroup = this._list.current.refs['subGroup_' + String(i)] as GroupedListSection;\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      // tslint:disable-next-line:deprecation\n      const subGroup = this.refs['subGroup_' + String(0)] as GroupedListSection;\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  }\n\n  private _onRenderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\n    return <GroupHeader {...props} />;\n  };\n\n  private _onRenderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\n    return <GroupShowAll {...props} />;\n  };\n\n  private _onRenderGroupFooter = (props: IGroupFooterProps): JSX.Element => {\n    return <GroupFooter {...props} />;\n  };\n\n  private _onSelectionChange(): void {\n    const { group, selection } = this.props;\n    if (selection && group) {\n      const isSelected = selection.isRangeSelected(group.startIndex, group.count);\n\n      if (isSelected !== this.state.isSelected) {\n        this.setState({ isSelected });\n      }\n    }\n  }\n\n  private _onRenderGroupCell(\n    onRenderCell: any,\n    groupNestingDepth: number | undefined,\n  ): (item: any, itemIndex: number | undefined) => React.ReactNode {\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\n      return onRenderCell(groupNestingDepth, item, itemIndex);\n    };\n  }\n\n  private _onRenderGroup(renderCount: number): JSX.Element {\n    const { group, items, onRenderCell, listProps, groupNestingDepth, onShouldVirtualize, groupProps } = this.props;\n    const count = group && !group.isShowingAll ? group.count : items.length;\n    const startIndex = group ? group.startIndex : 0;\n\n    return (\n      <List\n        role={groupProps && groupProps.role ? groupProps.role : 'grid'}\n        items={items}\n        onRenderCell={this._onRenderGroupCell(onRenderCell, groupNestingDepth)}\n        ref={this._list}\n        renderCount={Math.min(count, renderCount)}\n        startIndex={startIndex}\n        onShouldVirtualize={onShouldVirtualize}\n        id={this._id}\n        {...listProps}\n      />\n    );\n  }\n\n  private _renderSubGroup = (subGroup: IGroup, subGroupIndex: number): JSX.Element | null => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      getGroupItemLimit,\n      groupNestingDepth,\n      groupProps,\n      items,\n      headerProps,\n      showAllProps,\n      footerProps,\n      listProps,\n      onRenderCell,\n      selection,\n      selectionMode,\n      viewport,\n      onRenderGroupHeader,\n      onRenderGroupShowAll,\n      onRenderGroupFooter,\n      onShouldVirtualize,\n      group,\n      compact,\n    } = this.props;\n\n    const nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n\n    return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (\n      <GroupedListSection\n        ref={'subGroup_' + subGroupIndex}\n        key={this._getGroupKey(subGroup, subGroupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={getGroupItemLimit}\n        group={subGroup}\n        groupIndex={subGroupIndex}\n        groupNestingDepth={nestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        items={items}\n        listProps={listProps}\n        onRenderCell={onRenderCell}\n        selection={selection}\n        selectionMode={selectionMode}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onRenderGroupHeader={onRenderGroupHeader}\n        onRenderGroupShowAll={onRenderGroupShowAll}\n        onRenderGroupFooter={onRenderGroupFooter}\n        onShouldVirtualize={onShouldVirtualize}\n        groups={group ? group.children : []}\n        compact={compact}\n      />\n    ) : null;\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getGroupKey(group: IGroup, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  }\n\n  /**\n   * collect all the data we need to enable drag/drop for a group\n   */\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: -1,\n      context: { data: group, index: groupIndex, isGroup: true },\n      updateDropState: this._updateDroppingState,\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDrop: dragDropEvents!.onDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      onDragEnter: dragDropEvents!.onDragEnter,\n      onDragLeave: dragDropEvents!.onDragLeave,\n      onDragEnd: dragDropEvents!.onDragEnd,\n    };\n    return options as IDragDropOptions;\n  };\n\n  /**\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * @param newValue - new isDropping state value\n   * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, group } = this.props;\n\n    if (isDropping !== newIsDropping) {\n      if (isDropping) {\n        if (dragDropEvents && dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(group, event);\n        }\n      } else {\n        if (dragDropEvents && dragDropEvents.onDragEnter) {\n          this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n        }\n      }\n\n      this.setState({ isDropping: newIsDropping });\n    }\n  };\n\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  private _getDroppingClassName(): string {\n    let { isDropping } = this.state;\n    const { group, groupedListClassNames } = this.props;\n\n    isDropping = !!(group && isDropping);\n\n    return css(\n      isDropping && this._droppingClassName,\n      isDropping && DEFAULT_DROPPING_CSS_CLASS,\n      isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping,\n    );\n  }\n}\n","import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { initializeComponentRef, classNamesFunction, FocusRects } from '../../Utilities';\nimport {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode, IListProps } from '../../List';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { IGroupHeaderProps } from './GroupHeader';\nimport { IGroupShowAllProps } from './GroupShowAll.styles';\nimport { IGroupFooterProps } from './GroupFooter.types';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  groups?: IGroup[];\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false,\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance;\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    this.state = {\n      lastWidth: 0,\n      groups: props.groups,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IGroupedListProps): void {\n    const { groups, selectionMode, compact } = this.props;\n    let shouldForceUpdates = false;\n\n    if (newProps.groups !== groups) {\n      this.setState({ groups: newProps.groups });\n      shouldForceUpdates = true;\n    }\n\n    if (newProps.selectionMode !== selectionMode || newProps.compact !== compact) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      this._forceListUpdates();\n    }\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const { className, usePageCache, onShouldVirtualize, theme, styles, compact, listProps = {} } = this.props;\n    const { groups } = this.state;\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact: compact,\n    });\n\n    const { version } = listProps;\n\n    return (\n      <div\n        className={this._classNames.root}\n        data-automationid=\"GroupedList\"\n        data-is-scrollable=\"false\"\n        role=\"presentation\"\n      >\n        <FocusRects />\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role=\"presentation\"\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n          />\n        )}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact,\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize,\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    return (\n      <GroupedListSection\n        ref={'group_' + groupIndex}\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={listProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit =\n      groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    const { selection, selectionMode } = this.props;\n\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    groups = groups || this.state.groups;\n\n    const groupCount = groups ? groups.length : 1;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      for (let i = 0; i < groupCount; i++) {\n        const group = this._list.current.refs['group_' + String(i)] as GroupedListSection;\n        if (group) {\n          group.forceListUpdate();\n        }\n      }\n    } else {\n      const group = this.refs['group_' + String(0)] as GroupedListSection;\n      if (group) {\n        group.forceListUpdate();\n      }\n    }\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number,\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key,\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(\n      groups &&\n      groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n    );\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupedList.styles';\nimport { GroupedListBase } from './GroupedList.base';\nimport { IGroupedListProps, IGroupedListStyles, IGroupedListStyleProps } from './GroupedList.types';\nexport { IGroupedListProps };\n\nexport const GroupedList: React.FunctionComponent<IGroupedListProps> = styled<\n  IGroupedListProps,\n  IGroupedListStyleProps,\n  IGroupedListStyles\n>(GroupedListBase, getStyles, undefined, {\n  scope: 'GroupedList',\n});\n","import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { findScrollableParent, getRect, getWindow, Async, EventGroup } from '../../Utilities';\n\n/**\n * Viewport rectangle dimensions.\n *\n * {@docCategory DetailsList}\n */\nexport interface IViewport {\n  /**\n   * Width in pixels.\n   */\n  width: number;\n  /**\n   * Height in pixels.\n   */\n  height: number;\n}\n\nexport interface IWithViewportState {\n  viewport?: IViewport;\n}\n\n/**\n * Props interface for the withViewport component.\n *\n * {@docCategory DetailsList}\n */\nexport interface IWithViewportProps {\n  /**\n   * Whether or not to use ResizeObserver (if available) to detect\n   * and measure viewport on 'resize' events.\n   *\n   * Falls back to window 'resize' event.\n   *\n   * @defaultValue false\n   */\n  skipViewportMeasures?: boolean;\n}\n\nconst RESIZE_DELAY = 500;\nconst MAX_RESIZE_ATTEMPTS = 3;\n\n/**\n * A decorator to update decorated component on viewport or window resize events.\n *\n * @param ComposedComponent decorated React component reference.\n */\nexport function withViewport<TProps extends { viewport?: IViewport }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  return class WithViewportComponent extends BaseDecorator<TProps, IWithViewportState> {\n    private _root = React.createRef<HTMLDivElement>();\n    private _resizeAttempts: number;\n    private _viewportResizeObserver: any;\n    private _async: Async;\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n\n      this._async = new Async(this);\n      this._events = new EventGroup(this);\n      this._resizeAttempts = 0;\n\n      this.state = {\n        viewport: {\n          width: 0,\n          height: 0,\n        },\n      };\n    }\n\n    public componentDidMount(): void {\n      const { skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n        leading: false,\n      });\n\n      // ResizeObserver seems always fire even window is not resized. This is\n      // particularly bad when skipViewportMeasures is set when optimizing fixed layout lists.\n      // It will measure and update and re-render the entire list after list is fully rendered.\n      // So fallback to listen to resize event when skipViewportMeasures is set.\n      if (!skipViewportMeasures && this._isResizeObserverAvailable()) {\n        this._registerResizeObserver();\n      } else {\n        this._events.on(win, 'resize', this._onAsyncResize);\n      }\n\n      if (!skipViewportMeasures) {\n        this._updateViewport();\n      }\n    }\n\n    public componentDidUpdate(newProps: TProps) {\n      const { skipViewportMeasures: oldSkipViewportMeasures } = this.props as IWithViewportProps;\n      const { skipViewportMeasures: newSkipViewportMeasures } = newProps as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      if (oldSkipViewportMeasures !== newSkipViewportMeasures) {\n        if (newSkipViewportMeasures) {\n          this._unregisterResizeObserver();\n          this._events.on(win, 'resize', this._onAsyncResize);\n        } else if (!newSkipViewportMeasures && this._isResizeObserverAvailable()) {\n          this._events.off(win, 'resize', this._onAsyncResize);\n          this._registerResizeObserver();\n        }\n      }\n\n      if (!!newSkipViewportMeasures) {\n        this._updateViewport();\n      }\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n      this._async.dispose();\n      this._unregisterResizeObserver();\n    }\n\n    public render(): JSX.Element {\n      const { viewport } = this.state;\n      const newViewport = viewport!.width > 0 && viewport!.height > 0 ? viewport : undefined;\n\n      return (\n        <div className=\"ms-Viewport\" ref={this._root} style={{ minWidth: 1, minHeight: 1 }}>\n          <ComposedComponent ref={this._updateComposedComponentRef} viewport={newViewport} {...(this.props as any)} />\n        </div>\n      );\n    }\n\n    public forceUpdate(): void {\n      this._updateViewport(true);\n    }\n\n    private _onAsyncResize(): void {\n      this._updateViewport();\n    }\n\n    private _isResizeObserverAvailable(): boolean {\n      const win = getWindow(this._root.current);\n\n      return win && (win as any).ResizeObserver;\n    }\n\n    private _registerResizeObserver = () => {\n      const win = getWindow(this._root.current);\n\n      this._viewportResizeObserver = new (win as any).ResizeObserver(this._onAsyncResize);\n      this._viewportResizeObserver.observe(this._root.current);\n    };\n\n    private _unregisterResizeObserver = () => {\n      if (this._viewportResizeObserver) {\n        this._viewportResizeObserver.disconnect();\n        delete this._viewportResizeObserver;\n      }\n    };\n\n    /* Note: using lambda here because decorators don't seem to work in decorators. */\n    private _updateViewport = (withForceUpdate?: boolean) => {\n      const { viewport } = this.state;\n      const viewportElement = this._root.current;\n      const scrollElement = findScrollableParent(viewportElement);\n      const scrollRect = getRect(scrollElement);\n      const clientRect = getRect(viewportElement);\n      const updateComponent = () => {\n        if (withForceUpdate && this._composedComponentInstance) {\n          this._composedComponentInstance.forceUpdate();\n        }\n      };\n\n      const isSizeChanged =\n        (clientRect && clientRect.width) !== viewport!.width || (scrollRect && scrollRect.height) !== viewport!.height;\n\n      if (isSizeChanged && this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\n        this._resizeAttempts++;\n        this.setState(\n          {\n            viewport: {\n              width: clientRect.width,\n              height: scrollRect.height,\n            },\n          },\n          () => {\n            this._updateViewport(withForceUpdate);\n          },\n        );\n      } else {\n        this._resizeAttempts = 0;\n        updateComponent();\n      }\n    };\n  };\n}\n","import { IGroup } from '../../components/GroupedList/GroupedList.types';\r\n\r\n/**\r\n * Takes an array of groups and returns a count of the groups and all descendant groups.\r\n * @param groups - The array of groups to count.\r\n */\r\nexport const GetGroupCount = (groups: IGroup[] | undefined): number => {\r\n  let total = 0;\r\n\r\n  if (groups) {\r\n    const remainingGroups = [...groups];\r\n    let currentGroup: IGroup;\r\n\r\n    while (remainingGroups && remainingGroups.length > 0) {\r\n      ++total;\r\n\r\n      currentGroup = remainingGroups.pop() as IGroup;\r\n\r\n      if (currentGroup && currentGroup.children) {\r\n        remainingGroups.push(...currentGroup.children);\r\n      }\r\n    }\r\n  }\r\n\r\n  return total;\r\n};\r\n","import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  IRenderFunction,\n  classNamesFunction,\n  memoizeFunction,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n  IDetailsGroupRenderProps,\n  ColumnDragEndLocation,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport {\n  IDetailsHeader,\n  SelectAllVisibility,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport { IFocusZone, FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { IObjectWithKey, ISelection, Selection, SelectionMode, SelectionZone } from '../../utilities/selection/index';\n\nimport { DragDropHelper } from '../../utilities/dragdrop/DragDropHelper';\nimport { IGroupedList, GroupedList, IGroupDividerProps, IGroupRenderProps } from '../../GroupedList';\nimport { List, IListProps, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction } from '@uifabric/utilities';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isDropping?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  private _sumColumnWidths = memoizeFunction((columns: IColumn[]) => {\n    let totalWidth: number = 0;\n\n    columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n    return totalWidth;\n  });\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props),\n      isSizing: false,\n      isDropping: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n    };\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IDetailsListProps): void {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (newProps.viewport && newProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = newProps.setKey !== setKey || newProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (newProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = newProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      this.setState({\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      });\n    }\n\n    if (!this.props.disableSelectionZone && newProps.items !== items) {\n      this._selection.setItems(newProps.items, shouldResetSelection);\n    }\n\n    if (\n      newProps.checkboxVisibility !== checkboxVisibility ||\n      newProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      newProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    this._adjustColumns(newProps, true);\n\n    if (newProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      newProps.groupProps &&\n      newProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      this.setState({\n        isCollapsed: newProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !newProps.groupProps.isAllGroupsCollapsed,\n      });\n    }\n\n    if (newProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = newProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: newProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      this.setState({\n        version: {},\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      ariaLabelForListHeader,\n      ariaLabelForSelectAllCheckbox,\n      ariaLabelForSelectionColumn,\n      className,\n      checkboxVisibility,\n      compact,\n      constrainMode,\n      dragDropEvents,\n      groups,\n      groupProps,\n      indentWidth,\n      items,\n      isPlaceholderData,\n      isHeaderVisible,\n      layoutMode,\n      onItemInvoked,\n      onItemContextMenu,\n      onColumnHeaderClick,\n      onColumnHeaderContextMenu,\n      selectionMode = this._selection.mode,\n      selectionPreservedOnEmptyClick,\n      selectionZoneProps,\n      ariaLabel,\n      ariaLabelForGrid,\n      rowElementEventMap,\n      shouldApplyApplicationRole = false,\n      getKey,\n      listProps,\n      usePageCache,\n      onShouldVirtualize,\n      viewport,\n      minimumPixelsForDrag,\n      getGroupHeight,\n      styles,\n      theme,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      onRenderCheckbox,\n      useFastIcons,\n    } = this.props;\n    const { adjustedColumns, isCollapsed, isSizing, isSomeGroupExpanded } = this.state;\n    const { _selection: selection, _dragDropHelper: dragDropHelper } = this;\n    const groupNestingDepth = this._getGroupNestingDepth();\n    const additionalListProps: IListProps = {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version: this.state.version,\n      ...listProps,\n    };\n    let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n    if (selectionMode === SelectionMode.single) {\n      selectAllVisibility = SelectAllVisibility.hidden;\n    }\n    if (selectionMode === SelectionMode.multiple) {\n      // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n      let isCollapsedGroupSelectVisible =\n        groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n      if (isCollapsedGroupSelectVisible === undefined) {\n        isCollapsedGroupSelectVisible = true;\n      }\n      const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n      selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n    }\n\n    if (checkboxVisibility === CheckboxVisibility.hidden) {\n      selectAllVisibility = SelectAllVisibility.none;\n    }\n\n    const {\n      onRenderDetailsHeader = this._onRenderDetailsHeader,\n      onRenderDetailsFooter = this._onRenderDetailsFooter,\n    } = this.props;\n\n    const detailsFooterProps = this._getDetailsFooterProps();\n    const columnReorderProps = this._getColumnReorderProps();\n\n    const rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n\n    const list = groups ? (\n      <GroupedList\n        componentRef={this._groupedList}\n        groups={groups}\n        groupProps={groupProps ? this._getGroupProps(groupProps) : undefined}\n        items={items}\n        onRenderCell={this._onRenderCell}\n        selection={selection}\n        selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={rowElementEventMap}\n        listProps={additionalListProps}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        getGroupHeight={getGroupHeight}\n        compact={compact}\n      />\n    ) : (\n      <List\n        ref={this._list}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={this._onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    );\n\n    return (\n      // If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n      // with JAWS.\n      <div\n        ref={this._root}\n        className={classNames.root}\n        data-automationid=\"DetailsList\"\n        data-is-scrollable=\"false\"\n        aria-label={ariaLabel}\n        {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n      >\n        <FocusRects />\n        <div\n          role=\"grid\"\n          aria-label={ariaLabelForGrid}\n          aria-rowcount={isPlaceholderData ? -1 : rowCount}\n          aria-colcount={\n            (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) + (adjustedColumns ? adjustedColumns.length : 0)\n          }\n          aria-readonly=\"true\"\n          aria-busy={isPlaceholderData}\n        >\n          <div onKeyDown={this._onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n            {isHeaderVisible &&\n              onRenderDetailsHeader(\n                {\n                  componentRef: this._header,\n                  selectionMode: selectionMode,\n                  layoutMode: layoutMode!,\n                  selection: selection,\n                  columns: adjustedColumns,\n                  onColumnClick: onColumnHeaderClick,\n                  onColumnContextMenu: onColumnHeaderContextMenu,\n                  onColumnResized: this._onColumnResized,\n                  onColumnIsSizingChanged: this._onColumnIsSizingChanged,\n                  onColumnAutoResized: this._onColumnAutoResized,\n                  groupNestingDepth: groupNestingDepth,\n                  isAllCollapsed: isCollapsed,\n                  onToggleCollapseAll: this._onToggleCollapse,\n                  ariaLabel: ariaLabelForListHeader,\n                  ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                  ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                  selectAllVisibility: selectAllVisibility,\n                  collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                  viewport: viewport,\n                  columnReorderProps: columnReorderProps,\n                  minimumPixelsForDrag: minimumPixelsForDrag,\n                  cellStyleProps: cellStyleProps,\n                  checkboxVisibility,\n                  indentWidth,\n                  onRenderDetailsCheckbox: onRenderCheckbox,\n                  rowWidth: this._sumColumnWidths(this.state.adjustedColumns),\n                  useFastIcons,\n                },\n                this._onRenderDetailsHeader,\n              )}\n          </div>\n          <div onKeyDown={this._onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n            <FocusZone\n              componentRef={this._focusZone}\n              className={classNames.focusZone}\n              direction={FocusZoneDirection.vertical}\n              isInnerZoneKeystroke={this.isRightArrow}\n              onActiveElementChanged={this._onActiveRowChanged}\n              onBlur={this._onBlur}\n            >\n              {!this.props.disableSelectionZone ? (\n                <SelectionZone\n                  ref={this._selectionZone}\n                  selection={selection}\n                  selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n                  selectionMode={selectionMode}\n                  onItemInvoked={onItemInvoked}\n                  onItemContextMenu={onItemContextMenu}\n                  enterModalOnTouch={this.props.enterModalSelectionOnTouch}\n                  {...(selectionZoneProps || {})}\n                >\n                  {list}\n                </SelectionZone>\n              ) : (\n                list\n              )}\n            </FocusZone>\n          </div>\n          {onRenderDetailsFooter(\n            {\n              ...detailsFooterProps,\n            },\n            this._onRenderDetailsFooter,\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _onRenderDetailsHeader = (\n    detailsHeaderProps: IDetailsHeaderProps,\n    defaultRender?: IRenderFunction<IDetailsHeaderProps>,\n  ): JSX.Element => {\n    return <DetailsHeader {...detailsHeaderProps} />;\n  };\n\n  private _onRenderDetailsFooter = (\n    detailsFooterProps: IDetailsFooterProps,\n    defaultRender?: IRenderFunction<IDetailsFooterProps>,\n  ): JSX.Element | null => {\n    return null;\n  };\n\n  private _onRenderListCell = (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n    return (item: any, itemIndex: number): React.ReactNode => {\n      return this._onRenderCell(nestingDepth, item, itemIndex);\n    };\n  };\n\n  private _onRenderCell = (nestingDepth: number, item: any, index: number): React.ReactNode => {\n    const {\n      compact,\n      dragDropEvents,\n      rowElementEventMap: eventsToRegister,\n      onRenderMissingItem,\n      onRenderItemColumn,\n      getCellValueKey,\n      selectionMode = this._selection.mode,\n      viewport,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      groupProps,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n    } = this.props;\n\n    const onRenderRow = this.props.onRenderRow\n      ? composeRenderFunction(this.props.onRenderRow, this._onRenderRow)\n      : this._onRenderRow;\n\n    const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n    const selection = this._selection;\n    const dragDropHelper = this._dragDropHelper;\n    const { adjustedColumns: columns } = this.state;\n\n    const rowProps: IDetailsRowProps = {\n      item: item,\n      itemIndex: index,\n      compact: compact,\n      columns: columns,\n      groupNestingDepth: nestingDepth,\n      selectionMode: selectionMode,\n      selection: selection,\n      onDidMount: this._onRowDidMount,\n      onWillUnmount: this._onRowWillUnmount,\n      onRenderItemColumn: onRenderItemColumn,\n      getCellValueKey: getCellValueKey,\n      eventsToRegister: eventsToRegister,\n      dragDropEvents: dragDropEvents,\n      dragDropHelper: dragDropHelper,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      collapseAllVisibility: collapseAllVisibility,\n      getRowAriaLabel: getRowAriaLabel,\n      getRowAriaDescribedBy: getRowAriaDescribedBy,\n      checkButtonAriaLabel: checkButtonAriaLabel,\n      checkboxCellClassName: checkboxCellClassName,\n      useReducedRowRenderer: useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps: cellStyleProps,\n      onRenderDetailsCheckbox: onRenderCheckbox,\n      enableUpdateAnimations,\n      rowWidth: this._sumColumnWidths(columns),\n      useFastIcons,\n    };\n\n    if (!item) {\n      if (onRenderMissingItem) {\n        return onRenderMissingItem(index, rowProps);\n      }\n\n      return null;\n    }\n\n    return onRenderRow(rowProps);\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing: isSizing });\n  };\n\n  private _onHeaderKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.down) {\n      if (this._focusZone.current && this._focusZone.current.focus()) {\n        // select the first item in list after down arrow key event\n        // only if nothing was selected; otherwise start with the already-selected item\n        if (this._selection.getSelectedIndices().length === 0) {\n          this._selection.setIndexSelected(0, true, false);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n\n  private _onContentKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.up && !ev.altKey) {\n      if (this._header.current && this._header.current.focus()) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _onColumnDragEnd = (props: { dropLocation?: ColumnDragEndLocation }, event: MouseEvent): void => {\n    const { columnReorderOptions } = this.props;\n    let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n    if (columnReorderOptions && columnReorderOptions.onDragEnd) {\n      if (props.dropLocation && props.dropLocation !== ColumnDragEndLocation.header) {\n        finalDropLocation = props.dropLocation;\n      } else if (this._root.current) {\n        const clientRect = this._root.current.getBoundingClientRect();\n        if (\n          event.clientX > clientRect.left &&\n          event.clientX < clientRect.right &&\n          event.clientY > clientRect.top &&\n          event.clientY < clientRect.bottom\n        ) {\n          finalDropLocation = ColumnDragEndLocation.surface;\n        }\n      }\n      columnReorderOptions.onDragEnd(finalDropLocation);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(newProps: IDetailsListProps, forceUpdate?: boolean, resizingColumnIndex?: number): void {\n    const adjustedColumns = this._getAdjustedColumns(newProps, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    if (adjustedColumns) {\n      this.setState(\n        {\n          adjustedColumns: adjustedColumns,\n          lastWidth: viewportWidth,\n        },\n        this._notifyColumnsResized,\n      );\n    }\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = this.state ? this.state.lastWidth : -1;\n    const lastSelectionMode = this.state ? this.state.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      if (resizingColumnIndex !== undefined) {\n        adjustedColumns = this._getJustifiedColumnsAfterResize(\n          newColumns,\n          viewportWidth,\n          newProps,\n          resizingColumnIndex,\n        );\n      } else {\n        adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps, 0);\n      }\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[]): IColumn[] {\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      if (!newColumn.calculatedWidth) {\n        newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n      }\n\n      return newColumn;\n    });\n  }\n\n  private _getJustifiedColumnsAfterResize(\n    newColumns: IColumn[],\n    viewportWidth: number,\n    props: IDetailsListProps,\n    resizingColumnIndex: number,\n  ): IColumn[] {\n    const fixedColumns = newColumns.slice(0, resizingColumnIndex);\n    fixedColumns.forEach(column => (column.calculatedWidth = this._getColumnOverride(column.key).currentWidth));\n\n    const fixedWidth = fixedColumns.reduce((total, column, i) => total + getPaddedWidth(column, i === 0, props), 0);\n\n    const remainingColumns = newColumns.slice(resizingColumnIndex);\n    const remainingWidth = viewportWidth - fixedWidth;\n\n    return [\n      ...fixedColumns,\n      ...this._getJustifiedColumns(remainingColumns, remainingWidth, props, resizingColumnIndex),\n    ];\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(\n    newColumns: IColumn[],\n    viewportWidth: number,\n    props: IDetailsListProps,\n    firstIndex: number,\n  ): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const newColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n        ...this._columnOverrides[column.key],\n      };\n\n      const isFirst = i + firstIndex === 0;\n      totalWidth += getPaddedWidth(newColumn, isFirst, props);\n\n      return newColumn;\n    });\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex > 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // tslint:disable-next-line:deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, false, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this._adjustColumns(this.props, true, resizingColumnIndex);\n\n    this.setState({\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n\n  private _getDetailsFooterProps(): IDetailsFooterProps {\n    const { adjustedColumns: columns } = this.state;\n\n    const {\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      selectionMode = this._selection.mode,\n    } = this.props;\n\n    return {\n      columns: columns,\n      groupNestingDepth: this._getGroupNestingDepth(),\n      selection: this._selection,\n      selectionMode: selectionMode,\n      viewport: viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }\n\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\n    const { columnReorderOptions } = this.props;\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd: this._onColumnDragEnd,\n      };\n    }\n  }\n\n  private _getGroupProps(detailsGroupProps: IDetailsGroupRenderProps): IGroupRenderProps {\n    const {\n      onRenderFooter: onRenderDetailsGroupFooter,\n      onRenderHeader: onRenderDetailsGroupHeader,\n    } = detailsGroupProps;\n    const { adjustedColumns: columns } = this.state;\n    const {\n      selectionMode = this._selection.mode,\n      viewport,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      checkboxVisibility,\n      indentWidth,\n    } = this.props;\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    const onRenderFooter = onRenderDetailsGroupFooter\n      ? (props: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...props,\n              columns: columns,\n              groupNestingDepth: groupNestingDepth,\n              indentWidth,\n              selection: this._selection,\n              selectionMode: selectionMode,\n              viewport: viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n\n    const onRenderHeader = onRenderDetailsGroupHeader\n      ? (props: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupHeader(\n            {\n              ...props,\n              columns: columns,\n              groupNestingDepth: groupNestingDepth,\n              indentWidth,\n              selection: this._selection,\n              selectionMode: selectionMode,\n              viewport: viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n\n    return {\n      ...detailsGroupProps,\n      onRenderFooter,\n      onRenderHeader,\n    };\n  }\n\n  private isRightArrow = (event: React.KeyboardEvent<HTMLElement>) => {\n    return event.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n  };\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, isFirst: boolean, props: IDetailsListProps): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    column.calculatedWidth! +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n","import { IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsList',\n  compact: 'ms-DetailsList--Compact',\n  contentWrapper: 'ms-DetailsList-contentWrapper',\n  headerWrapper: 'ms-DetailsList-headerWrapper',\n  isFixed: 'is-fixed',\n  isHorizontalConstrained: 'is-horizontalConstrained',\n  listCell: 'ms-List-cell',\n};\n\nexport const getStyles = (props: IDetailsListStyleProps): IDetailsListStyles => {\n  const { theme, className, isHorizontalConstrained, compact, isFixed } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        background: semanticColors.listBackground,\n        color: semanticColors.listText,\n        selectors: {\n          [`& .${classNames.listCell}`]: {\n            minHeight: 38,\n            wordBreak: 'break-word',\n          },\n        },\n      },\n\n      isFixed && classNames.isFixed,\n\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32,\n            },\n          },\n        },\n      ],\n\n      isHorizontalConstrained && [\n        classNames.isHorizontalConstrained,\n        {\n          overflowX: 'auto',\n          overflowY: 'visible',\n          WebkitOverflowScrolling: 'touch',\n        },\n      ],\n\n      className,\n    ],\n\n    focusZone: [\n      {\n        display: 'inline-block',\n        minWidth: '100%',\n        minHeight: 1,\n      },\n    ],\n    headerWrapper: classNames.headerWrapper,\n    contentWrapper: classNames.contentWrapper,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IDetailsListProps, IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\nimport { DetailsListBase } from './DetailsList.base';\nimport { getStyles } from './DetailsList.styles';\n\nexport { IDetailsListProps };\n\nexport const DetailsList: React.FunctionComponent<IDetailsListProps> = styled<\n  IDetailsListProps,\n  IDetailsListStyleProps,\n  IDetailsListStyles\n>(DetailsListBase, getStyles, undefined, {\n  scope: 'DetailsList',\n});\n","import * as React from 'react';\nimport { ITheme, IStyle } from '../../Styling';\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Spinner}\n */\nexport interface ISpinner {}\n\n/**\n * Spinner component props.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the ISpinner interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ISpinner>;\n\n  /**\n   * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize` instead.\n   * @deprecated Use `SpinnerSize` instead.\n   */\n  // tslint:disable-next-line:deprecation\n  type?: SpinnerType;\n\n  /**\n   * The size of Spinner to render. \\{ extraSmall, small, medium, large \\}\n   * @defaultvalue SpinnerType.medium\n   */\n  size?: SpinnerSize;\n\n  /**\n   * The label to show next to the Spinner. Label updates will be announced to the screen readers.\n   * Use ariaLive to control politeness level.\n   */\n  label?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the Spinner.\n   */\n  className?: string;\n\n  /**\n   * Politeness setting for label update announcement.\n   * @defaultvalue polite\n   */\n  ariaLive?: 'assertive' | 'polite' | 'off';\n\n  /**\n   * Alternative status label for screen reader\n   */\n  ariaLabel?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>;\n\n  /**\n   * The position of the label in regards of the spinner animation.\n   * @defaultvalue SpinnerLabelPosition.bottom\n   */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Possible variations of the spinner circle size.\n * {@docCategory Spinner}\n */\nexport enum SpinnerSize {\n  /**\n   * 12px Spinner diameter\n   */\n  xSmall = 0,\n\n  /**\n   * 16px Spinner diameter\n   */\n  small = 1,\n\n  /**\n   * 20px Spinner diameter\n   */\n  medium = 2,\n\n  /**\n   * 28px Spinner diameter\n   */\n  large = 3,\n}\n\n/**\n * Possible locations of the label in regards to the spinner\n * @defaultvalue bottom\n * {@docCategory Spinner}\n */\nexport type SpinnerLabelPosition = 'top' | 'right' | 'bottom' | 'left';\n\n/**\n * Deprecated at v2.0.0, use `SpinnerSize` instead.\n * @deprecated Use `SpinnerSize` instead.\n * {@docCategory Spinner}\n */\nexport enum SpinnerType {\n  /**\n   * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize.medium` instead.\n   * @deprecated Use `SpinnerSize.medium` instead.\n   */\n  normal = 0,\n\n  /**\n   * Deprecated and will be removed at \\>= 2.0.0. Use `SpinnerSize.large` instead.\n   * @deprecated Use `SpinnerSize.large` instead.\n   */\n  large = 1,\n}\n\n/**\n * The props needed to construct styles.\n * This represents the simplified set of immutable things which control the class names.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyleProps {\n  /** Theme provided by High-Order Component. */\n  theme: ITheme;\n\n  /** Size of the spinner animation. */\n  size?: SpinnerSize;\n\n  /** CSS class name for the component attached to the root stylable area. */\n  className?: string;\n\n  /** Position of the label in regards to the spinner animation. */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Represents the stylable areas of the control.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyles {\n  /** Styles for the root element. Refers to the wrapper containing both the circle and the label. */\n  root?: IStyle;\n\n  /** Styles for the spinner circle animation. */\n  circle?: IStyle;\n\n  /** Styles for the label accompanying the circle. */\n  label?: IStyle;\n\n  /** Styles for the hidden helper element to aid with screen readers. */\n  screenReaderText?: IStyle;\n}\n","import * as React from 'react';\nimport { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles, SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\nexport class SpinnerBase extends React.Component<ISpinnerProps, any> {\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom',\n  };\n\n  public render() {\n    // tslint:disable-next-line:deprecation\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\n    const statusMessage = ariaLabel;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // tslint:disable-next-line:deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      size: styleSize,\n      className,\n      labelPosition,\n    });\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div className={classNames.circle} />\n        {label && <div className={classNames.label}>{label}</div>}\n        {statusMessage && (\n          <div role=\"status\" aria-live={ariaLive}>\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import { ISpinnerStyleProps, ISpinnerStyles, SpinnerSize } from './Spinner.types';\nimport { hiddenContentStyle, keyframes, HighContrastSelector, getGlobalClassNames } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\n\nconst GlobalClassNames = {\n  root: 'ms-Spinner',\n  circle: 'ms-Spinner-circle',\n  label: 'ms-Spinner-label',\n};\n\nconst spinAnimation = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      transform: 'rotate(0deg)',\n    },\n    '100%': {\n      transform: 'rotate(360deg)',\n    },\n  }),\n);\n\nexport const getStyles = (props: ISpinnerStyleProps): ISpinnerStyles => {\n  const { theme, size, className, labelPosition } = props;\n\n  const { palette } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n      labelPosition === 'top' && {\n        flexDirection: 'column-reverse',\n      },\n      labelPosition === 'right' && {\n        flexDirection: 'row',\n      },\n      labelPosition === 'left' && {\n        flexDirection: 'row-reverse',\n      },\n      className,\n    ],\n    circle: [\n      classNames.circle,\n      {\n        boxSizing: 'border-box',\n        borderRadius: '50%',\n        border: '1.5px solid ' + palette.themeLight,\n        borderTopColor: palette.themePrimary,\n        animationName: spinAnimation(),\n        animationDuration: '1.3s',\n        animationIterationCount: 'infinite',\n        animationTimingFunction: 'cubic-bezier(.53,.21,.29,.67)',\n        selectors: {\n          [HighContrastSelector]: {\n            borderTopColor: 'Highlight',\n          },\n        },\n      },\n      size === SpinnerSize.xSmall && [\n        'ms-Spinner--xSmall',\n        {\n          width: 12,\n          height: 12,\n        },\n      ],\n      size === SpinnerSize.small && [\n        'ms-Spinner--small',\n        {\n          width: 16,\n          height: 16,\n        },\n      ],\n      size === SpinnerSize.medium && [\n        'ms-Spinner--medium',\n        {\n          width: 20,\n          height: 20,\n        },\n      ],\n      size === SpinnerSize.large && [\n        'ms-Spinner--large',\n        {\n          width: 28,\n          height: 28,\n        },\n      ],\n    ],\n    label: [\n      classNames.label,\n      theme.fonts.small,\n      {\n        color: palette.themePrimary,\n        margin: '8px 0 0',\n        textAlign: 'center',\n      },\n      labelPosition === 'top' && {\n        margin: '0 0 8px',\n      },\n      labelPosition === 'right' && {\n        margin: '0 0 0 8px',\n      },\n      labelPosition === 'left' && {\n        margin: '0 8px 0 0',\n      },\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { SpinnerBase } from './Spinner.base';\nimport { getStyles } from './Spinner.styles';\nimport { ISpinnerProps, ISpinnerStyles, ISpinnerStyleProps } from './Spinner.types';\n\nexport const Spinner: React.FunctionComponent<ISpinnerProps> = styled<\n  ISpinnerProps,\n  ISpinnerStyleProps,\n  ISpinnerStyles\n>(SpinnerBase, getStyles, undefined, { scope: 'Spinner' });\n","import { IButtonStyles } from '../Button.types';\nimport { ITheme, concatStyleSets, HighContrastSelector } from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport { getStyles as getBaseButtonStyles } from '../BaseButton.styles';\nimport { getStyles as getSplitButtonStyles } from '../SplitButton/SplitButton.styles';\n\nexport const getStyles = memoizeFunction(\n  (theme: ITheme, customStyles?: IButtonStyles): IButtonStyles => {\n    const baseButtonStyles: IButtonStyles = getBaseButtonStyles(theme);\n    const splitButtonStyles: IButtonStyles = getSplitButtonStyles(theme);\n    const { palette, semanticColors } = theme;\n    const iconButtonStyles: IButtonStyles = {\n      root: {\n        padding: '0 4px',\n        width: '32px',\n        height: '32px',\n        backgroundColor: 'transparent',\n        border: 'none',\n        color: semanticColors.link,\n      },\n\n      rootHovered: {\n        color: palette.themeDarkAlt,\n        backgroundColor: palette.neutralLighter,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'Highlight',\n            color: 'Highlight',\n          },\n        },\n      },\n\n      rootHasMenu: {\n        width: 'auto',\n      },\n\n      rootPressed: {\n        color: palette.themeDark,\n        backgroundColor: palette.neutralLight,\n      },\n\n      rootExpanded: {\n        color: palette.themeDark,\n        backgroundColor: palette.neutralLight,\n      },\n\n      rootChecked: {\n        color: palette.themeDark,\n        backgroundColor: palette.neutralLight,\n      },\n\n      rootCheckedHovered: {\n        color: palette.themeDark,\n        backgroundColor: palette.neutralQuaternaryAlt,\n      },\n\n      rootDisabled: {\n        color: palette.neutralTertiaryAlt,\n      },\n    };\n\n    return concatStyleSets(baseButtonStyles, iconButtonStyles, splitButtonStyles, customStyles)!;\n  },\n);\n","import * as React from 'react';\nimport { BaseButton } from '../BaseButton';\nimport { customizable, nullRender } from '../../../Utilities';\nimport { IButtonProps } from '../Button.types';\nimport { getStyles } from './IconButton.styles';\n\n/**\n * {@docCategory Button}\n */\n@customizable('IconButton', ['theme', 'styles'], true)\nexport class IconButton extends React.Component<IButtonProps, {}> {\n  public render(): JSX.Element {\n    const { styles, theme } = this.props;\n\n    return (\n      <BaseButton\n        {...this.props}\n        variantClassName=\"ms-Button--icon\"\n        styles={getStyles(theme!, styles)}\n        onRenderText={nullRender}\n        onRenderDescription={nullRender}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport { DetailsListBase } from './DetailsList.base';\nimport { ISelection, SelectionMode, ISelectionZoneProps } from '../../utilities/selection/index';\nimport { IRefObject, IBaseProps, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport { IDragDropEvents, IDragDropContext, IDragDropHelper, IDragDropOptions } from './../../utilities/dragdrop/index';\nimport { IGroup, IGroupRenderProps, IGroupDividerProps, IGroupedListProps } from '../GroupedList/index';\nimport { IDetailsRowProps, IDetailsRowBaseProps } from '../DetailsList/DetailsRow';\nimport { IDetailsHeaderProps, IDetailsHeaderBaseProps } from './DetailsHeader';\nimport { IDetailsFooterProps, IDetailsFooterBaseProps } from './DetailsFooter.types';\nimport { IWithViewportProps, IViewport } from '../../utilities/decorators/withViewport';\nimport { IList, IListProps, ScrollToMode } from '../List/index';\nimport { ITheme, IStyle } from '../../Styling';\nimport { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\nimport { IDetailsCheckboxProps } from './DetailsRowCheck.types';\nimport { IDetailsColumnStyleProps, IDetailsColumnProps, IDetailsColumnStyles } from './DetailsColumn.types';\n\nexport {\n  IDetailsHeaderProps,\n  IDetailsRowBaseProps,\n  IDetailsHeaderBaseProps,\n  IDetailsFooterBaseProps,\n  IDragDropContext,\n  IDragDropEvents,\n  IDragDropHelper,\n  IDragDropOptions,\n  IViewport,\n  IWithViewportProps,\n};\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list prop updates don't change, but the list\n   * still needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change,\n   * you can call this to force a re-evaluation. Be aware that this can be an expensive operation and should be\n   * done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Scroll to and focus the item at the given index. focusIndex will call scrollToIndex on the specified index.\n   *\n   * @param index - Index of item to scroll to\n   * @param forceIntoFirstElement - If true, focus will be set to the first focusable child element of the item rather\n   *  than the item itself.\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional setting to determine where in the window the item should be scrolled to\n   * when focused.\n   */\n  focusIndex: (\n    index: number,\n    forceIntoFirstElement?: boolean,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListProps extends IBaseProps<IDetailsList>, IWithViewportProps {\n  /**\n   * Theme provided by the Higher Order Component\n   */\n  theme?: ITheme;\n\n  /**\n   * Style function to be passed in to override the themed or default styles\n   */\n  styles?: IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>;\n\n  /**\n   * Optional callback to access the IDetailsList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IDetailsList>;\n\n  /** A key that uniquely identifies the given items. If provided, the selection will be reset when the key changes. */\n  setKey?: string;\n\n  /** The items to render. */\n  items: any[];\n\n  /** Set this to true to indicate that the items being displayed is placeholder data. */\n  isPlaceholderData?: boolean;\n\n  /** Optional properties to pass through to the list components being rendered. */\n  listProps?: IListProps;\n\n  /**\n   * Optional default focused index to set focus to once the items have rendered and the index exists.\n   */\n  initialFocusedIndex?: number;\n\n  /** Optional class name to add to the root element. */\n  className?: string;\n\n  /** Optional grouping instructions. The definition for IGroup can be found under the GroupedList component. */\n  groups?: IGroup[];\n\n  /** Optional override properties to render groups. */\n  groupProps?: IDetailsGroupRenderProps;\n\n  /** Optional override for the indent width used for group nesting. */\n  indentWidth?: number;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. Options include none, single, multiple */\n  selectionMode?: SelectionMode;\n\n  /**\n   * By default, selection is cleared when clicking on an empty (non-focusable) section of the screen.\n   * Setting this value to true overrides that behavior and maintains selection.\n   * @defaultvalue false\n   **/\n  selectionPreservedOnEmptyClick?: boolean;\n\n  /**\n   * Addition props to pass through to the selection zone created by default.\n   */\n  selectionZoneProps?: ISelectionZoneProps;\n\n  /** Controls how the columns are adjusted. */\n  layoutMode?: DetailsListLayoutMode;\n\n  /**\n   * Controls the visibility of selection check box.\n   * @defaultvalue CheckboxVisibility.onHover\n   */\n  checkboxVisibility?: CheckboxVisibility;\n\n  /**\n   * Controls the visibility of the details header.\n   * @defaultvalue true\n   */\n  isHeaderVisible?: boolean;\n\n  /** Given column defitions. If none are provided, default columns will be created based on the item's properties. */\n  columns?: IColumn[];\n\n  /** Controls how the list contrains overflow. */\n  constrainMode?: ConstrainMode;\n\n  /** Event names and corresponding callbacks that will be registered to rendered row elements. */\n  rowElementEventMap?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Callback for when the details list has been updated. Useful for telemetry tracking externally. */\n  onDidUpdate?: (detailsList?: DetailsListBase) => void;\n\n  /**\n   * Callback for when a given row has been mounted. Useful for identifying when a row has been rendered on the page.\n   */\n  onRowDidMount?: (item?: any, index?: number) => void;\n\n  /**\n   * Callback for when a given row has been unmounted.\n   * Useful for identifying when a row has been removed from the page.\n   */\n  onRowWillUnmount?: (item?: any, index?: number) => void;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnHeaderClick?: (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void;\n\n  /** Callback for when the user asks for a contextual menu (usually via right click) from a column header. */\n  onColumnHeaderContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /** Callback fired on column resize */\n  onColumnResize?: (column?: IColumn, newWidth?: number, columnIndex?: number) => void;\n\n  /** Callback for when a given row has been invoked (by pressing enter while it is selected.) */\n  onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;\n\n  /**\n   * Callback for when the context menu of an item has been accessed.\n   * If undefined or false are returned, ev.preventDefault() will be called.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n\n  /**\n   *  If provided, will allow the caller to override the default row rendering.\n   */\n  onRenderRow?: IRenderFunction<IDetailsRowProps>;\n\n  /**\n   * If provided, will be the \"default\" item column renderer method.\n   * This affects cells within the rows, not the rows themselves.\n   * If a column definition provides its own onRender method, that will be used instead of this.\n   */\n  onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => React.ReactNode;\n\n  /**\n   * If provided, will be the \"default\" item column cell value return. column getValueKey can override getCellValue.\n   */\n  getCellValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  /** Map of callback functions related to row drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** Callback for what to render when the item is missing. */\n  onRenderMissingItem?: (index?: number, rowProps?: IDetailsRowProps) => React.ReactNode;\n\n  /**\n   * An override to render the details header.\n   */\n  onRenderDetailsHeader?: IRenderFunction<IDetailsHeaderProps>;\n\n  /**\n   * An override to render the details footer.\n   */\n  onRenderDetailsFooter?: IRenderFunction<IDetailsFooterProps>;\n\n  /**\n   * If provided, can be used to render a custom checkbox\n   */\n  onRenderCheckbox?: IRenderFunction<IDetailsListCheckboxProps>;\n\n  /** Viewport, provided by the withViewport decorator. */\n  viewport?: IViewport;\n\n  /**\n   * Callback for when an item in the list becomes active by clicking anywhere inside the row or navigating to it\n   * with the keyboard.\n   */\n  onActiveItemChanged?: (item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void;\n\n  /** The aria-label attribute to stamp out on the list header */\n  ariaLabelForListHeader?: string;\n\n  /** The aria-label attribute to stamp out on select all checkbox for the list */\n  ariaLabelForSelectAllCheckbox?: string;\n\n  /**\n   * An ARIA label for the name of the selection column, for localization.\n   */\n  ariaLabelForSelectionColumn?: string;\n\n  /** Callback to get the aria-label string for a given item. */\n  getRowAriaLabel?: (item: any) => string;\n\n  /** Callback to get the aria-describedby IDs (space separated strings) of the elements that describe the item. */\n  getRowAriaDescribedBy?: (item: any) => string;\n\n  /**\n   * Callback to get the item key, to be used in the selection and on render.\n   * Must be provided if sorting or filtering is enabled.\n   */\n  getKey?: (item: any, index?: number) => string;\n\n  /** A text summary of the table set via aria-label. */\n  ariaLabel?: string;\n\n  /** Check button aria label for details list. */\n  checkButtonAriaLabel?: string;\n\n  /** Aria label for grid in details list. */\n  ariaLabelForGrid?: string;\n\n  /** Boolean value to indicate if the role application should be applied on details list. Set to false by default */\n  shouldApplyApplicationRole?: boolean;\n\n  /**\n   * The minimum mouse move distance to interpret the action as drag event.\n   * @defaultvalue 5\n   */\n  minimumPixelsForDrag?: number;\n\n  /** Whether the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /**\n   * Whether to enable render page caching. This is an experimental performance optimization that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance\n   * for smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /**\n   * Optional class name to add to the cell of a checkbox\n   */\n  checkboxCellClassName?: string;\n\n  /**\n   * Whether or not the selection zone should enter modal state on touch.\n   */\n  enterModalSelectionOnTouch?: boolean;\n\n  /**\n   * Options for column re-order using drag and drop\n   */\n  columnReorderOptions?: IColumnReorderOptions;\n\n  /**\n   * Optional function to override default group height calculation used by list virtualization.\n   */\n  getGroupHeight?: IGroupedListProps['getGroupHeight'];\n\n  /**\n   * Rerender DetailsRow only when props changed. Might cause regression when depending on external updates.\n   * @defaultvalue false\n   */\n  useReducedRowRenderer?: boolean;\n\n  /**\n   * Props impacting the render style of cells. Since these have an impact on calculated column widths, they are\n   * handled separately from normal theme styling, but they are passed to the styling system.\n   */\n  cellStyleProps?: ICellStyleProps;\n\n  /**\n   * Whether or not to disable the built-in SelectionZone, so the host component can provide its own.\n   */\n  disableSelectionZone?: boolean;\n\n  /**\n   * Whether to animate updates\n   */\n  enableUpdateAnimations?: boolean;\n\n  /**\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\n   * but are still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumn {\n  /**\n   * A unique key for identifying the column.\n   */\n  key: string;\n\n  /**\n   * Name to render on the column header.\n   */\n  name: string;\n\n  /**\n   * The field to pull the text value from for the column. This can be null if a custom\n   * onRender method is provided.\n   */\n  fieldName?: string;\n\n  /**\n   * An optional class name to stick on the column cell within each row.\n   */\n  className?: string;\n\n  /**\n   * Style function to be passed in to override the themed or default styles\n   */\n  styles?: IStyleFunctionOrObject<IDetailsColumnStyleProps, IDetailsColumnStyles>;\n\n  /**\n   * Minimum width for the column.\n   */\n  minWidth: number;\n\n  /**\n   * Optional accessibility label (aria-label) attribute that will be stamped on to the element.\n   * If none is specified, the arai-label attribute will contain the column name\n   */\n  ariaLabel?: string;\n\n  /**\n   * Optional flag on whether the column is a header for the given row. There should be only one column with\n   * row header set to true.\n   * @defaultvalue false\n   */\n  isRowHeader?: boolean;\n\n  /**\n   * Maximum width for the column, if stretching is allowed in justified scenarios.\n   */\n  maxWidth?: number;\n\n  /**\n   * Defines how the column's header should render.\n   * @defaultvalue ColumnActionsMode.clickable\n   */\n  columnActionsMode?: ColumnActionsMode;\n\n  /**\n   * Optional iconName to use for the column header.\n   */\n  iconName?: string;\n\n  /**\n   * Whether or not only the icon is used in the column header.\n   * Set this to true so the column name and dropdown chevron are not displayed.\n   */\n  isIconOnly?: boolean;\n\n  /**\n   * Class name to add to the Icon component.\n   */\n  iconClassName?: string;\n\n  /**\n   * If specified will allow the column to be collapsed when rendered in justified layout.\n   * @deprecated Use `isCollapsible`\n   */\n  isCollapsable?: boolean;\n\n  /**\n   * If specified will allow the column to be collapsed when rendered in justified layout.\n   */\n  isCollapsible?: boolean;\n\n  /**\n   * Determines if the column is currently sorted. Renders a sort arrow in the column header.\n   */\n  isSorted?: boolean;\n\n  /**\n   * Determines if the arrow is pointed down (descending) or up.\n   */\n  isSortedDescending?: boolean;\n\n  /**\n   * Determines if the column can be resized.\n   */\n  isResizable?: boolean;\n\n  /**\n   * Determines if the column can render multi-line text.\n   */\n  isMultiline?: boolean;\n\n  /**\n   * If provided uses this method to render custom cell content, rather than the default text rendering.\n   */\n  onRender?: (item?: any, index?: number, column?: IColumn) => any;\n\n  /**\n   * If set, parent getCellValueKey will return this value.\n   */\n  getValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  /**\n   * If provider, can be used to render a custom column header divider\n   */\n  onRenderDivider?: IRenderFunction<IDetailsColumnProps>;\n\n  /**\n   * Determines if the column is filtered, and if so shows a filter icon.\n   */\n  isFiltered?: boolean;\n\n  /**\n   * If provided, will be executed when the user clicks on the column header.\n   */\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\n\n  /**\n   * If provided, will be executed when the user accesses the contextmenu on a column header.\n   */\n  onColumnContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /**\n   * If provided, will be executed when the column is resized with the column's current width.\n   * Prefer this callback over `DetailsList` `onColumnResize` if you require the `IColumn` to\n   * report its width after every resize event. Consider debouncing the callback if resize events\n   * occur frequently.\n   */\n  onColumnResize?: (width?: number) => void;\n\n  /**\n   * If set will show a grouped icon next to the column header name.\n   */\n  isGrouped?: boolean;\n\n  /**\n   * Arbitrary data passthrough which can be used by the caller.\n   */\n  data?: any;\n\n  /**\n   * Internal only value.\n   */\n  calculatedWidth?: number;\n\n  /**\n   * Internal only value.\n   * Remembers the actual witdh of the column on any case.\n   * On the other hand, calculatedWidth is only saved when it's defined by user, not for justified calculations.\n   */\n  currentWidth?: number;\n\n  /**\n   * An optional class name to stick on the column cell within each header.\n   */\n  headerClassName?: string;\n\n  /**\n   * If set, will add additional LTR padding-right to column and cells.\n   */\n  isPadded?: boolean;\n\n  /**\n   * ARIA label for the sort order of this column when sorted ascending.\n   */\n  sortAscendingAriaLabel?: string;\n  /**\n   * ARIA label for the sort order of this column when sorted descending.\n   */\n  sortDescendingAriaLabel?: string;\n  /**\n   * ARIA label for the status of this column when grouped.\n   */\n  groupAriaLabel?: string;\n  /**\n   * ARIA label for the status of this column when filtered.\n   */\n  filterAriaLabel?: string;\n  /**\n   * Indicates whether a dropdown menu is open so that the appropriate ARIA attributes are rendered.\n   */\n  isMenuOpen?: boolean;\n}\n\n/**\n * Enum to describe how a particular column header behaves.... This enum is used to\n * to specify the property IColumn:columnActionsMode.\n * If IColumn:columnActionsMode is undefined, then it's equivalent to ColumnActionsMode.clickable\n * {@docCategory DetailsList}\n */\nexport enum ColumnActionsMode {\n  /**\n   * Renders the column header as disabled.\n   */\n  disabled = 0,\n\n  /**\n   * Renders the column header is clickable.\n   */\n  clickable = 1,\n\n  /**\n   * Renders the column header ias clickable and displays the dropdown cheveron.\n   */\n  hasDropdown = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum ConstrainMode {\n  /** If specified, lets the content grow which allows the page to manage scrolling. */\n  unconstrained = 0,\n\n  /**\n   * If specified, constrains the list to the given layout space.\n   */\n  horizontalConstrained = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnReorderOptions {\n  /**\n   * Specifies the number fixed columns from left(0th index)\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromStart?: number;\n\n  /**\n   * Specifies the number fixed columns from right\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromEnd?: number;\n\n  /**\n   * Callback to handle the column dragstart\n   * draggedStarted indicates that the column drag has been started on DetailsHeader\n   */\n  onColumnDragStart?: (dragStarted: boolean) => void;\n\n  /**\n   * Callback to handle the column reorder\n   * draggedIndex is the source column index, that need to be placed in targetIndex\n   * Deprecated, use `onColumnDrop` instead.\n   * @deprecated Use `onColumnDrop` instead.\n   */\n  handleColumnReorder?: (draggedIndex: number, targetIndex: number) => void;\n\n  /**\n   * Callback to handle the column reorder\n   * draggedIndex is the source column index, that need to be placed in targetIndex\n   */\n  onColumnDrop?: (dragDropDetails: IColumnDragDropDetails) => void;\n\n  /**\n   * Callback to handle the column reorder\n   */\n  onDragEnd?: (columnDropLocationDetails: ColumnDragEndLocation) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnDragDropDetails {\n  /**\n   * Specifies the source column index\n   * @defaultvalue -1\n   */\n  draggedIndex: number;\n\n  /**\n   * Specifies the target column index\n   * @defaultvalue -1\n   */\n  targetIndex: number;\n}\n\n/**\n * Enum to describe where the column has been dropped, after starting the drag\n * {@docCategory DetailsList}\n */\nexport enum ColumnDragEndLocation {\n  /**\n   * Drag ended outside of current list\n   */\n  outside = 0,\n\n  /**\n   * Drag ended on current List\n   */\n  surface = 1,\n\n  /**\n   * Drag ended on Header\n   */\n  header = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum DetailsListLayoutMode {\n  /**\n   * Lets the user resize columns and makes not attempt to fit them.\n   */\n  fixedColumns = 0,\n\n  /**\n   * Manages which columns are visible, tries to size them according to their min/max rules and drops\n   * off columns that can't fit and have isCollapsible set.\n   */\n  justified = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum CheckboxVisibility {\n  /**\n   * Visible on hover.\n   */\n  onHover = 0,\n\n  /**\n   * Visible always.\n   */\n  always = 1,\n\n  /**\n   * Hide checkboxes.\n   */\n  hidden = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsListStyleProps = Required<Pick<IDetailsListProps, 'theme'>> &\n  Pick<IDetailsListProps, 'className'> & {\n    /** Whether the list is horizontally constrained */\n    isHorizontalConstrained?: boolean;\n\n    /** Whether the list is in compact mode */\n    compact?: boolean;\n\n    /** Whether the list is fixed in size */\n    isFixed?: boolean;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListStyles {\n  root: IStyle;\n  focusZone: IStyle;\n  headerWrapper: IStyle;\n  contentWrapper: IStyle;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupRenderProps extends IGroupRenderProps {\n  onRenderFooter?: IRenderFunction<IDetailsGroupDividerProps>;\n  onRenderHeader?: IRenderFunction<IDetailsGroupDividerProps>;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupDividerProps extends IGroupDividerProps, IDetailsItemProps {}\n\nexport interface IDetailsListCheckboxProps extends IDetailsCheckboxProps {}\n"],"sourceRoot":""}